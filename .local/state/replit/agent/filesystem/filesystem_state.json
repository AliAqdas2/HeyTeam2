{"file_contents":{"client/src/pages/job-form.tsx":{"content":"import React from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useMutation, useQuery } from \"@tanstack/react-query\";\nimport { useLocation, useRoute } from \"wouter\";\nimport { Card, CardContent, CardHeader, CardFooter } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { insertJobSchema, type InsertJob, type Job } from \"@shared/schema\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { ArrowLeft } from \"lucide-react\";\nimport { Link } from \"wouter\";\n\nexport default function JobForm() {\n  const [, setLocation] = useLocation();\n  const [, params] = useRoute(\"/jobs/:id/edit\");\n  const { toast } = useToast();\n  const isEdit = !!params?.id;\n\n  const { data: job, isLoading } = useQuery<Job>({\n    queryKey: [\"/api/jobs\", params?.id],\n    enabled: isEdit,\n  });\n\n  const getDefaultStartTime = () => {\n    const date = new Date();\n    date.setHours(9, 0, 0, 0);\n    return date;\n  };\n\n  const getDefaultEndTime = () => {\n    const date = new Date();\n    date.setHours(17, 0, 0, 0);\n    return date;\n  };\n\n  const form = useForm<InsertJob>({\n    resolver: zodResolver(insertJobSchema),\n    defaultValues: {\n      name: \"\",\n      location: \"\",\n      startTime: getDefaultStartTime(),\n      endTime: getDefaultEndTime(),\n      requiredHeadcount: undefined,\n      notes: \"\",\n    },\n  });\n\n  const createMutation = useMutation({\n    mutationFn: (data: InsertJob) => apiRequest(\"POST\", \"/api/jobs\", data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/jobs\"] });\n      toast({\n        title: \"Job Created\",\n        description: \"Your job has been created successfully\",\n      });\n      setLocation(\"/\");\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to create job\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateMutation = useMutation({\n    mutationFn: (data: InsertJob) => apiRequest(\"PATCH\", `/api/jobs/${params?.id}`, data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/jobs\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/jobs\", params?.id] });\n      toast({\n        title: \"Job Updated\",\n        description: \"Your job has been updated successfully\",\n      });\n      setLocation(\"/\");\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to update job\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  React.useEffect(() => {\n    if (isEdit && job) {\n      form.reset({\n        name: job.name,\n        location: job.location,\n        startTime: new Date(job.startTime),\n        endTime: new Date(job.endTime),\n        requiredHeadcount: job.requiredHeadcount || undefined,\n        notes: job.notes || \"\",\n      });\n    }\n  }, [job, isEdit, form]);\n\n  if (isEdit && isLoading) {\n    return (\n      <div className=\"flex items-center justify-center min-h-[400px]\">\n        <div className=\"animate-spin w-8 h-8 border-4 border-primary border-t-transparent rounded-full\" aria-label=\"Loading\" />\n      </div>\n    );\n  }\n\n  const onSubmit = (data: InsertJob) => {\n    if (isEdit) {\n      updateMutation.mutate(data);\n    } else {\n      createMutation.mutate(data);\n    }\n  };\n\n  return (\n    <div className=\"max-w-2xl\">\n      <div className=\"mb-6\">\n        <Link href=\"/\">\n          <a data-testid=\"link-back-dashboard\">\n            <Button variant=\"ghost\" size=\"sm\" className=\"gap-2 mb-4\">\n              <ArrowLeft className=\"h-4 w-4\" />\n              Back to Dashboard\n            </Button>\n          </a>\n        </Link>\n        <h1 className=\"text-3xl font-semibold\" data-testid=\"text-page-title\">\n          {isEdit ? \"Edit Job\" : \"Create New Job\"}\n        </h1>\n        <p className=\"text-muted-foreground mt-1\">\n          {isEdit ? \"Update job details and notify your crew of changes\" : \"Set up a new job and coordinate your crew\"}\n        </p>\n      </div>\n\n      <Card>\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)}>\n            <CardHeader>\n              <h2 className=\"text-lg font-semibold\">Job Details</h2>\n            </CardHeader>\n            <CardContent className=\"space-y-6\">\n              <FormField\n                control={form.control}\n                name=\"name\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Job Name</FormLabel>\n                    <FormControl>\n                      <Input placeholder=\"e.g., Downtown Construction Site\" {...field} data-testid=\"input-job-name\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"location\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Location</FormLabel>\n                    <FormControl>\n                      <Input placeholder=\"e.g., 123 Main St, City\" {...field} data-testid=\"input-job-location\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-6\">\n                <FormField\n                  control={form.control}\n                  name=\"startTime\"\n                  render={({ field }) => {\n                    const formatDateForInput = (date: Date | string | undefined) => {\n                      if (!date) return \"\";\n                      const d = date instanceof Date ? date : new Date(date);\n                      if (isNaN(d.getTime())) return \"\";\n                      \n                      const year = d.getFullYear();\n                      const month = String(d.getMonth() + 1).padStart(2, '0');\n                      const day = String(d.getDate()).padStart(2, '0');\n                      const hours = String(d.getHours()).padStart(2, '0');\n                      const minutes = String(d.getMinutes()).padStart(2, '0');\n                      \n                      return `${year}-${month}-${day}T${hours}:${minutes}`;\n                    };\n\n                    return (\n                      <FormItem>\n                        <FormLabel>Start Time</FormLabel>\n                        <FormControl>\n                          <Input\n                            type=\"datetime-local\"\n                            value={formatDateForInput(field.value)}\n                            onChange={(e) => {\n                              const dateStr = e.target.value;\n                              if (dateStr) {\n                                const date = new Date(dateStr);\n                                if (!isNaN(date.getTime())) {\n                                  field.onChange(date);\n                                }\n                              } else {\n                                field.onChange(undefined);\n                              }\n                            }}\n                            data-testid=\"input-start-time\"\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    );\n                  }}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"endTime\"\n                  render={({ field }) => {\n                    const formatDateForInput = (date: Date | string | undefined) => {\n                      if (!date) return \"\";\n                      const d = date instanceof Date ? date : new Date(date);\n                      if (isNaN(d.getTime())) return \"\";\n                      \n                      const year = d.getFullYear();\n                      const month = String(d.getMonth() + 1).padStart(2, '0');\n                      const day = String(d.getDate()).padStart(2, '0');\n                      const hours = String(d.getHours()).padStart(2, '0');\n                      const minutes = String(d.getMinutes()).padStart(2, '0');\n                      \n                      return `${year}-${month}-${day}T${hours}:${minutes}`;\n                    };\n\n                    return (\n                      <FormItem>\n                        <FormLabel>End Time</FormLabel>\n                        <FormControl>\n                          <Input\n                            type=\"datetime-local\"\n                            value={formatDateForInput(field.value)}\n                            onChange={(e) => {\n                              const dateStr = e.target.value;\n                              if (dateStr) {\n                                const date = new Date(dateStr);\n                                if (!isNaN(date.getTime())) {\n                                  field.onChange(date);\n                                }\n                              } else {\n                                field.onChange(undefined);\n                              }\n                            }}\n                            data-testid=\"input-end-time\"\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    );\n                  }}\n                />\n              </div>\n\n              <FormField\n                control={form.control}\n                name=\"requiredHeadcount\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Required Headcount (Optional)</FormLabel>\n                    <FormControl>\n                      <Input\n                        type=\"number\"\n                        placeholder=\"e.g., 6\"\n                        {...field}\n                        value={field.value || \"\"}\n                        onChange={(e) => field.onChange(e.target.value ? parseInt(e.target.value) : undefined)}\n                        data-testid=\"input-required-headcount\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"notes\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Notes (Optional)</FormLabel>\n                    <FormControl>\n                      <Textarea\n                        placeholder=\"Add any additional details about the job...\"\n                        className=\"resize-none h-24\"\n                        {...field}\n                        data-testid=\"input-notes\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </CardContent>\n            <CardFooter className=\"flex gap-3 justify-end border-t pt-6\">\n              <Link href=\"/\">\n                <a data-testid=\"link-cancel\">\n                  <Button type=\"button\" variant=\"outline\">Cancel</Button>\n                </a>\n              </Link>\n              <Button\n                type=\"submit\"\n                disabled={createMutation.isPending || updateMutation.isPending}\n                data-testid=\"button-submit-job\"\n              >\n                {(createMutation.isPending || updateMutation.isPending) && (\n                  <div className=\"animate-spin w-4 h-4 border-2 border-primary-foreground border-t-transparent rounded-full mr-2\" />\n                )}\n                {isEdit ? \"Update Job\" : \"Create Job\"}\n              </Button>\n            </CardFooter>\n          </form>\n        </Form>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":12006},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  // Whitespace-nowrap: Badges should never wrap.\n  \"whitespace-nowrap inline-flex items-center rounded-md border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\" +\n  \" hover-elevate \" ,\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground shadow-xs\",\n        secondary: \"border-transparent bg-secondary text-secondary-foreground\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground shadow-xs\",\n\n        outline: \" border [border-color:var(--badge-outline)] shadow-xs\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  },\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  );\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1202},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"client/src/components/theme-provider.tsx":{"content":"import { createContext, useContext, useEffect, useState } from \"react\";\n\ntype Theme = \"light\" | \"dark\";\n\ntype ThemeProviderProps = {\n  children: React.ReactNode;\n  defaultTheme?: Theme;\n};\n\ntype ThemeProviderState = {\n  theme: Theme;\n  setTheme: (theme: Theme) => void;\n};\n\nconst ThemeProviderContext = createContext<ThemeProviderState | undefined>(\n  undefined\n);\n\nexport function ThemeProvider({\n  children,\n  defaultTheme = \"light\",\n}: ThemeProviderProps) {\n  const [theme, setTheme] = useState<Theme>(\n    () => (localStorage.getItem(\"theme\") as Theme) || defaultTheme\n  );\n\n  useEffect(() => {\n    const root = document.documentElement;\n    root.classList.remove(\"light\", \"dark\");\n    root.classList.add(theme);\n    localStorage.setItem(\"theme\", theme);\n  }, [theme]);\n\n  return (\n    <ThemeProviderContext.Provider value={{ theme, setTheme }}>\n      {children}\n    </ThemeProviderContext.Provider>\n  );\n}\n\nexport const useTheme = () => {\n  const context = useContext(ThemeProviderContext);\n  if (context === undefined) {\n    throw new Error(\"useTheme must be used within a ThemeProvider\");\n  }\n  return context;\n};\n","size_bytes":1121},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\" +\n  \" hover-elevate active-elevate-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground border border-primary-border\",\n        destructive:\n          \"bg-destructive text-destructive-foreground border border-destructive-border\",\n        outline:\n          // Shows the background color of whatever card / sidebar / accent background it is inside of.\n          // Inherits the current text color.\n          \" border [border-color:var(--button-outline)]  shadow-xs active:shadow-none \",\n        secondary: \"border bg-secondary text-secondary-foreground border border-secondary-border \",\n        // Add a transparent border so that when someone toggles a border on later, it doesn't shift layout/size.\n        ghost: \"border border-transparent\",\n      },\n      // Heights are set as \"min\" heights, because sometimes Ai will place large amount of content\n      // inside buttons. With a min-height they will look appropriate with small amounts of content,\n      // but will expand to fit large amounts of content.\n      size: {\n        default: \"min-h-9 px-4 py-2\",\n        sm: \"min-h-8 rounded-md px-3 text-xs\",\n        lg: \"min-h-10 rounded-md px-8\",\n        icon: \"h-9 w-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  },\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  },\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":2359},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, timestamp, integer, boolean, uuid } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const organizations = pgTable(\"organizations\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n  updatedAt: timestamp(\"updated_at\").notNull().defaultNow(),\n});\n\nexport const adminUsers = pgTable(\"admin_users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  email: text(\"email\").notNull().unique(),\n  password: text(\"password\").notNull(),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n});\n\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  username: text(\"username\").notNull().unique(), // Now used for company name\n  firstName: text(\"first_name\"), // Team member first name\n  lastName: text(\"last_name\"), // Team member last name\n  password: text(\"password\").notNull(),\n  email: text(\"email\").notNull(),\n  countryCode: text(\"country_code\").default(\"US\"), // Country code for mobile number\n  mobileNumber: text(\"mobile_number\"), // Mobile number without country code\n  emailVerified: boolean(\"email_verified\").notNull().default(false),\n  mobileVerified: boolean(\"mobile_verified\").notNull().default(false),\n  currency: text(\"currency\").notNull().default(\"GBP\"), // User's preferred currency: GBP, USD, EUR\n  organizationId: varchar(\"organization_id\").references(() => organizations.id, { onDelete: 'cascade' }),\n  teamRole: text(\"team_role\").notNull().default(\"member\"), // \"owner\", \"admin\", \"member\"\n  isAdmin: boolean(\"is_admin\").notNull().default(false),\n  isActive: boolean(\"is_active\").notNull().default(true), // For soft delete\n  stripeCustomerId: text(\"stripe_customer_id\"),\n  stripeSubscriptionId: text(\"stripe_subscription_id\"),\n  referralCode: text(\"referral_code\"), // Optional referral code that brought this user\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n});\n\nexport const contacts = pgTable(\"contacts\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id, { onDelete: 'cascade' }),\n  firstName: text(\"first_name\").notNull(),\n  lastName: text(\"last_name\").notNull(),\n  countryCode: text(\"country_code\").notNull().default(\"US\"),\n  phone: text(\"phone\").notNull(),\n  email: text(\"email\"),\n  address: text(\"address\"),\n  profilePicture: text(\"profile_picture\"),\n  notes: text(\"notes\"),\n  skills: text(\"skills\").array().default(sql`ARRAY[]::text[]`),\n  qualifications: text(\"qualifications\").array().default(sql`ARRAY[]::text[]`),\n  blackoutPeriods: text(\"blackout_periods\").array().default(sql`ARRAY[]::text[]`),\n  isOptedOut: boolean(\"is_opted_out\").notNull().default(false),\n  quietHoursStart: text(\"quiet_hours_start\").default(\"22:00\"),\n  quietHoursEnd: text(\"quiet_hours_end\").default(\"07:00\"),\n  tags: text(\"tags\").array().default(sql`ARRAY[]::text[]`),\n  status: text(\"status\").notNull().default(\"free\"), // \"free\", \"on_job\", \"off_shift\"\n  rosterToken: varchar(\"roster_token\").unique(), // Unique token for viewing roster\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n  updatedAt: timestamp(\"updated_at\").notNull().defaultNow(),\n});\n\nexport const jobs = pgTable(\"jobs\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id, { onDelete: 'cascade' }),\n  name: text(\"name\").notNull(),\n  location: text(\"location\").notNull(),\n  startTime: timestamp(\"start_time\").notNull(),\n  endTime: timestamp(\"end_time\").notNull(),\n  requiredHeadcount: integer(\"required_headcount\"),\n  notes: text(\"notes\"),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n  updatedAt: timestamp(\"updated_at\").notNull().defaultNow(),\n});\n\nexport const templates = pgTable(\"templates\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id, { onDelete: 'cascade' }),\n  name: text(\"name\").notNull(),\n  content: text(\"content\").notNull(),\n  type: text(\"type\").notNull().default(\"standard\"),\n  includeRosterLink: boolean(\"include_roster_link\").notNull().default(false),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n});\n\nexport const campaigns = pgTable(\"campaigns\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id, { onDelete: 'cascade' }),\n  jobId: varchar(\"job_id\").notNull().references(() => jobs.id, { onDelete: 'cascade' }),\n  templateId: varchar(\"template_id\").notNull().references(() => templates.id),\n  sentAt: timestamp(\"sent_at\").notNull().defaultNow(),\n});\n\nexport const messages = pgTable(\"messages\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id, { onDelete: 'cascade' }),\n  contactId: varchar(\"contact_id\").notNull().references(() => contacts.id, { onDelete: 'cascade' }),\n  jobId: varchar(\"job_id\").references(() => jobs.id, { onDelete: 'set null' }),\n  campaignId: varchar(\"campaign_id\").references(() => campaigns.id, { onDelete: 'set null' }),\n  direction: text(\"direction\").notNull(),\n  content: text(\"content\").notNull(),\n  status: text(\"status\").notNull().default(\"queued\"),\n  twilioSid: text(\"twilio_sid\"),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n  updatedAt: timestamp(\"updated_at\").notNull().defaultNow(),\n});\n\nexport const availability = pgTable(\"availability\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  jobId: varchar(\"job_id\").notNull().references(() => jobs.id, { onDelete: 'cascade' }),\n  contactId: varchar(\"contact_id\").notNull().references(() => contacts.id, { onDelete: 'cascade' }),\n  status: text(\"status\").notNull().default(\"no_reply\"),\n  shiftPreference: text(\"shift_preference\"),\n  updatedAt: timestamp(\"updated_at\").notNull().defaultNow(),\n});\n\nexport const subscriptionPlans = pgTable(\"subscription_plans\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  description: text(\"description\"),\n  monthlyCredits: integer(\"monthly_credits\").notNull(), // SMS messages included\n  supportLevel: text(\"support_level\").notNull().default(\"email\"), // email, priority, dedicated\n  customTemplates: boolean(\"custom_templates\").notNull().default(false),\n  autoFollowUp: boolean(\"auto_follow_up\").notNull().default(false),\n  multiManager: boolean(\"multi_manager\").notNull().default(false),\n  aiFeatures: boolean(\"ai_features\").notNull().default(false),\n  dedicatedNumber: boolean(\"dedicated_number\").notNull().default(false),\n  priceGBP: integer(\"price_gbp\").notNull(), // Price in pence\n  priceUSD: integer(\"price_usd\").notNull(), // Price in cents\n  priceEUR: integer(\"price_eur\").notNull(), // Price in cents\n  stripePriceIdGBP: text(\"stripe_price_id_gbp\"),\n  stripePriceIdUSD: text(\"stripe_price_id_usd\"),\n  stripePriceIdEUR: text(\"stripe_price_id_eur\"),\n  isActive: boolean(\"is_active\").notNull().default(true),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n});\n\nexport const smsBundles = pgTable(\"sms_bundles\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  planId: varchar(\"plan_id\").references(() => subscriptionPlans.id, { onDelete: 'cascade' }), // Link to subscription plan\n  name: text(\"name\").notNull(),\n  description: text(\"description\"),\n  credits: integer(\"credits\").notNull(),\n  priceGBP: integer(\"price_gbp\").notNull(), // Price in pence\n  priceUSD: integer(\"price_usd\").notNull(), // Price in cents\n  priceEUR: integer(\"price_eur\").notNull(), // Price in cents\n  stripePriceIdGBP: text(\"stripe_price_id_gbp\"),\n  stripePriceIdUSD: text(\"stripe_price_id_usd\"),\n  stripePriceIdEUR: text(\"stripe_price_id_eur\"),\n  isActive: boolean(\"is_active\").notNull().default(true),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n});\n\nexport const creditGrants = pgTable(\"credit_grants\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id, { onDelete: 'cascade' }),\n  sourceType: text(\"source_type\").notNull(),\n  sourceRef: text(\"source_ref\"),\n  creditsGranted: integer(\"credits_granted\").notNull(),\n  creditsConsumed: integer(\"credits_consumed\").notNull().default(0),\n  creditsRemaining: integer(\"credits_remaining\").notNull(),\n  expiresAt: timestamp(\"expires_at\"),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n});\n\nexport const creditTransactions = pgTable(\"credit_transactions\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id, { onDelete: 'cascade' }),\n  grantId: varchar(\"grant_id\").notNull().references(() => creditGrants.id, { onDelete: 'cascade' }),\n  messageId: varchar(\"message_id\").references(() => messages.id, { onDelete: 'set null' }),\n  delta: integer(\"delta\").notNull(),\n  reason: text(\"reason\").notNull(),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n});\n\nexport const subscriptions = pgTable(\"subscriptions\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id, { onDelete: 'cascade' }),\n  planId: varchar(\"plan_id\").references(() => subscriptionPlans.id),\n  status: text(\"status\").notNull().default(\"trial\"),\n  currency: text(\"currency\").notNull().default(\"GBP\"), // GBP, USD, EUR\n  trialEndsAt: timestamp(\"trial_ends_at\"),\n  currentPeriodStart: timestamp(\"current_period_start\"),\n  currentPeriodEnd: timestamp(\"current_period_end\"),\n  stripeSubscriptionId: text(\"stripe_subscription_id\"),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n  updatedAt: timestamp(\"updated_at\").notNull().defaultNow(),\n});\n\nexport const passwordResetTokens = pgTable(\"password_reset_tokens\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id, { onDelete: 'cascade' }),\n  token: text(\"token\").notNull().unique(),\n  expiresAt: timestamp(\"expires_at\").notNull(),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n});\n\nexport const insertOrganizationSchema = createInsertSchema(organizations).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertUserSchema = createInsertSchema(users).pick({\n  username: true, // Company name\n  password: true,\n  email: true,\n  countryCode: true,\n  mobileNumber: true,\n});\n\nexport const insertContactSchema = createInsertSchema(contacts).omit({\n  id: true,\n  userId: true,\n  createdAt: true,\n  updatedAt: true,\n}).extend({\n  status: z.enum([\"free\", \"on_job\", \"off_shift\"]).default(\"free\"),\n});\n\nexport const insertJobSchema = createInsertSchema(jobs).omit({\n  id: true,\n  userId: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertTemplateSchema = createInsertSchema(templates).omit({\n  id: true,\n  userId: true,\n  createdAt: true,\n});\n\nexport const insertCampaignSchema = createInsertSchema(campaigns).omit({\n  id: true,\n  userId: true,\n  sentAt: true,\n});\n\nexport const insertMessageSchema = createInsertSchema(messages).omit({\n  id: true,\n  userId: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertAvailabilitySchema = createInsertSchema(availability).omit({\n  id: true,\n  updatedAt: true,\n});\n\nexport const insertSubscriptionPlanSchema = createInsertSchema(subscriptionPlans).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertSmsBundleSchema = createInsertSchema(smsBundles).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertCreditGrantSchema = createInsertSchema(creditGrants).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertCreditTransactionSchema = createInsertSchema(creditTransactions).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertSubscriptionSchema = createInsertSchema(subscriptions).omit({\n  id: true,\n  userId: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport type InsertOrganization = z.infer<typeof insertOrganizationSchema>;\nexport type Organization = typeof organizations.$inferSelect;\n\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\n\nexport type InsertContact = z.infer<typeof insertContactSchema>;\nexport type Contact = typeof contacts.$inferSelect;\n\nexport type InsertJob = z.infer<typeof insertJobSchema>;\nexport type Job = typeof jobs.$inferSelect;\n\nexport type InsertTemplate = z.infer<typeof insertTemplateSchema>;\nexport type Template = typeof templates.$inferSelect;\n\nexport type InsertCampaign = z.infer<typeof insertCampaignSchema>;\nexport type Campaign = typeof campaigns.$inferSelect;\n\nexport type InsertMessage = z.infer<typeof insertMessageSchema>;\nexport type Message = typeof messages.$inferSelect;\n\nexport type InsertAvailability = z.infer<typeof insertAvailabilitySchema>;\nexport type Availability = typeof availability.$inferSelect;\n\nexport type InsertSubscriptionPlan = z.infer<typeof insertSubscriptionPlanSchema>;\nexport type SubscriptionPlan = typeof subscriptionPlans.$inferSelect;\n\nexport type InsertSmsBundle = z.infer<typeof insertSmsBundleSchema>;\nexport type SmsBundle = typeof smsBundles.$inferSelect;\n\nexport type InsertCreditGrant = z.infer<typeof insertCreditGrantSchema>;\nexport type CreditGrant = typeof creditGrants.$inferSelect;\n\nexport type InsertCreditTransaction = z.infer<typeof insertCreditTransactionSchema>;\nexport type CreditTransaction = typeof creditTransactions.$inferSelect;\n\nexport type InsertSubscription = z.infer<typeof insertSubscriptionSchema>;\nexport type Subscription = typeof subscriptions.$inferSelect;\n\nexport const insertPasswordResetTokenSchema = createInsertSchema(passwordResetTokens).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport type InsertPasswordResetToken = z.infer<typeof insertPasswordResetTokenSchema>;\nexport type PasswordResetToken = typeof passwordResetTokens.$inferSelect;\n\nexport const insertAdminUserSchema = createInsertSchema(adminUsers).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport type InsertAdminUser = z.infer<typeof insertAdminUserSchema>;\nexport type AdminUser = typeof adminUsers.$inferSelect;\n","size_bytes":14394},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/pages/dashboard.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Link } from \"wouter\";\nimport { Card, CardContent, CardHeader, CardFooter } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Input } from \"@/components/ui/input\";\nimport { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle, AlertDialogTrigger } from \"@/components/ui/alert-dialog\";\nimport { Plus, MapPin, Clock, Users, Calendar as CalendarIcon, Search, Trash2 } from \"lucide-react\";\nimport { format } from \"date-fns\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport type { Job, Availability } from \"@shared/schema\";\n\ntype JobWithAvailability = Job & {\n  availabilityCounts: {\n    confirmed: number;\n    maybe: number;\n    declined: number;\n    noReply: number;\n  };\n};\n\nexport default function Dashboard() {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n\n  const { data: jobs, isLoading } = useQuery<JobWithAvailability[]>({\n    queryKey: [\"/api/jobs\"],\n  });\n\n  const { data: subscription } = useQuery<any>({\n    queryKey: [\"/api/subscription\"],\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center min-h-[400px]\">\n        <div className=\"animate-spin w-8 h-8 border-4 border-primary border-t-transparent rounded-full\" aria-label=\"Loading\" />\n      </div>\n    );\n  }\n\n  // Filter jobs based on search query\n  const filterJobs = (jobList: JobWithAvailability[]) => {\n    if (!searchQuery.trim()) return jobList;\n    \n    const query = searchQuery.toLowerCase();\n    return jobList.filter(job => \n      job.name.toLowerCase().includes(query) ||\n      job.location?.toLowerCase().includes(query) ||\n      job.description?.toLowerCase().includes(query)\n    );\n  };\n\n  const allUpcomingJobs = jobs?.filter(job => new Date(job.startTime) > new Date()) || [];\n  const allPastJobs = jobs?.filter(job => new Date(job.startTime) <= new Date()) || [];\n\n  const upcomingJobs = filterJobs(allUpcomingJobs);\n  const pastJobs = filterJobs(allPastJobs);\n\n  return (\n    <div className=\"space-y-8\">\n      <div className=\"flex flex-col sm:flex-row items-start sm:items-center justify-between gap-4\">\n        <div>\n          <h1 className=\"text-3xl font-semibold text-foreground\" data-testid=\"text-page-title\">Dashboard</h1>\n          <p className=\"text-muted-foreground mt-1\">Manage your jobs and crew coordination</p>\n        </div>\n        <Link href=\"/jobs/new\">\n          <a data-testid=\"link-create-job\">\n            <Button size=\"default\" className=\"gap-2\">\n              <Plus className=\"h-4 w-4\" />\n              Create Job\n            </Button>\n          </a>\n        </Link>\n      </div>\n\n      {/* Search Bar */}\n      {jobs && jobs.length > 0 && (\n        <div className=\"relative max-w-md\">\n          <Search className=\"absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n          <Input\n            type=\"text\"\n            placeholder=\"Search jobs by name, location, or description...\"\n            value={searchQuery}\n            onChange={(e) => setSearchQuery(e.target.value)}\n            className=\"pl-10\"\n            data-testid=\"input-search-jobs\"\n          />\n        </div>\n      )}\n\n      {subscription && (\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex flex-col sm:flex-row items-start sm:items-center justify-between gap-4\">\n              <div className=\"flex items-center gap-4\">\n                <Link href=\"/billing\">\n                  <a data-testid=\"link-current-plan\" className=\"flex flex-col hover-elevate active-elevate-2 rounded-md p-2 -m-2\">\n                    <span className=\"text-sm text-muted-foreground\">Current Plan</span>\n                    <span className=\"text-lg font-semibold capitalize\" data-testid=\"text-plan-name\">{subscription.plan}</span>\n                  </a>\n                </Link>\n                <div className=\"h-8 w-px bg-border\" />\n                <Link href=\"/billing\">\n                  <a data-testid=\"link-sms-credits\" className=\"flex flex-col hover-elevate active-elevate-2 rounded-md p-2 -m-2\">\n                    <span className=\"text-sm text-muted-foreground\">SMS Credits</span>\n                    <span className=\"text-lg font-semibold\" data-testid=\"text-sms-credits\">{subscription.messageCredits}</span>\n                  </a>\n                </Link>\n              </div>\n              <Link href=\"/billing\">\n                <a data-testid=\"link-view-billing\">\n                  <Button variant=\"outline\" size=\"sm\">Manage Billing</Button>\n                </a>\n              </Link>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {upcomingJobs.length === 0 && pastJobs.length === 0 ? (\n        <Card>\n          <CardContent className=\"p-12 text-center\">\n            <CalendarIcon className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n            {searchQuery.trim() ? (\n              <>\n                <h3 className=\"text-lg font-medium mb-2\">No jobs found</h3>\n                <p className=\"text-muted-foreground mb-6\">\n                  No jobs match your search \"{searchQuery}\". Try different keywords.\n                </p>\n                <Button variant=\"outline\" onClick={() => setSearchQuery(\"\")} data-testid=\"button-clear-search\">\n                  Clear Search\n                </Button>\n              </>\n            ) : (\n              <>\n                <h3 className=\"text-lg font-medium mb-2\">No jobs yet</h3>\n                <p className=\"text-muted-foreground mb-6\">Create your first job to start coordinating your crew</p>\n                <Link href=\"/jobs/new\">\n                  <a data-testid=\"link-create-first-job\">\n                    <Button className=\"gap-2\">\n                      <Plus className=\"h-4 w-4\" />\n                      Create Your First Job\n                    </Button>\n                  </a>\n                </Link>\n              </>\n            )}\n          </CardContent>\n        </Card>\n      ) : (\n        <>\n          {upcomingJobs.length > 0 && (\n            <div className=\"space-y-4\">\n              <h2 className=\"text-xl font-semibold\">Upcoming Jobs</h2>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n                {upcomingJobs.map((job) => (\n                  <JobCard key={job.id} job={job} />\n                ))}\n              </div>\n            </div>\n          )}\n\n          {pastJobs.length > 0 && (\n            <div className=\"space-y-4\">\n              <h2 className=\"text-xl font-semibold\">Past Jobs</h2>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n                {pastJobs.map((job) => (\n                  <JobCard key={job.id} job={job} />\n                ))}\n              </div>\n            </div>\n          )}\n        </>\n      )}\n    </div>\n  );\n}\n\nfunction JobCard({ job }: { job: JobWithAvailability }) {\n  const { toast } = useToast();\n  const [deleteDialogOpen, setDeleteDialogOpen] = useState(false);\n  const [confirmationText, setConfirmationText] = useState(\"\");\n\n  const fillPercentage = job.requiredHeadcount\n    ? Math.round((job.availabilityCounts.confirmed / job.requiredHeadcount) * 100)\n    : 0;\n\n  const isPast = new Date(job.startTime) <= new Date();\n\n  const deleteMutation = useMutation({\n    mutationFn: async () => {\n      return await apiRequest(\"DELETE\", `/api/jobs/${job.id}`);\n    },\n    onSuccess: async () => {\n      await queryClient.invalidateQueries({ queryKey: [\"/api/jobs\"] });\n      toast({ title: \"Job deleted successfully\" });\n      setDeleteDialogOpen(false);\n      setConfirmationText(\"\");\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Failed to delete job\",\n        description: error.message || \"Could not delete job\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleDelete = () => {\n    if (confirmationText.toLowerCase() === \"heyteam\") {\n      deleteMutation.mutate();\n    }\n  };\n\n  return (\n    <Card className=\"hover-elevate\" data-testid={`card-job-${job.id}`}>\n      <CardHeader className=\"space-y-0 pb-4\">\n        <div className=\"flex items-start justify-between gap-2\">\n          <h3 className=\"font-semibold text-lg line-clamp-2\" data-testid={`text-job-name-${job.id}`}>{job.name}</h3>\n          {isPast && <Badge variant=\"secondary\">Past</Badge>}\n        </div>\n        <div className=\"flex items-center gap-1 text-sm text-muted-foreground mt-2\">\n          <MapPin className=\"h-3.5 w-3.5\" />\n          <span className=\"line-clamp-1\">{job.location}</span>\n        </div>\n      </CardHeader>\n      <CardContent className=\"space-y-4\">\n        <div className=\"flex items-center gap-2 text-sm\">\n          <Clock className=\"h-4 w-4 text-muted-foreground\" />\n          <span>{format(new Date(job.startTime), \"MMM d, h:mm a\")}</span>\n        </div>\n\n        {job.requiredHeadcount && (\n          <div className=\"space-y-2\">\n            <div className=\"flex items-center justify-between text-sm\">\n              <div className=\"flex items-center gap-2\">\n                <Users className=\"h-4 w-4 text-muted-foreground\" />\n                <span className=\"font-medium\" data-testid={`text-fill-${job.id}`}>\n                  {job.availabilityCounts.confirmed}/{job.requiredHeadcount}\n                </span>\n              </div>\n              <span className=\"text-muted-foreground\">{fillPercentage}%</span>\n            </div>\n            <Progress value={fillPercentage} className=\"h-2\" />\n          </div>\n        )}\n\n        <div className=\"flex items-center gap-2 flex-wrap\">\n          <Badge variant=\"secondary\" className=\"text-xs\">\n            <span className=\"text-chart-2\">{job.availabilityCounts.confirmed}</span>\n            <span>&nbsp;Confirmed</span>\n          </Badge>\n          {job.availabilityCounts.maybe > 0 && (\n            <Badge variant=\"secondary\" className=\"text-xs\">\n              <span className=\"text-chart-3\">{job.availabilityCounts.maybe}</span>\n              <span>&nbsp;Maybe</span>\n            </Badge>\n          )}\n          {job.availabilityCounts.declined > 0 && (\n            <Badge variant=\"secondary\" className=\"text-xs\">\n              <span className=\"text-chart-4\">{job.availabilityCounts.declined}</span>\n              <span>&nbsp;Declined</span>\n            </Badge>\n          )}\n          {job.availabilityCounts.noReply > 0 && (\n            <Badge variant=\"secondary\" className=\"text-xs\">\n              <span>{job.availabilityCounts.noReply}&nbsp;No Reply</span>\n            </Badge>\n          )}\n        </div>\n      </CardContent>\n      <CardFooter className=\"flex gap-2 flex-wrap pt-4 border-t\">\n        <Link href={`/jobs/${job.id}/roster`}>\n          <a className=\"flex-1\" data-testid={`link-view-roster-${job.id}`}>\n            <Button variant=\"default\" size=\"sm\" className=\"w-full\">View Roster</Button>\n          </a>\n        </Link>\n        <Link href={`/jobs/${job.id}/edit`}>\n          <a data-testid={`link-edit-job-${job.id}`}>\n            <Button variant=\"outline\" size=\"sm\">Edit</Button>\n          </a>\n        </Link>\n        \n        <AlertDialog open={deleteDialogOpen} onOpenChange={setDeleteDialogOpen}>\n          <AlertDialogTrigger asChild>\n            <Button \n              variant=\"outline\" \n              size=\"sm\" \n              className=\"gap-1\"\n              data-testid={`button-delete-job-${job.id}`}\n            >\n              <Trash2 className=\"h-3.5 w-3.5\" />\n            </Button>\n          </AlertDialogTrigger>\n          <AlertDialogContent>\n            <AlertDialogHeader>\n              <AlertDialogTitle>Delete Job</AlertDialogTitle>\n              <AlertDialogDescription className=\"space-y-4\">\n                <p>\n                  This will permanently delete the job <strong>{job.name}</strong> and all associated data including availability responses and assignments.\n                </p>\n                <p>\n                  To confirm deletion, please type <strong>heyteam</strong> below:\n                </p>\n                <Input\n                  value={confirmationText}\n                  onChange={(e) => setConfirmationText(e.target.value)}\n                  placeholder=\"Type heyteam to confirm\"\n                  data-testid={`input-delete-confirmation-${job.id}`}\n                />\n              </AlertDialogDescription>\n            </AlertDialogHeader>\n            <AlertDialogFooter>\n              <AlertDialogCancel \n                onClick={() => setConfirmationText(\"\")}\n                data-testid={`button-cancel-delete-${job.id}`}\n              >\n                Cancel\n              </AlertDialogCancel>\n              <AlertDialogAction\n                onClick={handleDelete}\n                disabled={confirmationText.toLowerCase() !== \"heyteam\" || deleteMutation.isPending}\n                className=\"bg-destructive hover:bg-destructive/90\"\n                data-testid={`button-confirm-delete-${job.id}`}\n              >\n                {deleteMutation.isPending ? \"Deleting...\" : \"Delete Job\"}\n              </AlertDialogAction>\n            </AlertDialogFooter>\n          </AlertDialogContent>\n        </AlertDialog>\n      </CardFooter>\n    </Card>\n  );\n}\n","size_bytes":13409},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/pages/billing.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription } from \"@/components/ui/dialog\";\nimport { Check, CreditCard, Zap, Users, Building2, Package } from \"lucide-react\";\nimport { format } from \"date-fns\";\nimport type { Subscription, User } from \"@shared/schema\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\n\ntype Currency = \"GBP\" | \"USD\" | \"EUR\";\n\ninterface SubscriptionPlan {\n  id: string;\n  name: string;\n  priceGBP: number;\n  priceUSD: number;\n  priceEUR: number;\n  monthlyCredits: number;\n  calendarIntegrations: number;\n  supportLevel: string;\n  customTemplates: boolean;\n  autoFollowUp: boolean;\n  multiManager: boolean;\n  aiFeatures: boolean;\n  dedicatedNumber: boolean;\n}\n\ninterface SmsBundle {\n  id: string;\n  name: string;\n  description: string | null;\n  credits: number;\n  priceGBP: number;\n  priceUSD: number;\n  priceEUR: number;\n}\n\nconst CURRENCY_SYMBOLS = {\n  GBP: \"£\",\n  USD: \"$\",\n  EUR: \"€\",\n} as const;\n\nconst PLAN_ICONS = {\n  Starter: Zap,\n  Team: Users,\n  Business: Building2,\n} as const;\n\nexport default function Billing() {\n  const { toast } = useToast();\n  const [currency, setCurrency] = useState<Currency>(\"GBP\");\n  const [bundlesDialogOpen, setBundlesDialogOpen] = useState(false);\n\n  const { data: user } = useQuery<User>({\n    queryKey: [\"/api/auth/me\"],\n  });\n\n  const { data: subscription, isLoading: isLoadingSubscription } = useQuery<Subscription>({\n    queryKey: [\"/api/subscription\"],\n  });\n\n  const { data: plans = [], isLoading: isLoadingPlans } = useQuery<SubscriptionPlan[]>({\n    queryKey: [\"/api/subscription-plans\"],\n  });\n\n  const { data: credits } = useQuery<{ available: number; breakdown: any }>({\n    queryKey: [\"/api/credits\"],\n  });\n\n  const { data: bundles = [], isLoading: isLoadingBundles } = useQuery<SmsBundle[]>({\n    queryKey: [\"/api/sms-bundles\"],\n    enabled: bundlesDialogOpen, // Only fetch when dialog is opened\n  });\n\n  const checkoutMutation = useMutation({\n    mutationFn: async ({ planId, currency }: { planId: string; currency: Currency }) => {\n      const response = await apiRequest(\"POST\", \"/api/create-checkout-session\", { planId, currency });\n      return response.json();\n    },\n    onSuccess: (data: { url: string }) => {\n      window.location.href = data.url;\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to create checkout session\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const getPrice = (plan: SubscriptionPlan) => {\n    switch (currency) {\n      case \"USD\":\n        return plan.priceUSD;\n      case \"EUR\":\n        return plan.priceEUR;\n      default:\n        return plan.priceGBP;\n    }\n  };\n\n  const getPlanFeatures = (plan: SubscriptionPlan) => {\n    const features = [\n      `${plan.monthlyCredits.toLocaleString()} messages per month`,\n      `${plan.calendarIntegrations} calendar integration${plan.calendarIntegrations > 1 ? \"s\" : \"\"}`,\n      `${plan.supportLevel} support`,\n    ];\n\n    if (plan.customTemplates) features.push(\"Custom message templates\");\n    if (plan.autoFollowUp) features.push(\"Auto follow-up messages\");\n    if (plan.multiManager) features.push(\"Multi-manager access\");\n    if (plan.aiFeatures) features.push(\"AI-powered insights\");\n    if (plan.dedicatedNumber) features.push(\"Dedicated phone number\");\n\n    return features;\n  };\n\n  const handleSelectPlan = (planId: string) => {\n    checkoutMutation.mutate({ planId, currency });\n  };\n\n  // Set initial currency from user preference\n  useEffect(() => {\n    if (user?.currency) {\n      setCurrency(user.currency as Currency);\n    }\n  }, [user?.currency]);\n\n  if (isLoadingSubscription || isLoadingPlans) {\n    return (\n      <div className=\"flex items-center justify-center min-h-[400px]\">\n        <div className=\"animate-spin w-8 h-8 border-4 border-primary border-t-transparent rounded-full\" aria-label=\"Loading\" />\n      </div>\n    );\n  }\n\n  const currentPlan = plans.find((p) => p.id === subscription?.planId);\n  const creditUsagePercent = currentPlan && credits\n    ? Math.round(((currentPlan.monthlyCredits - credits.available) / currentPlan.monthlyCredits) * 100)\n    : 0;\n\n  return (\n    <div className=\"space-y-8\">\n      <div>\n        <h1 className=\"text-3xl font-semibold\" data-testid=\"text-page-title\">Billing & Subscription</h1>\n        <p className=\"text-muted-foreground mt-1\">Manage your plan and SMS credits</p>\n      </div>\n\n      {subscription && currentPlan && (\n        <Card data-testid=\"card-current-subscription\">\n          <CardHeader>\n            <h2 className=\"text-lg font-semibold\">Current Plan</h2>\n          </CardHeader>\n          <CardContent className=\"space-y-6\">\n            <div className=\"flex flex-col sm:flex-row items-start sm:items-center justify-between gap-4\">\n              <div>\n                <div className=\"flex items-center gap-3\">\n                  <h3 className=\"text-2xl font-semibold\" data-testid=\"text-current-plan\">\n                    {currentPlan.name}\n                  </h3>\n                  <Badge variant={subscription.status === \"active\" ? \"default\" : \"secondary\"} data-testid=\"badge-subscription-status\">\n                    {subscription.status}\n                  </Badge>\n                </div>\n                <div className=\"text-lg text-muted-foreground mt-1\">\n                  {CURRENCY_SYMBOLS[subscription.currency as Currency || \"GBP\"]}\n                  {((subscription.currency === \"USD\" ? currentPlan.priceUSD : subscription.currency === \"EUR\" ? currentPlan.priceEUR : currentPlan.priceGBP) / 100).toFixed(0)}\n                  /month\n                </div>\n                {subscription.currentPeriodEnd && (\n                  <p className=\"text-sm text-muted-foreground mt-1\">\n                    Renews on {format(new Date(subscription.currentPeriodEnd), \"MMMM d, yyyy\")}\n                  </p>\n                )}\n              </div>\n              <Button variant=\"outline\" data-testid=\"button-manage-stripe\">\n                <CreditCard className=\"h-4 w-4 mr-2\" />\n                Manage in Stripe\n              </Button>\n            </div>\n\n            {credits && (\n              <div className=\"space-y-3\">\n                <div className=\"flex items-center justify-between\">\n                  <span className=\"text-sm font-medium\">SMS Credits</span>\n                  <span className=\"text-sm text-muted-foreground\" data-testid=\"text-credits-remaining\">\n                    {credits.available} / {currentPlan.monthlyCredits} remaining\n                  </span>\n                </div>\n                <Progress value={100 - creditUsagePercent} className=\"h-3\" data-testid=\"progress-credit-usage\" />\n                <p className=\"text-xs text-muted-foreground\">\n                  {creditUsagePercent}% used this month\n                </p>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      )}\n\n      <div>\n        <div className=\"flex items-center justify-between mb-6\">\n          <h2 className=\"text-2xl font-semibold\">Available Plans</h2>\n          <div className=\"inline-flex items-center gap-2 p-1 bg-muted rounded-lg\" data-testid=\"group-currency-selector\">\n            {([\"GBP\", \"USD\", \"EUR\"] as Currency[]).map((curr) => (\n              <Button\n                key={curr}\n                variant={currency === curr ? \"default\" : \"ghost\"}\n                size=\"sm\"\n                onClick={() => setCurrency(curr)}\n                className={`toggle-elevate ${currency === curr ? \"toggle-elevated\" : \"\"}`}\n                data-testid={`button-currency-${curr.toLowerCase()}`}\n              >\n                {CURRENCY_SYMBOLS[curr]} {curr}\n              </Button>\n            ))}\n          </div>\n        </div>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n          {plans.map((plan) => {\n            const isCurrent = plan.id === subscription?.planId;\n            const Icon = PLAN_ICONS[plan.name as keyof typeof PLAN_ICONS] || Zap;\n\n            return (\n              <Card \n                key={plan.id} \n                className={isCurrent ? \"border-primary\" : \"\"} \n                data-testid={`card-plan-${plan.name.toLowerCase()}`}\n              >\n                <CardHeader>\n                  <div className=\"flex items-start justify-between\">\n                    <div>\n                      <div className=\"flex items-center gap-2 mb-2\">\n                        <Icon className=\"w-5 h-5 text-primary\" />\n                        <h3 className=\"text-xl font-semibold\" data-testid={`text-plan-name-${plan.name.toLowerCase()}`}>\n                          {plan.name}\n                        </h3>\n                      </div>\n                      <div className=\"text-3xl font-bold\" data-testid={`text-price-${plan.name.toLowerCase()}`}>\n                        {CURRENCY_SYMBOLS[currency]}{(getPrice(plan) / 100).toFixed(0)}\n                      </div>\n                      <p className=\"text-sm text-muted-foreground\">per month</p>\n                    </div>\n                    {isCurrent && (\n                      <Badge variant=\"default\" data-testid=\"badge-current-plan\">Current</Badge>\n                    )}\n                  </div>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <div className=\"space-y-3\">\n                    {getPlanFeatures(plan).map((feature, index) => (\n                      <div key={index} className=\"flex items-start gap-2\" data-testid={`text-feature-${plan.name.toLowerCase()}-${index}`}>\n                        <Check className=\"h-4 w-4 text-primary mt-0.5 flex-shrink-0\" />\n                        <span className=\"text-sm\">{feature}</span>\n                      </div>\n                    ))}\n                  </div>\n                  <Button\n                    className=\"w-full\"\n                    variant={isCurrent ? \"outline\" : \"default\"}\n                    disabled={isCurrent || checkoutMutation.isPending}\n                    onClick={() => handleSelectPlan(plan.id)}\n                    data-testid={`button-select-${plan.name.toLowerCase()}`}\n                  >\n                    {checkoutMutation.isPending ? \"Loading...\" : isCurrent ? \"Current Plan\" : \"Select Plan\"}\n                  </Button>\n                </CardContent>\n              </Card>\n            );\n          })}\n        </div>\n      </div>\n\n      <Card>\n        <CardHeader>\n          <h3 className=\"text-lg font-semibold\">Need More Credits?</h3>\n        </CardHeader>\n        <CardContent>\n          <p className=\"text-sm text-muted-foreground mb-4\">\n            Running low on SMS credits? Purchase additional SMS bundles at discounted rates or upgrade your plan for more monthly credits.\n          </p>\n          <Button \n            variant=\"outline\" \n            onClick={() => setBundlesDialogOpen(true)}\n            data-testid=\"button-view-bundles\"\n          >\n            <Package className=\"h-4 w-4 mr-2\" />\n            View SMS Bundles\n          </Button>\n        </CardContent>\n      </Card>\n\n      <Dialog open={bundlesDialogOpen} onOpenChange={setBundlesDialogOpen}>\n        <DialogContent className=\"max-w-4xl max-h-[80vh] overflow-y-auto\">\n          <DialogHeader>\n            <DialogTitle>SMS Bundles</DialogTitle>\n            <DialogDescription>\n              Purchase additional SMS credits at discounted rates\n            </DialogDescription>\n          </DialogHeader>\n\n          {isLoadingBundles ? (\n            <div className=\"flex items-center justify-center py-8\">\n              <div className=\"animate-spin w-8 h-8 border-4 border-primary border-t-transparent rounded-full\" aria-label=\"Loading\" />\n            </div>\n          ) : bundles.length === 0 ? (\n            <div className=\"text-center py-8 text-muted-foreground\">\n              No SMS bundles available at this time.\n            </div>\n          ) : (\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 mt-4\">\n              {bundles.map((bundle) => {\n                const price = currency === \"USD\" ? bundle.priceUSD : currency === \"EUR\" ? bundle.priceEUR : bundle.priceGBP;\n                \n                return (\n                  <Card key={bundle.id} data-testid={`card-bundle-${bundle.id}`}>\n                    <CardHeader>\n                      <div className=\"flex items-start justify-between\">\n                        <div>\n                          <h3 className=\"text-xl font-semibold\">{bundle.name}</h3>\n                          {bundle.description && (\n                            <p className=\"text-sm text-muted-foreground mt-1\">{bundle.description}</p>\n                          )}\n                        </div>\n                      </div>\n                    </CardHeader>\n                    <CardContent className=\"space-y-4\">\n                      <div className=\"flex items-baseline gap-2\">\n                        <span className=\"text-3xl font-bold\">\n                          {CURRENCY_SYMBOLS[currency]}{(price / 100).toFixed(0)}\n                        </span>\n                        <span className=\"text-sm text-muted-foreground\">\n                          for {bundle.credits.toLocaleString()} credits\n                        </span>\n                      </div>\n                      <div className=\"text-sm text-muted-foreground\">\n                        ${((price / 100) / bundle.credits * 1000).toFixed(2)} per 1,000 messages\n                      </div>\n                      <Button \n                        className=\"w-full\"\n                        data-testid={`button-purchase-bundle-${bundle.id}`}\n                      >\n                        Purchase Bundle\n                      </Button>\n                    </CardContent>\n                  </Card>\n                );\n              })}\n            </div>\n          )}\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}\n","size_bytes":14226},"server/seed.ts":{"content":"import { DbStorage } from \"./db-storage\";\n\nasync function seed() {\n  const storage = new DbStorage();\n\n  console.log(\"Seeding database...\");\n\n  // Create demo user\n  const user = await storage.createUser({\n    username: \"demo\",\n    password: \"demo\",\n    email: \"demo@heyteam.app\",\n  });\n\n  console.log(`Created user: ${user.username}`);\n\n  // Update subscription to Pro plan\n  await storage.updateSubscription(user.id, {\n    plan: \"pro\",\n    messageCredits: 500,\n  });\n\n  console.log(\"Updated subscription to Pro plan\");\n\n  // Create sample contacts\n  const contacts = await Promise.all([\n    storage.createContact(user.id, {\n      firstName: \"John\",\n      lastName: \"Doe\",\n      phone: \"+15551234567\",\n      email: \"john.doe@example.com\",\n      notes: \"Lead carpenter\",\n    }),\n    storage.createContact(user.id, {\n      firstName: \"Jane\",\n      lastName: \"Smith\",\n      phone: \"+15559876543\",\n      email: \"jane.smith@example.com\",\n      notes: \"Electrician\",\n    }),\n    storage.createContact(user.id, {\n      firstName: \"Bob\",\n      lastName: \"Johnson\",\n      phone: \"+15555551234\",\n      email: \"bob.j@example.com\",\n      notes: null,\n    }),\n  ]);\n\n  console.log(`Created ${contacts.length} contacts`);\n\n  // Create sample template\n  const template = await storage.createTemplate(user.id, {\n    name: \"Availability Check\",\n    content: \"Hi {{contact.firstName}}, are you available for {{job.name}} on {{job.date}} at {{job.location}}? Reply Y (yes), N (no), or M (maybe).\",\n  });\n\n  console.log(`Created template: ${template.name}`);\n\n  // Create sample job\n  const tomorrow = new Date();\n  tomorrow.setDate(tomorrow.getDate() + 1);\n  tomorrow.setHours(9, 0, 0, 0);\n\n  const endTime = new Date(tomorrow);\n  endTime.setHours(17, 0, 0, 0);\n\n  const job = await storage.createJob(user.id, {\n    name: \"Downtown Construction\",\n    location: \"123 Main St, Downtown\",\n    startTime: tomorrow,\n    endTime: endTime,\n    requiredHeadcount: 6,\n    notes: \"Bring safety equipment\",\n  });\n\n  console.log(`Created job: ${job.name}`);\n\n  console.log(\"Seed complete!\");\n  process.exit(0);\n}\n\nseed().catch((error) => {\n  console.error(\"Seed failed:\", error);\n  process.exit(1);\n});\n","size_bytes":2173},"client/src/pages/templates.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Switch } from \"@/components/ui/switch\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n  DialogFooter,\n} from \"@/components/ui/dialog\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage, FormDescription } from \"@/components/ui/form\";\nimport { Plus, FileText, Trash2 } from \"lucide-react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { insertTemplateSchema, type InsertTemplate, type Template } from \"@shared/schema\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nconst availableTokens = [\n  { token: \"{FirstName}\", description: \"Contact's first name\" },\n  { token: \"{LastName}\", description: \"Contact's last name\" },\n  { token: \"{JobName}\", description: \"Job name\" },\n  { token: \"{Date}\", description: \"Job date\" },\n  { token: \"{Time}\", description: \"Job time\" },\n  { token: \"{Location}\", description: \"Job location\" },\n];\n\nexport default function Templates() {\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\n  const { toast } = useToast();\n\n  const { data: templates, isLoading } = useQuery<Template[]>({\n    queryKey: [\"/api/templates\"],\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center min-h-[400px]\">\n        <div className=\"animate-spin w-8 h-8 border-4 border-primary border-t-transparent rounded-full\" aria-label=\"Loading\" />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex flex-col sm:flex-row items-start sm:items-center justify-between gap-4\">\n        <div>\n          <h1 className=\"text-3xl font-semibold\" data-testid=\"text-page-title\">Message Templates</h1>\n          <p className=\"text-muted-foreground mt-1\">Create reusable message templates with dynamic variables</p>\n        </div>\n        <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>\n          <DialogTrigger asChild>\n            <Button className=\"gap-2\" data-testid=\"button-create-template\">\n              <Plus className=\"h-4 w-4\" />\n              Create Template\n            </Button>\n          </DialogTrigger>\n          <DialogContent className=\"max-w-2xl\">\n            <TemplateForm onSuccess={() => setIsDialogOpen(false)} />\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      {templates && templates.length > 0 ? (\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n          {templates.map((template) => (\n            <TemplateCard key={template.id} template={template} />\n          ))}\n        </div>\n      ) : (\n        <Card>\n          <CardContent className=\"p-12 text-center\">\n            <FileText className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n            <h3 className=\"text-lg font-medium mb-2\">No templates yet</h3>\n            <p className=\"text-muted-foreground mb-6\">Create your first message template to speed up communication</p>\n            <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>\n              <DialogTrigger asChild>\n                <Button className=\"gap-2\" data-testid=\"button-create-first-template\">\n                  <Plus className=\"h-4 w-4\" />\n                  Create Your First Template\n                </Button>\n              </DialogTrigger>\n              <DialogContent className=\"max-w-2xl\">\n                <TemplateForm onSuccess={() => setIsDialogOpen(false)} />\n              </DialogContent>\n            </Dialog>\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  );\n}\n\nfunction TemplateCard({ template }: { template: Template }) {\n  const { toast } = useToast();\n\n  const deleteMutation = useMutation({\n    mutationFn: () => apiRequest(\"DELETE\", `/api/templates/${template.id}`),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/templates\"] });\n      toast({\n        title: \"Template Deleted\",\n        description: \"Template has been deleted successfully\",\n      });\n    },\n  });\n\n  return (\n    <Card className=\"hover-elevate\" data-testid={`card-template-${template.id}`}>\n      <CardHeader className=\"pb-3\">\n        <div className=\"flex items-start justify-between gap-2\">\n          <h3 className=\"font-semibold text-lg\" data-testid={`text-template-name-${template.id}`}>{template.name}</h3>\n          <Button\n            variant=\"ghost\"\n            size=\"icon\"\n            className=\"h-8 w-8 text-destructive hover:text-destructive\"\n            onClick={() => deleteMutation.mutate()}\n            data-testid={`button-delete-template-${template.id}`}\n          >\n            <Trash2 className=\"h-4 w-4\" />\n          </Button>\n        </div>\n        <Badge variant=\"secondary\" className=\"w-fit text-xs\">{template.type}</Badge>\n      </CardHeader>\n      <CardContent>\n        <div className=\"bg-muted/50 p-3 rounded-md\">\n          <p className=\"text-sm whitespace-pre-wrap\" data-testid={`text-template-content-${template.id}`}>\n            {template.content}\n          </p>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n\nfunction TemplateForm({ onSuccess }: { onSuccess: () => void }) {\n  const { toast } = useToast();\n\n  const form = useForm<InsertTemplate>({\n    resolver: zodResolver(insertTemplateSchema),\n    defaultValues: {\n      name: \"\",\n      content: \"\",\n      type: \"standard\",\n      includeRosterLink: false,\n    },\n  });\n\n  const createMutation = useMutation({\n    mutationFn: (data: InsertTemplate) => apiRequest(\"POST\", \"/api/templates\", data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/templates\"] });\n      toast({\n        title: \"Template Created\",\n        description: \"New template has been created successfully\",\n      });\n      form.reset();\n      onSuccess();\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to create template\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const insertToken = (token: string) => {\n    const currentContent = form.getValues(\"content\");\n    form.setValue(\"content\", currentContent + token);\n  };\n\n  return (\n    <>\n      <DialogHeader>\n        <DialogTitle>Create Message Template</DialogTitle>\n      </DialogHeader>\n      <Form {...form}>\n        <form onSubmit={form.handleSubmit((data) => createMutation.mutate(data))} className=\"space-y-4\">\n          <FormField\n            control={form.control}\n            name=\"name\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>Template Name</FormLabel>\n                <FormControl>\n                  <Input placeholder=\"e.g., Job Invitation\" {...field} data-testid=\"input-template-name\" />\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n\n          <FormField\n            control={form.control}\n            name=\"content\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>Message Content</FormLabel>\n                <FormControl>\n                  <Textarea\n                    placeholder=\"Hi {FirstName}, we have a new job at {Location} on {Date}. Reply Y to confirm or N to decline.\"\n                    className=\"resize-none h-32\"\n                    {...field}\n                    data-testid=\"input-template-content\"\n                  />\n                </FormControl>\n                <FormDescription>\n                  Use the tokens below to personalize your message\n                </FormDescription>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n\n          <FormField\n            control={form.control}\n            name=\"includeRosterLink\"\n            render={({ field }) => (\n              <FormItem className=\"flex flex-row items-center justify-between rounded-lg border p-4\">\n                <div className=\"space-y-0.5\">\n                  <FormLabel className=\"text-base\">Include Roster Link</FormLabel>\n                  <FormDescription>\n                    Add a link to the recipient's weekly job roster in the message\n                  </FormDescription>\n                </div>\n                <FormControl>\n                  <Switch\n                    checked={field.value}\n                    onCheckedChange={field.onChange}\n                    data-testid=\"switch-include-roster-link\"\n                  />\n                </FormControl>\n              </FormItem>\n            )}\n          />\n\n          <div>\n            <label className=\"text-sm font-medium mb-2 block\">Available Tokens</label>\n            <div className=\"flex flex-wrap gap-2\">\n              {availableTokens.map(({ token, description }) => (\n                <Button\n                  key={token}\n                  type=\"button\"\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={() => insertToken(token)}\n                  className=\"text-xs\"\n                  data-testid={`button-insert-${token}`}\n                >\n                  {token}\n                </Button>\n              ))}\n            </div>\n          </div>\n\n          <DialogFooter>\n            <Button type=\"submit\" disabled={createMutation.isPending} data-testid=\"button-submit-template\">\n              {createMutation.isPending && (\n                <div className=\"animate-spin w-4 h-4 border-2 border-primary-foreground border-t-transparent rounded-full mr-2\" />\n              )}\n              Create Template\n            </Button>\n          </DialogFooter>\n        </form>\n      </Form>\n    </>\n  );\n}\n","size_bytes":9895},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport express from \"express\";\nimport path from \"path\";\nimport bcrypt from \"bcrypt\";\nimport { nanoid } from \"nanoid\";\nimport { storage } from \"./storage\";\nimport { CreditService } from \"./lib/credit-service\";\nimport { getTwilioClient, getTwilioFromPhoneNumber } from \"./lib/twilio-client\";\nimport { renderTemplate } from \"./lib/template-renderer\";\nimport { parseReply } from \"./lib/reply-parser\";\nimport { generateICS } from \"./lib/ics-generator\";\nimport { insertJobSchema, insertContactSchema, insertTemplateSchema, insertAvailabilitySchema } from \"@shared/schema\";\nimport Stripe from \"stripe\";\nimport authRoutes from \"./auth-routes\";\nimport PDFDocument from \"pdfkit\";\n\nconst creditService = new CreditService(storage);\n\nconst stripe = process.env.STRIPE_SECRET_KEY \n  ? new Stripe(process.env.STRIPE_SECRET_KEY, { apiVersion: \"2023-10-16\" })\n  : null;\n\n// Country dial codes mapping\nconst COUNTRY_DIAL_CODES: Record<string, string> = {\n  \"US\": \"+1\", \"CA\": \"+1\", \"GB\": \"+44\", \"AU\": \"+61\", \"NZ\": \"+64\",\n  \"IE\": \"+353\", \"IN\": \"+91\", \"SG\": \"+65\", \"MX\": \"+52\", \"DE\": \"+49\",\n  \"FR\": \"+33\", \"ES\": \"+34\", \"IT\": \"+39\",\n};\n\n// Placeholder for calendar sync - currently uses .ics file downloads instead\nasync function syncJobToCalendars(userId: string, job: any): Promise<void> {\n  // Calendar integration is done via downloadable .ics files\n  // No automatic syncing needed\n  return Promise.resolve();\n}\n\n// Helper function to construct E.164 phone number\nfunction constructE164Phone(countryCode: string, phone: string): string {\n  // Strip all non-digit characters first\n  let cleaned = phone.replace(/\\D/g, '');\n  \n  // If original started with +, handle optional trunk prefix in formats like \"+44 (0)20...\"\n  if (phone.trim().startsWith('+')) {\n    const result = '+' + cleaned;\n    // For countries that don't use trunk 0 in international format, remove it if present\n    // Patterns: +440... (UK), +610... (AU), +640... (NZ), etc.\n    // Keep 0 for Italy (+390...)\n    if (result.startsWith('+440') || result.startsWith('+610') || result.startsWith('+640') || \n        result.startsWith('+3530') || result.startsWith('+910') || result.startsWith('+650') || \n        result.startsWith('+520') || result.startsWith('+490') || result.startsWith('+330') || \n        result.startsWith('+340') || result.startsWith('+10')) {\n      // Remove the trunk 0 after country code\n      return result.replace(/^(\\+\\d{1,3})0/, '$1');\n    }\n    return result;\n  }\n  \n  // Handle international access codes (check longest codes first)\n  if (cleaned.startsWith('0011')) {\n    cleaned = cleaned.substring(4);\n  } else if (cleaned.startsWith('011')) {\n    cleaned = cleaned.substring(3);\n  } else if (cleaned.startsWith('001')) {\n    cleaned = cleaned.substring(3);\n  } else if (cleaned.startsWith('00')) {\n    cleaned = cleaned.substring(2);\n  }\n  \n  // Check if number already starts with a country code (after stripping access codes)\n  // Common country codes from our list: 1, 33, 34, 39, 44, 49, 52, 61, 64, 65, 91, 353\n  const commonCodes = ['1', '33', '34', '39', '44', '49', '52', '61', '64', '65', '91', '353'];\n  for (const code of commonCodes) {\n    if (cleaned.startsWith(code)) {\n      // Already has country code, but may have trunk prefix after it\n      const result = '+' + cleaned;\n      // Remove trunk 0 after country code (except Italy)\n      if (result.startsWith('+440') || result.startsWith('+610') || result.startsWith('+640') || \n          result.startsWith('+3530') || result.startsWith('+910') || result.startsWith('+650') || \n          result.startsWith('+520') || result.startsWith('+490') || result.startsWith('+330') || \n          result.startsWith('+340') || result.startsWith('+10')) {\n        return result.replace(/^(\\+\\d{1,3})0/, '$1');\n      }\n      return result;\n    }\n  }\n  \n  // No country code detected, so this is a national number\n  // Remove leading trunk prefix (usually 0) for most countries except Italy\n  if (cleaned.startsWith('0') && countryCode !== 'IT') {\n    cleaned = cleaned.substring(1);\n  }\n  \n  // Prepend the country dial code\n  const dialCode = COUNTRY_DIAL_CODES[countryCode] || \"+1\";\n  return dialCode + cleaned;\n}\n\n// Get the demo user ID (temporary until auth is implemented)\nlet MOCK_USER_ID: string | null = null;\n\nasync function getMockUserId(): Promise<string> {\n  if (MOCK_USER_ID) return MOCK_USER_ID;\n  const user = await storage.getUserByUsername(\"demo\");\n  if (!user) throw new Error(\"Demo user not found\");\n  MOCK_USER_ID = user.id;\n  return MOCK_USER_ID;\n}\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Serve static files from attached_assets\n  app.use('/attached_assets', express.static(path.join(process.cwd(), 'attached_assets')));\n  \n  // Auth routes\n  app.use(\"/api/auth\", authRoutes);\n  \n  // Middleware to check authentication\n  const requireAuth = async (req: any, res: any, next: any) => {\n    if (!req.session?.userId) {\n      return res.status(401).json({ message: \"Not authenticated\" });\n    }\n    const user = await storage.getUser(req.session.userId);\n    if (!user) {\n      return res.status(401).json({ message: \"User not found\" });\n    }\n    req.user = user;\n    next();\n  };\n  \n  // Middleware to check admin or owner role\n  const requireTeamAdmin = async (req: any, res: any, next: any) => {\n    if (!req.user) {\n      return res.status(401).json({ message: \"Not authenticated\" });\n    }\n    if (req.user.teamRole !== \"admin\" && req.user.teamRole !== \"owner\") {\n      return res.status(403).json({ message: \"Requires admin or owner role\" });\n    }\n    next();\n  };\n  \n  // Organization endpoints\n  app.get(\"/api/organization\", requireAuth, async (req: any, res) => {\n    try {\n      if (!req.user.organizationId) {\n        return res.status(404).json({ message: \"No organization found\" });\n      }\n      const org = await storage.getOrganization(req.user.organizationId);\n      if (!org) {\n        return res.status(404).json({ message: \"Organization not found\" });\n      }\n      res.json(org);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n  \n  app.get(\"/api/organization/members\", requireAuth, async (req: any, res) => {\n    try {\n      if (!req.user.organizationId) {\n        return res.status(404).json({ message: \"No organization found\" });\n      }\n      const members = await storage.getUsersInOrganization(req.user.organizationId);\n      // Don't return password hashes\n      const safeMembers = members.map(({ password, ...user }) => user);\n      res.json(safeMembers);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n  \n  app.post(\"/api/organization/invite\", requireAuth, requireTeamAdmin, async (req: any, res) => {\n    try {\n      const { email, firstName, lastName, teamRole } = req.body;\n      \n      if (!email || !firstName || !lastName) {\n        return res.status(400).json({ message: \"Email, first name, and last name are required\" });\n      }\n      \n      // Check if user already exists\n      const existingUser = await storage.getUserByEmail(email);\n      if (existingUser) {\n        return res.status(400).json({ message: \"User with this email already exists\" });\n      }\n      \n      // Generate a temporary password (in production, send via email)\n      const tempPassword = Math.random().toString(36).slice(-8);\n      const hashedPassword = await bcrypt.hash(tempPassword, 10);\n      \n      // Generate username from email (first part before @)\n      const username = email.split('@')[0];\n      \n      // Create user in the same organization\n      const newUser = await storage.createUser({\n        username,\n        firstName,\n        lastName,\n        email,\n        password: hashedPassword,\n        organizationId: req.user.organizationId,\n        teamRole: teamRole || \"member\",\n        isAdmin: false,\n        stripeCustomerId: null,\n        stripeSubscriptionId: null,\n      });\n      \n      // Don't return password hash\n      const { password, ...safeUser } = newUser;\n      const response = { \n        ...safeUser, \n        temporaryPassword: tempPassword\n      };\n      res.json(response);\n    } catch (error: any) {\n      console.error(\"Invite error:\", error);\n      res.status(500).json({ message: error.message });\n    }\n  });\n  \n  app.patch(\"/api/organization/members/:userId/role\", requireAuth, requireTeamAdmin, async (req: any, res) => {\n    try {\n      const { userId } = req.params;\n      const { teamRole } = req.body;\n      \n      if (![\"owner\", \"admin\", \"member\"].includes(teamRole)) {\n        return res.status(400).json({ message: \"Invalid team role\" });\n      }\n      \n      // Get target user\n      const targetUser = await storage.getUser(userId);\n      if (!targetUser) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n      \n      // Check if target user is in the same organization\n      if (targetUser.organizationId !== req.user.organizationId) {\n        return res.status(403).json({ message: \"Cannot modify users from other organizations\" });\n      }\n      \n      // Only owner can change other users to owner\n      if (teamRole === \"owner\" && req.user.teamRole !== \"owner\") {\n        return res.status(403).json({ message: \"Only owners can assign owner role\" });\n      }\n      \n      const updatedUser = await storage.updateUserTeamRole(userId, teamRole);\n      const { password, ...safeUser } = updatedUser;\n      res.json(safeUser);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.patch(\"/api/organization/members/:userId\", requireAuth, requireTeamAdmin, async (req: any, res) => {\n    try {\n      const { userId } = req.params;\n      const { firstName, lastName, email } = req.body;\n      \n      // Get target user\n      const targetUser = await storage.getUser(userId);\n      if (!targetUser) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n      \n      // Check if target user is in the same organization\n      if (targetUser.organizationId !== req.user.organizationId) {\n        return res.status(403).json({ message: \"Cannot modify users from other organizations\" });\n      }\n      \n      // Check if email is already taken by another user\n      if (email && email !== targetUser.email) {\n        const existingUser = await storage.getUserByEmail(email);\n        if (existingUser && existingUser.id !== userId) {\n          return res.status(400).json({ message: \"Email already in use\" });\n        }\n      }\n      \n      const updates: any = {};\n      if (firstName) updates.firstName = firstName;\n      if (lastName) updates.lastName = lastName;\n      if (email) updates.email = email;\n      \n      const updatedUser = await storage.updateUser(userId, updates);\n      const { password, ...safeUser } = updatedUser;\n      res.json(safeUser);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n  \n  app.delete(\"/api/organization/members/:userId\", requireAuth, requireTeamAdmin, async (req: any, res) => {\n    try {\n      const { userId } = req.params;\n      \n      // Get target user\n      const targetUser = await storage.getUser(userId);\n      if (!targetUser) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n      \n      // Check if target user is in the same organization\n      if (targetUser.organizationId !== req.user.organizationId) {\n        return res.status(403).json({ message: \"Cannot remove users from other organizations\" });\n      }\n      \n      // Cannot remove yourself\n      if (targetUser.id === req.user.id) {\n        return res.status(400).json({ message: \"Cannot remove yourself\" });\n      }\n      \n      // Cannot remove owner\n      if (targetUser.teamRole === \"owner\") {\n        return res.status(403).json({ message: \"Cannot remove organization owner\" });\n      }\n      \n      // In a real app, we'd handle user deletion more carefully\n      // For now, just update their organizationId to null\n      await storage.updateUser(userId, { organizationId: null });\n      \n      res.json({ success: true });\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  // Send password reminder to team member\n  app.post(\"/api/organization/members/:userId/password-reminder\", requireAuth, requireTeamAdmin, async (req: any, res) => {\n    try {\n      const { userId } = req.params;\n      \n      // Get target user\n      const targetUser = await storage.getUser(userId);\n      if (!targetUser) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n      \n      // Check if target user is in the same organization\n      if (targetUser.organizationId !== req.user.organizationId) {\n        return res.status(403).json({ message: \"Cannot send password reminder to users from other organizations\" });\n      }\n      \n      // Cannot send reminder to yourself\n      if (targetUser.id === req.user.id) {\n        return res.status(400).json({ message: \"Cannot send password reminder to yourself\" });\n      }\n      \n      // Generate a new temporary password\n      const tempPassword = Math.random().toString(36).slice(-8);\n      const hashedPassword = await bcrypt.hash(tempPassword, 10);\n      \n      // Update the user's password\n      await storage.updateUser(userId, { password: hashedPassword });\n      \n      // Return the temporary password so the admin can share it\n      res.json({ \n        success: true, \n        tempPassword,\n        username: targetUser.username || targetUser.email,\n        message: `Temporary password generated for ${targetUser.username || targetUser.email}`\n      });\n    } catch (error: any) {\n      console.error(\"Password reminder error:\", error);\n      res.status(500).json({ message: error.message });\n    }\n  });\n  \n  // Team messaging endpoint\n  app.post(\"/api/messages/team\", requireAuth, async (req: any, res) => {\n    try {\n      const { recipientId, content } = req.body;\n      \n      if (!recipientId || !content) {\n        return res.status(400).json({ message: \"Recipient ID and content are required\" });\n      }\n      \n      // Get recipient user\n      const recipient = await storage.getUser(recipientId);\n      if (!recipient) {\n        return res.status(404).json({ message: \"Recipient not found\" });\n      }\n      \n      // Check if recipient is in the same organization\n      if (recipient.organizationId !== req.user.organizationId) {\n        return res.status(403).json({ message: \"Cannot message users from other organizations\" });\n      }\n      \n      // In a production app, this would send an email or in-app notification\n      // For now, we'll just log it and return success\n      console.log(`Message from ${req.user.username} to ${recipient.username}: ${content}`);\n      console.log(`Recipient email: ${recipient.email}`);\n      \n      // TODO: In production, integrate with email service to send the message\n      // await sendEmail({\n      //   to: recipient.email,\n      //   from: req.user.email,\n      //   subject: `Message from ${req.user.username}`,\n      //   body: content\n      // });\n      \n      res.json({ \n        success: true,\n        message: \"Message sent successfully (logged to console in development mode)\",\n        recipient: {\n          id: recipient.id,\n          username: recipient.username,\n          email: recipient.email,\n        }\n      });\n    } catch (error: any) {\n      console.error(\"Team messaging error:\", error);\n      res.status(500).json({ message: error.message });\n    }\n  });\n  \n  app.get(\"/api/jobs\", async (req, res) => {\n    try {\n      const jobs = await storage.getJobs(await getMockUserId());\n      const jobsWithAvailability = await Promise.all(\n        jobs.map(async (job) => {\n          const availability = await storage.getAvailability(job.id);\n          return {\n            ...job,\n            availabilityCounts: {\n              confirmed: availability.filter((a) => a.status === \"confirmed\").length,\n              maybe: availability.filter((a) => a.status === \"maybe\").length,\n              declined: availability.filter((a) => a.status === \"declined\").length,\n              noReply: availability.filter((a) => a.status === \"no_reply\").length,\n            },\n          };\n        })\n      );\n      res.json(jobsWithAvailability);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.get(\"/api/jobs/:id\", async (req, res) => {\n    try {\n      const job = await storage.getJob(req.params.id);\n      if (!job) {\n        return res.status(404).json({ message: \"Job not found\" });\n      }\n      res.json(job);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.get(\"/api/jobs/:id/roster\", async (req, res) => {\n    try {\n      const job = await storage.getJob(req.params.id);\n      if (!job) {\n        return res.status(404).json({ message: \"Job not found\" });\n      }\n\n      const availability = await storage.getAvailability(job.id);\n      const availabilityWithContacts = await Promise.all(\n        availability.map(async (avail) => {\n          const contact = await storage.getContact(avail.contactId);\n          return { ...avail, contact };\n        })\n      );\n\n      res.json({ ...job, availability: availabilityWithContacts });\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.post(\"/api/jobs\", async (req, res) => {\n    try {\n      const body = {\n        ...req.body,\n        startTime: req.body.startTime ? new Date(req.body.startTime) : undefined,\n        endTime: req.body.endTime ? new Date(req.body.endTime) : undefined,\n      };\n      const validated = insertJobSchema.parse(body);\n      const job = await storage.createJob(await getMockUserId(), validated);\n\n      await syncJobToCalendars(await getMockUserId(), job);\n\n      res.json(job);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.patch(\"/api/jobs/:id\", async (req, res) => {\n    try {\n      const body = {\n        ...req.body,\n        startTime: req.body.startTime ? new Date(req.body.startTime) : undefined,\n        endTime: req.body.endTime ? new Date(req.body.endTime) : undefined,\n      };\n      const validated = insertJobSchema.partial().parse(body);\n      const job = await storage.updateJob(req.params.id, validated);\n\n      await syncJobToCalendars(await getMockUserId(), job);\n\n      const availability = await storage.getAvailability(job.id);\n      const confirmedContacts = await Promise.all(\n        availability\n          .filter((a) => a.status === \"confirmed\")\n          .map((a) => storage.getContact(a.contactId))\n      );\n\n      await sendRescheduleNotifications(await getMockUserId(), job, confirmedContacts.filter(Boolean) as any[]);\n\n      res.json(job);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.delete(\"/api/jobs/:id\", async (req, res) => {\n    try {\n      const job = await storage.getJob(req.params.id);\n      if (!job) {\n        return res.status(404).json({ message: \"Job not found\" });\n      }\n\n      // Verify the job belongs to the user\n      if (job.userId !== await getMockUserId()) {\n        return res.status(403).json({ message: \"Not authorized to delete this job\" });\n      }\n\n      await storage.deleteJob(req.params.id);\n      res.json({ success: true });\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.get(\"/api/contacts\", async (req, res) => {\n    try {\n      const contacts = await storage.getContacts(await getMockUserId());\n      res.json(contacts);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.get(\"/api/contacts/:id/current-job\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      \n      // Verify the contact belongs to the user\n      const contact = await storage.getContact(id);\n      if (!contact) {\n        return res.status(404).json({ message: \"Contact not found\" });\n      }\n      \n      if (contact.userId !== await getMockUserId()) {\n        return res.status(404).json({ message: \"Contact not found\" });\n      }\n      \n      const job = await storage.getCurrentJobForContact(id);\n      if (!job) {\n        return res.status(404).json({ message: \"No current job found for this contact\" });\n      }\n      res.json(job);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.post(\"/api/contacts\", async (req, res) => {\n    try {\n      const validated = insertContactSchema.parse(req.body);\n      const contact = await storage.createContact(await getMockUserId(), validated);\n      res.json(contact);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.post(\"/api/contacts/upload-image\", async (req, res) => {\n    try {\n      const fs = await import('fs/promises');\n      const path = await import('path');\n      const { nanoid } = await import('nanoid');\n      \n      // Create attached_assets/profile_pictures directory if it doesn't exist\n      const uploadsDir = path.join(process.cwd(), 'attached_assets', 'profile_pictures');\n      await fs.mkdir(uploadsDir, { recursive: true });\n\n      // Read the file from the request\n      const chunks: Buffer[] = [];\n      for await (const chunk of req) {\n        chunks.push(chunk);\n      }\n      const buffer = Buffer.concat(chunks);\n\n      // Parse multipart form data (simple implementation)\n      const boundary = req.headers['content-type']?.split('boundary=')[1];\n      if (!boundary) {\n        return res.status(400).json({ message: 'Invalid content type' });\n      }\n\n      // Extract file data from multipart\n      const parts = buffer.toString('binary').split(`--${boundary}`);\n      let fileData: Buffer | null = null;\n      let fileExt = 'jpg';\n\n      for (const part of parts) {\n        if (part.includes('Content-Type: image/')) {\n          const contentType = part.match(/Content-Type: image\\/(\\w+)/)?.[1];\n          if (contentType) fileExt = contentType;\n          \n          const dataStart = part.indexOf('\\r\\n\\r\\n') + 4;\n          const dataEnd = part.lastIndexOf('\\r\\n');\n          if (dataStart > 3 && dataEnd > dataStart) {\n            const binaryData = part.substring(dataStart, dataEnd);\n            fileData = Buffer.from(binaryData, 'binary');\n            break;\n          }\n        }\n      }\n\n      if (!fileData) {\n        return res.status(400).json({ message: 'No file data found' });\n      }\n\n      // Save file with unique name\n      const fileName = `${nanoid()}.${fileExt}`;\n      const filePath = path.join(uploadsDir, fileName);\n      await fs.writeFile(filePath, fileData);\n\n      // Return the URL path\n      const url = `/attached_assets/profile_pictures/${fileName}`;\n      res.json({ url });\n    } catch (error: any) {\n      console.error('Image upload error:', error);\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.patch(\"/api/contacts/:id\", async (req, res) => {\n    try {\n      const contact = await storage.updateContact(req.params.id, req.body);\n      res.json(contact);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.delete(\"/api/contacts/:id\", async (req, res) => {\n    try {\n      const userId = await getMockUserId();\n      \n      // Verify the contact belongs to the user\n      const contact = await storage.getContact(req.params.id);\n      if (!contact) {\n        return res.status(404).json({ message: \"Contact not found\" });\n      }\n      if (contact.userId !== userId) {\n        return res.status(403).json({ message: \"Not authorized to delete this contact\" });\n      }\n      \n      await storage.deleteContact(req.params.id);\n      res.status(204).end();\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.post(\"/api/contacts/import\", async (req, res) => {\n    try {\n      const userId = await getMockUserId();\n      const { contacts: csvContacts } = req.body;\n      \n      if (!Array.isArray(csvContacts)) {\n        return res.status(400).json({ message: \"Invalid request: contacts must be an array\" });\n      }\n\n      const results = {\n        imported: 0,\n        skipped: 0,\n        errors: [] as string[],\n      };\n\n      // Fetch existing contacts once\n      const existingContacts = await storage.getContacts(userId);\n      const existingPhones = new Set(existingContacts.map(c => c.phone));\n\n      for (let i = 0; i < csvContacts.length; i++) {\n        const csvContact = csvContacts[i];\n        const rowNum = i + 2; // +2 because row 1 is headers, array is 0-indexed\n\n        try {\n          // Validate required fields\n          if (!csvContact.firstName || !csvContact.lastName || !csvContact.phone) {\n            results.errors.push(`Row ${rowNum}: Missing required fields (firstName, lastName, or phone)`);\n            results.skipped++;\n            continue;\n          }\n\n          // Check for duplicate\n          if (existingPhones.has(csvContact.phone)) {\n            results.errors.push(`Row ${rowNum}: Phone ${csvContact.phone} already exists`);\n            results.skipped++;\n            continue;\n          }\n\n          // Validate with schema\n          const validated = insertContactSchema.parse({\n            firstName: csvContact.firstName,\n            lastName: csvContact.lastName,\n            phone: csvContact.phone,\n            email: csvContact.email || null,\n            notes: csvContact.notes || null,\n          });\n\n          // Create contact\n          await storage.createContact(userId, validated);\n          existingPhones.add(csvContact.phone); // Add to set to prevent duplicates within the import\n          results.imported++;\n        } catch (error: any) {\n          results.errors.push(`Row ${rowNum}: ${error.message}`);\n          results.skipped++;\n        }\n      }\n\n      res.json(results);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  // Generate or get roster token for a contact\n  app.get(\"/api/contacts/:id/roster-token\", async (req, res) => {\n    try {\n      const userId = await getMockUserId();\n      const contact = await storage.getContact(req.params.id);\n      \n      if (!contact) {\n        return res.status(404).json({ message: \"Contact not found\" });\n      }\n      \n      // Verify contact belongs to user\n      if (contact.userId !== userId) {\n        return res.status(403).json({ message: \"Not authorized\" });\n      }\n      \n      // Generate token if doesn't exist\n      if (!contact.rosterToken) {\n        const token = nanoid(32);\n        await storage.updateContact(req.params.id, { rosterToken: token });\n        return res.json({ token });\n      }\n      \n      res.json({ token: contact.rosterToken });\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  // Public endpoint to view roster by token - no auth required\n  app.get(\"/api/roster/:token\", async (req, res) => {\n    try {\n      const { token } = req.params;\n      \n      // Find contact by roster token\n      const contact = await storage.getContactByRosterToken(token);\n      \n      if (!contact) {\n        return res.status(404).json({ message: \"Roster not found\" });\n      }\n      \n      // Get all jobs where this contact has availability (regardless of status)\n      const availability = await storage.getAvailabilityByContact(contact.id);\n      \n      // Fetch job details for all jobs with availability\n      const jobIds = availability.map(a => a.jobId);\n      const jobs = [];\n      \n      for (const jobId of jobIds) {\n        const job = await storage.getJob(jobId);\n        if (job) {\n          jobs.push(job);\n        }\n      }\n      \n      // Sort jobs by start time\n      jobs.sort((a, b) => new Date(a.startTime).getTime() - new Date(b.startTime).getTime());\n      \n      res.json({\n        contact: {\n          firstName: contact.firstName,\n          lastName: contact.lastName,\n        },\n        jobs: jobs.map(job => ({\n          id: job.id,\n          name: job.name,\n          location: job.location,\n          startTime: job.startTime,\n          endTime: job.endTime,\n          notes: job.notes,\n        })),\n      });\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.get(\"/api/reports/resource-allocation\", async (req, res) => {\n    try {\n      const userId = await getMockUserId();\n      \n      // Fetch all data needed for the report\n      const contacts = await storage.getContacts(userId);\n      const jobs = await storage.getJobs(userId);\n      const allAvailability = await storage.getAllAvailability(userId);\n      \n      // Create a PDF document\n      const doc = new PDFDocument({ margin: 50 });\n      \n      // Set response headers for PDF download\n      res.setHeader('Content-Type', 'application/pdf');\n      res.setHeader('Content-Disposition', 'attachment; filename=\"resource-allocation-report.pdf\"');\n      \n      // Pipe the PDF to the response\n      doc.pipe(res);\n      \n      // Add title\n      doc.fontSize(20).font('Helvetica-Bold').text('Resource Allocation Report', { align: 'center' });\n      doc.moveDown();\n      doc.fontSize(10).font('Helvetica').text(`Generated: ${new Date().toLocaleString()}`, { align: 'center' });\n      doc.moveDown(2);\n      \n      // Group contacts by status\n      const contactsOnJob = contacts.filter(c => c.status === 'on_job');\n      const contactsAvailable = contacts.filter(c => c.status === 'free');\n      const contactsOffShift = contacts.filter(c => c.status === 'off_shift');\n      \n      // Create a map of contact assignments\n      const contactJobMap = new Map<string, any>();\n      allAvailability.forEach(avail => {\n        if (avail.status === 'confirmed') {\n          const job = jobs.find(j => j.id === avail.jobId);\n          if (job) {\n            contactJobMap.set(avail.contactId, job);\n          }\n        }\n      });\n      \n      // Section 1: Contacts on Jobs\n      doc.fontSize(14).font('Helvetica-Bold').text('Contacts Assigned to Jobs', { underline: true });\n      doc.moveDown();\n      \n      if (contactsOnJob.length === 0) {\n        doc.fontSize(10).font('Helvetica-Oblique').text('No contacts currently assigned to jobs.');\n        doc.moveDown();\n      } else {\n        // Group contacts by job\n        const jobGroups = new Map<string, any[]>();\n        contactsOnJob.forEach(contact => {\n          const job = contactJobMap.get(contact.id);\n          if (job) {\n            if (!jobGroups.has(job.id)) {\n              jobGroups.set(job.id, []);\n            }\n            jobGroups.get(job.id)!.push(contact);\n          }\n        });\n        \n        jobGroups.forEach((contactsList, jobId) => {\n          const job = jobs.find(j => j.id === jobId);\n          if (job) {\n            doc.fontSize(12).font('Helvetica-Bold').text(`${job.name}`, { continued: false });\n            doc.fontSize(10).font('Helvetica').text(`Location: ${job.location || 'N/A'}`);\n            doc.text(`Start: ${new Date(job.startTime).toLocaleString()}`);\n            doc.moveDown(0.5);\n            \n            contactsList.forEach((contact, index) => {\n              doc.fontSize(10).font('Helvetica').text(\n                `  ${index + 1}. ${contact.firstName} ${contact.lastName} - ${contact.phone}${contact.email ? ` (${contact.email})` : ''}`,\n                { indent: 20 }\n              );\n            });\n            doc.moveDown();\n          }\n        });\n      }\n      \n      doc.moveDown();\n      \n      // Section 2: Available Contacts\n      doc.fontSize(14).font('Helvetica-Bold').text('Available Contacts', { underline: true });\n      doc.moveDown();\n      \n      if (contactsAvailable.length === 0) {\n        doc.fontSize(10).font('Helvetica-Oblique').text('No contacts currently available.');\n      } else {\n        doc.fontSize(10).font('Helvetica').text(`Total Available: ${contactsAvailable.length}`);\n        doc.moveDown(0.5);\n        contactsAvailable.forEach((contact, index) => {\n          doc.fontSize(10).font('Helvetica').text(\n            `${index + 1}. ${contact.firstName} ${contact.lastName} - ${contact.phone}${contact.email ? ` (${contact.email})` : ''}`\n          );\n        });\n      }\n      \n      doc.moveDown(2);\n      \n      // Section 3: Off Shift Contacts\n      doc.fontSize(14).font('Helvetica-Bold').text('Off Shift Contacts', { underline: true });\n      doc.moveDown();\n      \n      if (contactsOffShift.length === 0) {\n        doc.fontSize(10).font('Helvetica-Oblique').text('No contacts currently off shift.');\n      } else {\n        doc.fontSize(10).font('Helvetica').text(`Total Off Shift: ${contactsOffShift.length}`);\n        doc.moveDown(0.5);\n        contactsOffShift.forEach((contact, index) => {\n          doc.fontSize(10).font('Helvetica').text(\n            `${index + 1}. ${contact.firstName} ${contact.lastName} - ${contact.phone}${contact.email ? ` (${contact.email})` : ''}`\n          );\n        });\n      }\n      \n      // Add summary footer\n      doc.moveDown(3);\n      doc.fontSize(12).font('Helvetica-Bold').text('Summary', { underline: true });\n      doc.moveDown(0.5);\n      doc.fontSize(10).font('Helvetica');\n      doc.text(`Total Contacts: ${contacts.length}`);\n      doc.text(`On Job: ${contactsOnJob.length}`);\n      doc.text(`Available: ${contactsAvailable.length}`);\n      doc.text(`Off Shift: ${contactsOffShift.length}`);\n      \n      // Finalize the PDF\n      doc.end();\n    } catch (error: any) {\n      console.error('Error generating PDF:', error);\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  // Download ICS calendar invite for a job\n  app.get(\"/api/jobs/:id/calendar-invite\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const job = await storage.getJob(id);\n      \n      if (!job) {\n        return res.status(404).json({ message: \"Job not found\" });\n      }\n      \n      // Generate the ICS file content\n      const icsContent = generateICS(job);\n      \n      // Create a safe filename from the job name\n      const safeFilename = job.name.replace(/[^a-z0-9]/gi, '-').toLowerCase();\n      const filename = `${safeFilename}-${new Date(job.startTime).toISOString().split('T')[0]}.ics`;\n      \n      // Set response headers for calendar file download\n      res.setHeader('Content-Type', 'text/calendar; charset=utf-8');\n      res.setHeader('Content-Disposition', `attachment; filename=\"${filename}\"`);\n      \n      // Send the ICS content\n      res.send(icsContent);\n    } catch (error: any) {\n      console.error('Error generating calendar invite:', error);\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.get(\"/api/templates\", async (req, res) => {\n    try {\n      const templates = await storage.getTemplates(await getMockUserId());\n      res.json(templates);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.post(\"/api/templates\", async (req, res) => {\n    try {\n      const validated = insertTemplateSchema.parse(req.body);\n      const template = await storage.createTemplate(await getMockUserId(), validated);\n      res.json(template);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.delete(\"/api/templates/:id\", async (req, res) => {\n    try {\n      await storage.deleteTemplate(req.params.id);\n      res.json({ success: true });\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.post(\"/api/send-message\", async (req, res) => {\n    try {\n      const { jobId, templateId, contactIds } = req.body;\n      const userId = await getMockUserId();\n\n      // Check if user has enough credits\n      const availableCredits = await creditService.getAvailableCredits(userId);\n      if (availableCredits < contactIds.length) {\n        return res.status(400).json({ \n          message: `Insufficient SMS credits. Available: ${availableCredits}, Required: ${contactIds.length}` \n        });\n      }\n\n      const job = await storage.getJob(jobId);\n      const template = await storage.getTemplate(templateId);\n\n      if (!job || !template) {\n        return res.status(404).json({ message: \"Job or template not found\" });\n      }\n\n      const campaign = await storage.createCampaign(userId, {\n        jobId,\n        templateId,\n      });\n\n      let twilioClient: any = null;\n      let fromNumber: string = \"\";\n      \n      try {\n        twilioClient = await getTwilioClient();\n        fromNumber = await getTwilioFromPhoneNumber();\n      } catch (error) {\n        console.log(\"Twilio not configured, messages will be logged only\");\n      }\n\n      const sentMessages = [];\n\n      for (const contactId of contactIds) {\n        const contact = await storage.getContact(contactId);\n        if (!contact || contact.isOptedOut) continue;\n\n        let existing = await storage.getAvailabilityForContact(jobId, contactId);\n        if (!existing) {\n          existing = await storage.createAvailability({\n            jobId,\n            contactId,\n            status: \"no_reply\",\n            shiftPreference: null,\n          });\n        }\n\n        let messageContent = renderTemplate(template.content, contact, job);\n        \n        // Append roster link if template has it enabled\n        if (template.includeRosterLink) {\n          // Generate or get roster token for this contact\n          let rosterToken = contact.rosterToken;\n          if (!rosterToken) {\n            rosterToken = nanoid(32);\n            await storage.updateContact(contactId, { rosterToken });\n          }\n          \n          // Get the base URL from the request\n          const baseUrl = `${req.protocol}://${req.get('host')}`;\n          const rosterUrl = `${baseUrl}/roster/${rosterToken}`;\n          messageContent += `\\n\\nView your weekly roster: ${rosterUrl}`;\n        }\n        \n        let message;\n\n        if (twilioClient && fromNumber) {\n          try {\n            const e164Phone = constructE164Phone(contact.countryCode || \"US\", contact.phone);\n            const twilioMessage = await twilioClient.messages.create({\n              body: messageContent,\n              from: fromNumber,\n              to: e164Phone,\n            });\n\n            message = await storage.createMessage(userId, {\n              contactId,\n              jobId,\n              campaignId: campaign.id,\n              direction: \"outbound\",\n              content: messageContent,\n              status: \"sent\",\n              twilioSid: twilioMessage.sid,\n            });\n          } catch (error) {\n            message = await storage.createMessage(userId, {\n              contactId,\n              jobId,\n              campaignId: campaign.id,\n              direction: \"outbound\",\n              content: messageContent,\n              status: \"failed\",\n              twilioSid: null,\n            });\n          }\n        } else {\n          console.log(`[DEV MODE] Would send SMS to ${contact.phone}: ${messageContent}`);\n          message = await storage.createMessage(userId, {\n            contactId,\n            jobId,\n            campaignId: campaign.id,\n            direction: \"outbound\",\n            content: messageContent,\n            status: \"sent\",\n            twilioSid: `dev-${Date.now()}`,\n          });\n        }\n\n        sentMessages.push(message);\n      }\n\n      // Consume credits for all sent messages\n      await creditService.consumeCredits(\n        userId,\n        sentMessages.length,\n        `Campaign ${campaign.id} for job ${jobId}`,\n        null\n      );\n\n      res.json({ success: true, campaign });\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.post(\"/api/messages/bulk-sms\", async (req, res) => {\n    try {\n      const { contactIds, message } = req.body;\n      const userId = await getMockUserId();\n\n      if (!contactIds || !Array.isArray(contactIds) || contactIds.length === 0) {\n        return res.status(400).json({ message: \"Contact IDs required\" });\n      }\n\n      if (!message || !message.trim()) {\n        return res.status(400).json({ message: \"Message content required\" });\n      }\n\n      // Check if user has enough credits\n      const availableCredits = await creditService.getAvailableCredits(userId);\n      if (availableCredits < contactIds.length) {\n        return res.status(400).json({ \n          message: `Insufficient SMS credits. Available: ${availableCredits}, Required: ${contactIds.length}` \n        });\n      }\n\n      let twilioClient: any = null;\n      let fromNumber: string = \"\";\n      \n      try {\n        twilioClient = await getTwilioClient();\n        fromNumber = await getTwilioFromPhoneNumber();\n      } catch (error) {\n        console.log(\"Twilio not configured, messages will be logged only\");\n      }\n\n      let sent = 0;\n      let useTwilio = twilioClient && fromNumber;\n      \n      for (const contactId of contactIds) {\n        const contact = await storage.getContact(contactId);\n        if (!contact || contact.isOptedOut) continue;\n\n        if (useTwilio) {\n          try {\n            const e164Phone = constructE164Phone(contact.countryCode || \"US\", contact.phone);\n            const twilioMessage = await twilioClient.messages.create({\n              body: message,\n              from: fromNumber,\n              to: e164Phone,\n            });\n\n            await storage.createMessage(userId, {\n              contactId,\n              jobId: null,\n              campaignId: null,\n              direction: \"outbound\",\n              content: message,\n              status: \"sent\",\n              twilioSid: twilioMessage.sid,\n            });\n            sent++;\n          } catch (error: any) {\n            // If authentication fails, fall back to dev mode for remaining messages\n            if (error.status === 401 || error.code === 20003) {\n              console.log(\"Twilio authentication failed, switching to dev mode\");\n              useTwilio = false;\n              // Process this contact in dev mode\n              console.log(`[DEV MODE] Would send SMS to ${contact.phone}: ${message}`);\n              await storage.createMessage(userId, {\n                contactId,\n                jobId: null,\n                campaignId: null,\n                direction: \"outbound\",\n                content: message,\n                status: \"sent\",\n                twilioSid: `dev-${Date.now()}-${contactId}`,\n              });\n              sent++;\n            } else {\n              console.error(`Failed to send SMS to ${contact.phone}:`, error);\n              await storage.createMessage(userId, {\n                contactId,\n                jobId: null,\n                campaignId: null,\n                direction: \"outbound\",\n                content: message,\n                status: \"failed\",\n                twilioSid: null,\n              });\n            }\n          }\n        } else {\n          console.log(`[DEV MODE] Would send SMS to ${contact.phone}: ${message}`);\n          await storage.createMessage(userId, {\n            contactId,\n            jobId: null,\n            campaignId: null,\n            direction: \"outbound\",\n            content: message,\n            status: \"sent\",\n            twilioSid: `dev-${Date.now()}-${contactId}`,\n          });\n          sent++;\n        }\n      }\n\n      // Consume credits for all sent messages\n      await creditService.consumeCredits(\n        userId,\n        sent,\n        \"Bulk SMS broadcast\",\n        null\n      );\n\n      res.json({ success: true, sent });\n    } catch (error: any) {\n      console.error(\"Bulk SMS error:\", error);\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  // Stripe webhook handler (requires raw body for signature verification)\n  app.post(\"/api/stripe/webhook\", \n    express.raw({ type: \"application/json\" }),\n    async (req, res) => {\n      if (!stripe) {\n        return res.status(500).json({ message: \"Stripe not configured\" });\n      }\n\n      const sig = req.headers[\"stripe-signature\"];\n      const webhookSecret = process.env.STRIPE_WEBHOOK_SECRET;\n\n      if (!webhookSecret) {\n        console.error(\"STRIPE_WEBHOOK_SECRET not configured\");\n        return res.status(500).json({ message: \"Webhook secret not configured\" });\n      }\n\n      try {\n        let event: Stripe.Event;\n\n        try {\n          event = stripe.webhooks.constructEvent(req.body, sig as string, webhookSecret);\n        } catch (err: any) {\n          console.error(\"Webhook signature verification failed:\", err.message);\n          return res.status(400).send(`Webhook Error: ${err.message}`);\n        }\n\n        console.log(`Received Stripe webhook: ${event.type}`);\n\n        // Handle different event types\n        switch (event.type) {\n          case \"checkout.session.completed\": {\n            const session = event.data.object as Stripe.Checkout.Session;\n            const userId = session.metadata?.userId;\n\n            if (!userId) {\n              console.error(\"No userId in checkout session metadata\");\n              break;\n            }\n\n            // Check if this is a subscription or one-time purchase (bundle)\n            if (session.mode === \"subscription\" && session.subscription) {\n              // Handle subscription purchase\n              const subscriptionId = session.subscription as string;\n              const subscription = await stripe.subscriptions.retrieve(subscriptionId);\n              const planId = session.metadata?.planId;\n\n              if (!planId) {\n                console.error(\"No planId in session metadata\");\n                break;\n              }\n\n              // Get the plan details\n              const plan = await storage.getSubscriptionPlan(planId);\n              if (!plan) {\n                console.error(`Plan ${planId} not found`);\n                break;\n              }\n\n              // Get currency from session metadata (defaults to GBP)\n              const currency = session.metadata?.currency || \"GBP\";\n\n              // Update user's subscription\n              const userSub = await storage.getSubscription(userId);\n              if (userSub) {\n                await storage.updateSubscription(userId, {\n                  planId,\n                  currency,\n                  stripeSubscriptionId: subscriptionId,\n                  status: subscription.status,\n                  currentPeriodStart: new Date(subscription.current_period_start * 1000),\n                  currentPeriodEnd: new Date(subscription.current_period_end * 1000),\n                });\n              }\n\n              // Grant credits for the subscription period\n              const expiryDate = new Date(subscription.current_period_end * 1000);\n              await creditService.grantCredits(\n                userId,\n                plan.monthlyCredits,\n                `Subscription: ${plan.name}`,\n                expiryDate\n              );\n\n              console.log(`Granted ${plan.monthlyCredits} credits to user ${userId} for subscription ${planId}`);\n            } else if (session.mode === \"payment\" && session.payment_intent) {\n              // Handle one-time bundle purchase\n              const bundleId = session.metadata?.bundleId;\n\n              if (!bundleId) {\n                console.error(\"No bundleId in session metadata\");\n                break;\n              }\n\n              // Get the bundle details\n              const bundle = await storage.getSmsBundle(bundleId);\n              if (!bundle) {\n                console.error(`Bundle ${bundleId} not found`);\n                break;\n              }\n\n              // Grant credits (bundles don't expire)\n              await creditService.grantCredits(\n                userId,\n                bundle.credits,\n                `SMS Bundle: ${bundle.name}`,\n                null\n              );\n\n              console.log(`Granted ${bundle.credits} credits to user ${userId} for bundle ${bundleId}`);\n            }\n            break;\n          }\n\n          case \"invoice.payment_succeeded\": {\n            const invoice = event.data.object as Stripe.Invoice;\n            const subscriptionId = invoice.subscription as string;\n\n            if (!subscriptionId) {\n              console.log(\"Invoice not for a subscription, skipping\");\n              break;\n            }\n\n            // Find the subscription\n            const subscriptions = await storage.getAllSubscriptions?.() || [];\n            const userSub = subscriptions.find(s => s.stripeSubscriptionId === subscriptionId);\n\n            if (!userSub) {\n              console.error(`Subscription ${subscriptionId} not found in database`);\n              break;\n            }\n\n            // Get the subscription from Stripe\n            const subscription = await stripe.subscriptions.retrieve(subscriptionId);\n\n            // Update subscription dates\n            await storage.updateSubscription(userSub.userId, {\n              status: subscription.status,\n              currentPeriodStart: new Date(subscription.current_period_start * 1000),\n              currentPeriodEnd: new Date(subscription.current_period_end * 1000),\n            });\n\n            // Grant credits for the new period (if not the first invoice)\n            if (invoice.billing_reason === \"subscription_cycle\" && userSub.planId) {\n              const plan = await storage.getSubscriptionPlan(userSub.planId);\n              if (plan) {\n                const expiryDate = new Date(subscription.current_period_end * 1000);\n                await creditService.grantCredits(\n                  userSub.userId,\n                  plan.monthlyCredits,\n                  `Subscription renewal: ${plan.name}`,\n                  expiryDate\n                );\n\n                console.log(`Granted ${plan.monthlyCredits} credits to user ${userSub.userId} for renewal`);\n              }\n            }\n            break;\n          }\n\n          case \"customer.subscription.deleted\": {\n            const subscription = event.data.object as Stripe.Subscription;\n            const subscriptionId = subscription.id;\n\n            // Find the subscription\n            const subscriptions = await storage.getAllSubscriptions?.() || [];\n            const userSub = subscriptions.find(s => s.stripeSubscriptionId === subscriptionId);\n\n            if (userSub) {\n              await storage.updateSubscription(userSub.userId, {\n                status: \"canceled\",\n              });\n              console.log(`Subscription ${subscriptionId} cancelled for user ${userSub.userId}`);\n            }\n            break;\n          }\n\n          default:\n            console.log(`Unhandled event type: ${event.type}`);\n        }\n\n        res.json({ received: true });\n      } catch (error: any) {\n        console.error(\"Stripe webhook error:\", error);\n        res.status(500).json({ message: error.message });\n      }\n    }\n  );\n\n  app.post(\"/api/twilio/webhook\", async (req, res) => {\n    try {\n      const { From, Body, MessageSid } = req.body;\n\n      const contacts = await storage.getContacts(await getMockUserId());\n      const contact = contacts.find((c) => c.phone === From);\n\n      if (!contact) {\n        return res.status(200).send(\"OK\");\n      }\n\n      if (Body.toLowerCase().includes(\"stop\") || Body.toLowerCase().includes(\"unsubscribe\")) {\n        await storage.updateContact(contact.id, { isOptedOut: true });\n        return res.status(200).send(\"OK\");\n      }\n\n      const messages = await storage.getMessages(contact.id);\n      const recentMessages = messages.filter(\n        (m) => m.direction === \"outbound\" && m.jobId\n      ).slice(-5);\n\n      const jobId = recentMessages.length > 0 ? recentMessages[recentMessages.length - 1].jobId : null;\n\n      await storage.createMessage(await getMockUserId(), {\n        contactId: contact.id,\n        jobId: jobId,\n        campaignId: null,\n        direction: \"inbound\",\n        content: Body,\n        status: \"received\",\n        twilioSid: MessageSid,\n      });\n\n      if (jobId) {\n        const parsed = parseReply(Body);\n        const availability = await storage.getAvailabilityForContact(jobId, contact.id);\n\n        if (availability) {\n          await storage.updateAvailability(availability.id, {\n            status: parsed.status,\n            shiftPreference: parsed.shiftPreference || availability.shiftPreference,\n          });\n        }\n      }\n\n      res.status(200).send(\"OK\");\n    } catch (error: any) {\n      console.error(\"Twilio webhook error:\", error);\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  // Get all messages for current user with enriched contact/job data\n  app.get(\"/api/messages/history\", requireAuth, async (req, res) => {\n    try {\n      const userId = req.user!.id;\n      const messages = await storage.getAllMessagesForUser(userId);\n      \n      // Enrich messages with contact and job information\n      const enrichedMessages = await Promise.all(\n        messages.map(async (msg) => {\n          const contact = await storage.getContact(msg.contactId);\n          const job = msg.jobId ? await storage.getJob(msg.jobId) : null;\n          \n          return {\n            ...msg,\n            contactName: contact ? `${contact.firstName} ${contact.lastName}` : \"Unknown\",\n            jobName: job?.name || null,\n          };\n        })\n      );\n      \n      res.json(enrichedMessages);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.get(\"/api/messages/:contactId\", async (req, res) => {\n    try {\n      const messages = await storage.getMessages(req.params.contactId);\n      res.json(messages);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.post(\"/api/availability\", async (req, res) => {\n    try {\n      const validated = insertAvailabilitySchema.parse(req.body);\n      const availability = await storage.createAvailability(validated);\n      res.json(availability);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.patch(\"/api/availability/:id\", async (req, res) => {\n    try {\n      const { status, shiftPreference } = req.body;\n      const availability = await storage.updateAvailability(req.params.id, {\n        status,\n        shiftPreference,\n      });\n      res.json(availability);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.get(\"/api/subscription\", async (req, res) => {\n    try {\n      const subscription = await storage.getSubscription(await getMockUserId());\n      if (!subscription) {\n        return res.status(404).json({ message: \"Subscription not found\" });\n      }\n      res.json(subscription);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  // Credit system routes\n  app.get(\"/api/credits\", async (req, res) => {\n    try {\n      const userId = await getMockUserId();\n      const [available, breakdown] = await Promise.all([\n        creditService.getAvailableCredits(userId),\n        creditService.getCreditBreakdown(userId),\n      ]);\n      \n      res.json({\n        available,\n        breakdown,\n      });\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.get(\"/api/subscription-plans\", async (req, res) => {\n    try {\n      const plans = await storage.getSubscriptionPlans();\n      res.json(plans.filter(p => p.isActive));\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.get(\"/api/sms-bundles\", async (req, res) => {\n    try {\n      const bundles = await storage.getSmsBundles();\n      res.json(bundles.filter(b => b.isActive));\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.post(\"/api/create-checkout-session\", async (req, res) => {\n    try {\n      if (!stripe) {\n        return res.status(500).json({ message: \"Stripe not configured\" });\n      }\n\n      const userId = req.session.userId;\n      if (!userId) {\n        return res.status(401).json({ message: \"Not authenticated\" });\n      }\n\n      const { planId, currency = \"GBP\" } = req.body;\n\n      if (!planId) {\n        return res.status(400).json({ message: \"Plan ID is required\" });\n      }\n\n      if (![\"GBP\", \"USD\", \"EUR\"].includes(currency)) {\n        return res.status(400).json({ message: \"Invalid currency\" });\n      }\n\n      // Get the plan\n      const plan = await storage.getSubscriptionPlan(planId);\n      if (!plan || !plan.isActive) {\n        return res.status(404).json({ message: \"Plan not found\" });\n      }\n\n      // Get the price for the selected currency\n      let priceAmount: number;\n      let stripeCurrency: string;\n      switch (currency) {\n        case \"USD\":\n          priceAmount = plan.priceUSD;\n          stripeCurrency = \"usd\";\n          break;\n        case \"EUR\":\n          priceAmount = plan.priceEUR;\n          stripeCurrency = \"eur\";\n          break;\n        default:\n          priceAmount = plan.priceGBP;\n          stripeCurrency = \"gbp\";\n      }\n\n      // Get the user\n      const user = await storage.getUser(userId);\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      // Create or retrieve Stripe customer\n      let customerId = user.stripeCustomerId;\n      if (!customerId) {\n        const customer = await stripe.customers.create({\n          email: user.email,\n          metadata: {\n            userId: user.id,\n          },\n        });\n        customerId = customer.id;\n        await storage.updateUser(userId, { stripeCustomerId: customerId });\n      }\n\n      // Create checkout session\n      const session = await stripe.checkout.sessions.create({\n        customer: customerId,\n        mode: \"subscription\",\n        payment_method_types: [\"card\"],\n        line_items: [\n          {\n            price_data: {\n              currency: stripeCurrency,\n              product_data: {\n                name: `${plan.name} Plan`,\n                description: `${plan.monthlyCredits} messages per month`,\n              },\n              recurring: {\n                interval: \"month\",\n              },\n              unit_amount: priceAmount, // Already in cents/pence from database\n            },\n            quantity: 1,\n          },\n        ],\n        success_url: `${req.headers.origin}/billing?session_id={CHECKOUT_SESSION_ID}`,\n        cancel_url: `${req.headers.origin}/billing`,\n        metadata: {\n          userId,\n          planId,\n          currency,\n        },\n      });\n\n      // Update user's currency preference\n      await storage.updateUser(userId, { currency });\n\n      res.json({ url: session.url });\n    } catch (error: any) {\n      console.error(\"Checkout session error:\", error);\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.get(\"/api/credit-grants\", async (req, res) => {\n    try {\n      const userId = await getMockUserId();\n      const grants = await storage.getCreditGrants(userId);\n      res.json(grants);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.get(\"/api/credit-transactions\", async (req, res) => {\n    try {\n      const userId = await getMockUserId();\n      const transactions = await storage.getCreditTransactions(userId);\n      res.json(transactions);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  // Admin middleware - checks if user is admin\n  async function requireAdmin(req: any, res: any, next: any) {\n    try {\n      if (!req.session.userId) {\n        return res.status(401).json({ message: \"Not authenticated\" });\n      }\n\n      const user = await storage.getUser(req.session.userId);\n      if (!user || !user.isAdmin) {\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n\n      next();\n    } catch (error: any) {\n      console.error(\"Admin middleware error:\", error);\n      res.status(500).json({ message: \"Authentication error\" });\n    }\n  }\n\n  // Admin routes\n  app.get(\"/api/admin/users\", requireAdmin, async (req, res) => {\n    try {\n      const allUsers = await storage.getAllUsers();\n      \n      // Get subscription and credit info for each user\n      const usersWithDetails = await Promise.all(\n        allUsers.map(async (user) => {\n          const [subscription, totalCredits, creditTransactions] = await Promise.all([\n            storage.getSubscription(user.id),\n            storage.getTotalCredits(user.id),\n            storage.getCreditTransactions(user.id),\n          ]);\n\n          // Calculate SMS volume (total messages sent) from credit transactions\n          const smsVolume = creditTransactions\n            .filter(t => t.type === \"debit\" && t.messageId)\n            .reduce((sum, t) => sum + Math.abs(t.amount), 0);\n\n          let planName = \"Trial\";\n          let monthlyPayment = 0;\n          if (subscription?.planId) {\n            const plan = await storage.getSubscriptionPlan(subscription.planId);\n            planName = plan?.name || \"Unknown\";\n            \n            // Get monthly payment based on subscription currency\n            if (plan) {\n              const currency = subscription.currency || user.currency || \"GBP\";\n              if (currency === \"GBP\") {\n                monthlyPayment = plan.priceGBP / 100; // Convert from pence to pounds\n              } else if (currency === \"USD\") {\n                monthlyPayment = plan.priceUSD / 100; // Convert from cents to dollars\n              } else if (currency === \"EUR\") {\n                monthlyPayment = plan.priceEUR / 100; // Convert from cents to euros\n              }\n            }\n          }\n\n          return {\n            id: user.id,\n            username: user.username,\n            email: user.email,\n            isAdmin: user.isAdmin,\n            isActive: user.isActive,\n            currency: user.currency || \"GBP\",\n            credits: totalCredits,\n            smsVolume,\n            referralCode: user.referralCode || null,\n            createdAt: user.createdAt || null,\n            subscription: {\n              planId: subscription?.planId || null,\n              planName,\n              status: subscription?.status || \"trial\",\n              currency: subscription?.currency || user.currency || \"GBP\",\n              currentPeriodEnd: subscription?.currentPeriodEnd || null,\n              trialEndsAt: subscription?.trialEndsAt || null,\n              monthlyPayment,\n            },\n          };\n        })\n      );\n\n      res.json(usersWithDetails);\n    } catch (error: any) {\n      console.error(\"Admin users list error:\", error);\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.post(\"/api/admin/users/:userId/subscription\", requireAdmin, async (req, res) => {\n    try {\n      const { userId } = req.params;\n      const { planId } = req.body;\n\n      if (!planId) {\n        return res.status(400).json({ message: \"Plan ID is required\" });\n      }\n\n      // Verify plan exists\n      const plan = await storage.getSubscriptionPlan(planId);\n      if (!plan) {\n        return res.status(404).json({ message: \"Plan not found\" });\n      }\n\n      // Update user's subscription\n      const now = new Date();\n      const periodEnd = new Date(now.getTime() + 30 * 24 * 60 * 60 * 1000); // 30 days\n\n      await storage.updateSubscription(userId, {\n        planId,\n        status: \"active\",\n        currentPeriodStart: now,\n        currentPeriodEnd: periodEnd,\n      });\n\n      res.json({ success: true, message: `Subscription updated to ${plan.name}` });\n    } catch (error: any) {\n      console.error(\"Admin update subscription error:\", error);\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.post(\"/api/admin/users/:userId/credits\", requireAdmin, async (req, res) => {\n    try {\n      const { userId } = req.params;\n      const { amount, reason, expiresAt } = req.body;\n\n      if (!amount || amount <= 0) {\n        return res.status(400).json({ message: \"Valid amount is required\" });\n      }\n\n      // Grant credits\n      const expiry = expiresAt ? new Date(expiresAt) : null;\n      await creditService.grantCredits(\n        userId,\n        \"subscription\",  // sourceType - admin grants are like subscription grants\n        amount,          // creditsGranted\n        reason || \"Admin grant\",  // sourceRef\n        expiry           // expiresAt\n      );\n\n      const totalCredits = await storage.getTotalCredits(userId);\n      res.json({ \n        success: true, \n        message: `Granted ${amount} credits`,\n        totalCredits,\n      });\n    } catch (error: any) {\n      console.error(\"Admin grant credits error:\", error);\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.post(\"/api/admin/users/:userId/reset-password\", requireAdmin, async (req, res) => {\n    try {\n      const { userId } = req.params;\n      const { newPassword } = req.body;\n\n      if (!newPassword || newPassword.length < 6) {\n        return res.status(400).json({ message: \"Password must be at least 6 characters\" });\n      }\n\n      // Hash new password\n      const hashedPassword = await bcrypt.hash(newPassword, 10);\n\n      // Update user password\n      await storage.updateUser(userId, { password: hashedPassword });\n\n      res.json({ success: true, message: \"Password reset successfully\" });\n    } catch (error: any) {\n      console.error(\"Admin reset password error:\", error);\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  // User instance management routes\n  app.post(\"/api/admin/users/:userId/disable\", requireAdmin, async (req, res) => {\n    try {\n      const { userId } = req.params;\n\n      const user = await storage.disableUser(userId);\n\n      res.json({ success: true, message: \"User disabled successfully\", user });\n    } catch (error: any) {\n      console.error(\"Admin disable user error:\", error);\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.post(\"/api/admin/users/:userId/enable\", requireAdmin, async (req, res) => {\n    try {\n      const { userId } = req.params;\n\n      const user = await storage.enableUser(userId);\n\n      res.json({ success: true, message: \"User enabled successfully\", user });\n    } catch (error: any) {\n      console.error(\"Admin enable user error:\", error);\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  // Admin user management routes\n  app.get(\"/api/admin/admin-users\", requireAdmin, async (req, res) => {\n    try {\n      const adminUsers = await storage.getAllAdminUsers();\n      \n      // Don't return password hashes\n      const safeAdminUsers = adminUsers.map(({ password, ...adminUser }) => adminUser);\n      \n      res.json(safeAdminUsers);\n    } catch (error: any) {\n      console.error(\"Get admin users error:\", error);\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.post(\"/api/admin/admin-users\", requireAdmin, async (req, res) => {\n    try {\n      const { name, email, password } = req.body;\n\n      if (!name || !email || !password) {\n        return res.status(400).json({ message: \"Name, email, and password are required\" });\n      }\n\n      if (password.length < 6) {\n        return res.status(400).json({ message: \"Password must be at least 6 characters\" });\n      }\n\n      // Check if admin user already exists\n      const existingAdmin = await storage.getAdminUserByEmail(email);\n      if (existingAdmin) {\n        return res.status(400).json({ message: \"Admin user with this email already exists\" });\n      }\n\n      // Hash password\n      const hashedPassword = await bcrypt.hash(password, 10);\n\n      // Create admin user\n      const adminUser = await storage.createAdminUser({\n        name,\n        email,\n        password: hashedPassword,\n      });\n\n      // Don't return password hash\n      const { password: _, ...safeAdminUser } = adminUser;\n\n      res.json({ success: true, adminUser: safeAdminUser });\n    } catch (error: any) {\n      console.error(\"Create admin user error:\", error);\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.delete(\"/api/admin/admin-users/:id\", requireAdmin, async (req, res) => {\n    try {\n      const { id } = req.params;\n\n      await storage.deleteAdminUser(id);\n\n      res.json({ success: true, message: \"Admin user deleted successfully\" });\n    } catch (error: any) {\n      console.error(\"Delete admin user error:\", error);\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  // Admin pricing management routes\n  app.get(\"/api/admin/subscription-plans\", requireAdmin, async (req, res) => {\n    try {\n      const plans = await storage.getSubscriptionPlans();\n      res.json(plans);\n    } catch (error: any) {\n      console.error(\"Admin get subscription plans error:\", error);\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.patch(\"/api/admin/subscription-plans/:planId/pricing\", requireAdmin, async (req, res) => {\n    try {\n      const { planId } = req.params;\n      const { priceGBP, priceUSD, priceEUR } = req.body;\n\n      if (!priceGBP || !priceUSD || !priceEUR) {\n        return res.status(400).json({ message: \"All currency prices are required\" });\n      }\n\n      if (priceGBP <= 0 || priceUSD <= 0 || priceEUR <= 0) {\n        return res.status(400).json({ message: \"Prices must be positive\" });\n      }\n\n      const updatedPlan = await storage.updateSubscriptionPlanPricing(planId, {\n        priceGBP,\n        priceUSD,\n        priceEUR,\n      });\n\n      res.json(updatedPlan);\n    } catch (error: any) {\n      console.error(\"Admin update plan pricing error:\", error);\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.get(\"/api/admin/sms-bundles\", requireAdmin, async (req, res) => {\n    try {\n      const bundles = await storage.getSmsBundles();\n      res.json(bundles);\n    } catch (error: any) {\n      console.error(\"Admin get SMS bundles error:\", error);\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.patch(\"/api/admin/sms-bundles/:bundleId/pricing\", requireAdmin, async (req, res) => {\n    try {\n      const { bundleId } = req.params;\n      const { priceGBP, priceUSD, priceEUR } = req.body;\n\n      if (!priceGBP || !priceUSD || !priceEUR) {\n        return res.status(400).json({ message: \"All currency prices are required\" });\n      }\n\n      if (priceGBP <= 0 || priceUSD <= 0 || priceEUR <= 0) {\n        return res.status(400).json({ message: \"Prices must be positive\" });\n      }\n\n      const updatedBundle = await storage.updateSmsBundlePricing(bundleId, {\n        priceGBP,\n        priceUSD,\n        priceEUR,\n      });\n\n      res.json(updatedBundle);\n    } catch (error: any) {\n      console.error(\"Admin update bundle pricing error:\", error);\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  const httpServer = createServer(app);\n\n  return httpServer;\n}\n\nasync function sendRescheduleNotifications(userId: string, job: any, contacts: any[]) {\n  try {\n    let twilioClient: any = null;\n    let fromNumber: string = \"\";\n    \n    try {\n      twilioClient = await getTwilioClient();\n      fromNumber = await getTwilioFromPhoneNumber();\n    } catch (error) {\n      console.log(\"Twilio not configured, reschedule notifications will be logged only\");\n    }\n\n    const message = `UPDATE: ${job.name} has been rescheduled. New time: ${new Date(job.startTime).toLocaleString()}. Location: ${job.location}. Reply Y to confirm or N to decline.`;\n\n    let sent = 0;\n\n    for (const contact of contacts) {\n      if (contact.isOptedOut) continue;\n\n      if (twilioClient && fromNumber) {\n        try {\n          const e164Phone = constructE164Phone(contact.countryCode || \"US\", contact.phone);\n          const twilioMessage = await twilioClient.messages.create({\n            body: message,\n            from: fromNumber,\n            to: e164Phone,\n          });\n\n          await storage.createMessage(userId, {\n            contactId: contact.id,\n            jobId: job.id,\n            campaignId: null,\n            direction: \"outbound\",\n            content: message,\n            status: \"sent\",\n            twilioSid: twilioMessage.sid,\n          });\n          sent++;\n        } catch (error) {\n          console.error(\"Failed to send reschedule notification:\", error);\n        }\n      } else {\n        console.log(`[DEV MODE] Would send reschedule SMS to ${contact.phone}: ${message}`);\n        await storage.createMessage(userId, {\n          contactId: contact.id,\n          jobId: job.id,\n          campaignId: null,\n          direction: \"outbound\",\n          content: message,\n          status: \"sent\",\n          twilioSid: `dev-${Date.now()}`,\n        });\n        sent++;\n      }\n    }\n\n    // Consume credits for sent notifications\n    if (sent > 0) {\n      await creditService.consumeCredits(\n        userId,\n        sent,\n        `Reschedule notification for job ${job.id}`,\n        null\n      );\n    }\n  } catch (error) {\n    console.error(\"Reschedule notification error:\", error);\n  }\n}\n","size_bytes":73047},"design_guidelines.md":{"content":"# HeyTeam Design Guidelines\n\n## Design Approach: Design System Foundation\n\n**Selected System:** Linear-inspired modern productivity aesthetic with Material Design information density patterns\n\n**Justification:** HeyTeam is a utility-focused workforce coordination tool requiring:\n- High information density (rosters, calendars, messaging threads)\n- Daily operational use demanding consistency and learnability\n- Fast decision-making workflows for managers\n- Professional, trustworthy appearance for business contexts\n\n**Core Principles:**\n1. **Clarity First** - Every interaction supports quick comprehension and action\n2. **Information Hierarchy** - Clear visual distinction between critical (job status, confirmations) and supporting data\n3. **Purposeful Minimalism** - Clean layouts that reduce cognitive load during high-pressure coordination\n4. **Reliable Patterns** - Consistent UI elements that build muscle memory for frequent users\n\n---\n\n## Color Palette\n\n### Light Mode\n- **Background:** 0 0% 100% (pure white)\n- **Surface:** 240 5% 96% (subtle gray for cards/panels)\n- **Border:** 240 6% 90% (light borders)\n- **Primary:** 217 91% 60% (professional blue for actions, job cards)\n- **Success:** 142 71% 45% (confirmed availability, positive states)\n- **Warning:** 38 92% 50% (maybe responses, pending actions)\n- **Destructive:** 0 84% 60% (declined, cancellations)\n- **Text Primary:** 240 10% 4% (near-black)\n- **Text Secondary:** 240 4% 46% (muted gray)\n\n### Dark Mode\n- **Background:** 240 10% 4% (deep charcoal)\n- **Surface:** 240 6% 10% (elevated panels)\n- **Border:** 240 4% 16% (subtle borders)\n- **Primary:** 217 91% 65% (slightly lighter blue)\n- **Success:** 142 76% 36% (muted green)\n- **Warning:** 38 92% 50% (unchanged)\n- **Destructive:** 0 84% 60% (unchanged)\n- **Text Primary:** 0 0% 98% (near-white)\n- **Text Secondary:** 240 5% 65% (muted light gray)\n\n---\n\n## Typography\n\n**Font Family:** Inter (via Google Fonts CDN) - optimized for UI readability\n\n**Scale:**\n- **Display (Job Names, Headers):** 32px / 2rem, semibold (600)\n- **Heading 1 (Page Titles):** 24px / 1.5rem, semibold (600)\n- **Heading 2 (Section Titles):** 18px / 1.125rem, medium (500)\n- **Body (Default Text):** 14px / 0.875rem, normal (400)\n- **Small (Metadata, Timestamps):** 12px / 0.75rem, normal (400)\n- **Caption (Micro Labels):** 11px / 0.6875rem, medium (500)\n\n**Line Heights:** 1.5 for body, 1.2 for headings, 1.4 for UI components\n\n---\n\n## Layout System\n\n**Spacing Primitives:** Use Tailwind units of **2, 4, 6, 8, 12, 16** consistently\n- Component padding: `p-4` standard, `p-6` for cards\n- Section spacing: `gap-4` for tight groups, `gap-8` for major sections\n- Page margins: `px-6 py-8` on mobile, `px-8 py-12` on desktop\n\n**Container Strategy:**\n- **Full App:** `max-w-screen-2xl mx-auto` (1536px max)\n- **Content Panels:** `max-w-4xl` for forms and single-column content\n- **Dashboard Grid:** No max-width, use full available space\n\n**Grid Patterns:**\n- **Roster Board:** 4-column kanban (Confirmed/Maybe/Declined/No Reply) - equal width on desktop, stack on mobile\n- **Job Cards Grid:** `grid-cols-1 md:grid-cols-2 lg:grid-cols-3` with `gap-4`\n- **Contact List:** Single column with grouped sections\n\n---\n\n## Component Library\n\n### Navigation\n**Top Bar:** Fixed header with org logo, navigation tabs (Dashboard/Jobs/Calendar/Contacts/Templates), user menu, and plan badge\n- Height: `h-16`\n- Background: Surface color with subtle border-bottom\n- Tabs use underline indicator on active state (primary color, 2px thick)\n\n### Cards\n**Job Card:**\n- Rounded corners: `rounded-lg`\n- Border: 1px solid border color\n- Shadow: Subtle on hover (`hover:shadow-md`)\n- Header: Job name + location badge\n- Body: Time range, fill indicator (4/6 with progress bar)\n- Footer: Quick actions (View Roster, Edit, Reschedule)\n\n**Contact Card:**\n- Compact horizontal layout\n- Avatar (initials on colored background) + name + status badge\n- Metadata: Phone, email, last contacted\n- Hover: Slight elevation and border highlight\n\n### Roster Board (Kanban)\n**Columns:** Equal-width flex columns with headers showing count\n- **Header:** Column title + count badge (e.g., \"Confirmed (4)\")\n- **Cards:** Contact cards with drag handles, reply snippet, timestamp\n- **Empty State:** Dashed border with centered icon + text\n\n**Contact Drawer:** Slide-in panel from right (33% width on desktop, full on mobile)\n- Thread view: Messages with timestamps, delivery status icons\n- Quick reply: Fixed bottom bar with Y/N/shift option buttons\n\n### Forms\n**Input Fields:**\n- Height: `h-11` \n- Border: 1px solid border color (darker on focus)\n- Background: Match mode (light surface in light mode, darker surface in dark mode)\n- Placeholder text: Text secondary color\n- Label: Small text above, medium weight\n\n**Buttons:**\n- **Primary:** Primary color bg, white text, `px-4 py-2`, medium weight, `rounded-md`\n- **Secondary:** Border style, text color matches primary\n- **Destructive:** Destructive color bg for critical actions\n\n### Calendar\n**Month View Grid:** 7-column grid for days, minimal borders\n- **Day Cell:** Small day number in corner, job bubbles below (max 3 visible, \"+2 more\" indicator)\n- **Job Bubble:** Small rounded pill with color-coded left border, truncated name, time\n\n**Week View:** Timeline grid with hourly slots, jobs as positioned blocks\n\n### Status Indicators\n**Badges:**\n- **Confirmed:** Success color, `rounded-full px-2 py-1`, small text\n- **Maybe:** Warning color\n- **Declined:** Destructive color\n- **No Reply:** Border style with muted text\n\n**Progress Bar:**\n- Height: `h-2`, rounded, background border color\n- Fill: Primary color for confirmed percentage\n\n### Data Display\n**Message Thread:**\n- Outbound: Right-aligned, primary color background (10% opacity), rounded\n- Inbound: Left-aligned, surface color, rounded\n- Timestamps: Caption size, secondary text, below each message\n- Status icons: Delivered/Read indicators (Material Icons: check, done_all)\n\n---\n\n## Animations\n\n**Minimal, Purposeful Only:**\n- **Transitions:** 150ms ease for hover states, 200ms for modal/drawer open\n- **Progress:** Indeterminate spinner for loading states (primary color)\n- **No scroll animations, parallax, or decorative motion**\n\n---\n\n## Images\n\n**Minimal Image Usage:**\n- **No hero image** - This is a utility app, lead directly with job dashboard or action buttons\n- **Avatars:** Use initials on colored backgrounds (deterministic color from name hash)\n- **Empty States:** Simple illustrations (e.g., undraw.co style) for \"No jobs yet\", \"No contacts\"\n- **Icons:** Material Icons CDN for consistent system icons (calendar, message, person, check_circle, etc.)\n\n---\n\n## Key Screens Structure\n\n**Dashboard:** Job cards grid with status filters at top, \"Create Job\" prominent button, upcoming jobs section\n**Job Detail/Roster:** Split view - left: job info panel, right: 4-column kanban board, floating contact drawer\n**Calendar:** Month/week toggle, filter by status, click job opens detail modal\n**Compose Send:** Stepped form (1. Template selection, 2. Audience picker, 3. Preview & send)\n**Contacts:** Table view with search, filters (tags/skills), bulk actions toolbar, CSV import button\n**Billing:** Clean panel showing plan name, credits remaining (large number), usage chart, \"Manage Subscription\" button (Stripe portal link)","size_bytes":7313},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/pages/send-message.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useRoute, Link, useLocation } from \"wouter\";\nimport { Card, CardContent, CardHeader } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Avatar, AvatarFallback } from \"@/components/ui/avatar\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { ArrowLeft, Send, Users } from \"lucide-react\";\nimport type { Template, Contact, Job } from \"@shared/schema\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport default function SendMessage() {\n  const [, params] = useRoute(\"/jobs/:id/send\");\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const [selectedTemplate, setSelectedTemplate] = useState<string>(\"\");\n  const [selectedContacts, setSelectedContacts] = useState<string[]>([]);\n  const [messageContent, setMessageContent] = useState(\"\");\n\n  const { data: job } = useQuery<Job>({\n    queryKey: [\"/api/jobs\", params?.id],\n  });\n\n  const { data: templates } = useQuery<Template[]>({\n    queryKey: [\"/api/templates\"],\n  });\n\n  const { data: contacts } = useQuery<Contact[]>({\n    queryKey: [\"/api/contacts\"],\n  });\n\n  const sendMutation = useMutation({\n    mutationFn: (data: { jobId: string; templateId: string; contactIds: string[] }) =>\n      apiRequest(\"POST\", \"/api/send-message\", data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/jobs\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/messages\"] });\n      toast({\n        title: \"Messages Sent\",\n        description: `Successfully sent messages to ${selectedContacts.length} contact(s)`,\n      });\n      setLocation(`/jobs/${params?.id}/roster`);\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to send messages\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleTemplateChange = (templateId: string) => {\n    setSelectedTemplate(templateId);\n    const template = templates?.find((t) => t.id === templateId);\n    if (template) {\n      setMessageContent(template.content);\n    }\n  };\n\n  const toggleContact = (contactId: string) => {\n    setSelectedContacts((prev) =>\n      prev.includes(contactId)\n        ? prev.filter((id) => id !== contactId)\n        : [...prev, contactId]\n    );\n  };\n\n  const selectAll = () => {\n    if (contacts) {\n      const activeContacts = contacts.filter((c) => !c.isOptedOut);\n      setSelectedContacts(activeContacts.map((c) => c.id));\n    }\n  };\n\n  const deselectAll = () => {\n    setSelectedContacts([]);\n  };\n\n  const handleSend = () => {\n    if (!params?.id || !selectedTemplate || selectedContacts.length === 0) {\n      toast({\n        title: \"Validation Error\",\n        description: \"Please select a template and at least one contact\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    sendMutation.mutate({\n      jobId: params.id,\n      templateId: selectedTemplate,\n      contactIds: selectedContacts,\n    });\n  };\n\n  return (\n    <div className=\"max-w-4xl space-y-6\">\n      <div>\n        <Link href={`/jobs/${params?.id}/roster`}>\n          <a data-testid=\"link-back-roster\">\n            <Button variant=\"ghost\" size=\"sm\" className=\"gap-2 mb-4\">\n              <ArrowLeft className=\"h-4 w-4\" />\n              Back to Roster\n            </Button>\n          </a>\n        </Link>\n        <h1 className=\"text-3xl font-semibold\" data-testid=\"text-page-title\">Send Message</h1>\n        <p className=\"text-muted-foreground mt-1\">\n          {job?.name} - Broadcast to your crew\n        </p>\n      </div>\n\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n        <div className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <h2 className=\"text-lg font-semibold\">1. Select Template</h2>\n            </CardHeader>\n            <CardContent>\n              <Select value={selectedTemplate} onValueChange={handleTemplateChange}>\n                <SelectTrigger data-testid=\"select-template\">\n                  <SelectValue placeholder=\"Choose a message template\" />\n                </SelectTrigger>\n                <SelectContent>\n                  {templates?.map((template) => (\n                    <SelectItem key={template.id} value={template.id}>\n                      {template.name}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader>\n              <div className=\"flex items-center justify-between\">\n                <h2 className=\"text-lg font-semibold\">2. Select Recipients</h2>\n                <div className=\"flex gap-2\">\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={selectAll}\n                    data-testid=\"button-select-all\"\n                  >\n                    Select All\n                  </Button>\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={deselectAll}\n                    data-testid=\"button-deselect-all\"\n                  >\n                    Deselect All\n                  </Button>\n                </div>\n              </div>\n              <Badge variant=\"secondary\" className=\"w-fit mt-2\">\n                {selectedContacts.length} selected\n              </Badge>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-3 max-h-96 overflow-y-auto\">\n                {contacts?.filter((c) => !c.isOptedOut).map((contact) => (\n                  <div\n                    key={contact.id}\n                    className=\"flex items-center gap-3 p-3 rounded-lg border hover-elevate cursor-pointer\"\n                    onClick={() => toggleContact(contact.id)}\n                    data-testid={`contact-item-${contact.id}`}\n                  >\n                    <Checkbox\n                      checked={selectedContacts.includes(contact.id)}\n                      onCheckedChange={() => toggleContact(contact.id)}\n                    />\n                    <Avatar className=\"h-10 w-10\">\n                      <AvatarFallback>\n                        {contact.firstName[0]}{contact.lastName[0]}\n                      </AvatarFallback>\n                    </Avatar>\n                    <div className=\"flex-1 min-w-0\">\n                      <div className=\"font-medium text-sm\">\n                        {contact.firstName} {contact.lastName}\n                      </div>\n                      <div className=\"text-xs text-muted-foreground truncate\">{contact.phone}</div>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        <div className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <h2 className=\"text-lg font-semibold\">3. Preview & Send</h2>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div>\n                <label className=\"text-sm font-medium mb-2 block\">Message Preview</label>\n                <div className=\"bg-muted/50 p-4 rounded-lg min-h-32\">\n                  <p className=\"text-sm whitespace-pre-wrap\">\n                    {messageContent || \"Select a template to preview the message\"}\n                  </p>\n                </div>\n              </div>\n\n              <div className=\"space-y-2\">\n                <div className=\"flex items-center justify-between text-sm\">\n                  <span className=\"text-muted-foreground\">Recipients:</span>\n                  <span className=\"font-medium\">{selectedContacts.length}</span>\n                </div>\n                <div className=\"flex items-center justify-between text-sm\">\n                  <span className=\"text-muted-foreground\">Estimated Credits:</span>\n                  <span className=\"font-medium\">{selectedContacts.length}</span>\n                </div>\n              </div>\n\n              <Button\n                className=\"w-full gap-2\"\n                onClick={handleSend}\n                disabled={!selectedTemplate || selectedContacts.length === 0 || sendMutation.isPending}\n                data-testid=\"button-send-messages\"\n              >\n                {sendMutation.isPending ? (\n                  <div className=\"animate-spin w-4 h-4 border-2 border-primary-foreground border-t-transparent rounded-full\" />\n                ) : (\n                  <Send className=\"h-4 w-4\" />\n                )}\n                Send to {selectedContacts.length} Contact{selectedContacts.length !== 1 ? 's' : ''}\n              </Button>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":9039},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"server/db-storage.ts":{"content":"import { drizzle } from \"drizzle-orm/neon-serverless\";\nimport { Pool, neonConfig } from \"@neondatabase/serverless\";\nimport { eq, and, desc } from \"drizzle-orm\";\nimport ws from \"ws\";\n\nneonConfig.webSocketConstructor = ws;\nimport {\n  organizations, users, contacts, jobs, templates, campaigns, messages,\n  availability, subscriptions,\n  passwordResetTokens, subscriptionPlans, smsBundles, creditGrants, creditTransactions,\n  adminUsers,\n  type Organization, type InsertOrganization,\n  type User, type InsertUser,\n  type Contact, type InsertContact,\n  type Job, type InsertJob,\n  type Template, type InsertTemplate,\n  type Campaign, type InsertCampaign,\n  type Message, type InsertMessage,\n  type Availability, type InsertAvailability,\n  type Subscription, type InsertSubscription,\n  type PasswordResetToken, type InsertPasswordResetToken,\n  type SubscriptionPlan, type InsertSubscriptionPlan,\n  type SmsBundle, type InsertSmsBundle,\n  type CreditGrant, type InsertCreditGrant,\n  type CreditTransaction, type InsertCreditTransaction,\n  type AdminUser, type InsertAdminUser,\n} from \"@shared/schema\";\nimport type { IStorage } from \"./storage\";\n\nexport class DbStorage implements IStorage {\n  private db;\n\n  constructor() {\n    const pool = new Pool({ connectionString: process.env.DATABASE_URL! });\n    this.db = drizzle(pool);\n  }\n\n  // Organization methods\n  async getOrganization(id: string): Promise<Organization | undefined> {\n    const result = await this.db.select().from(organizations).where(eq(organizations.id, id));\n    return result[0];\n  }\n\n  async createOrganization(org: InsertOrganization): Promise<Organization> {\n    const result = await this.db.insert(organizations).values(org).returning();\n    return result[0];\n  }\n\n  async updateOrganization(id: string, updates: Partial<InsertOrganization>): Promise<Organization> {\n    const result = await this.db\n      .update(organizations)\n      .set(updates)\n      .where(eq(organizations.id, id))\n      .returning();\n    return result[0];\n  }\n\n  async getUsersInOrganization(organizationId: string): Promise<User[]> {\n    return await this.db.select().from(users).where(eq(users.organizationId, organizationId));\n  }\n\n  async updateUserTeamRole(userId: string, teamRole: string): Promise<User> {\n    const result = await this.db\n      .update(users)\n      .set({ teamRole })\n      .where(eq(users.id, userId))\n      .returning();\n    return result[0];\n  }\n\n  // Admin user methods\n  async getAllAdminUsers(): Promise<AdminUser[]> {\n    return await this.db.select().from(adminUsers);\n  }\n\n  async getAdminUserByEmail(email: string): Promise<AdminUser | undefined> {\n    const result = await this.db.select().from(adminUsers).where(eq(adminUsers.email, email));\n    return result[0];\n  }\n\n  async createAdminUser(insertAdminUser: InsertAdminUser): Promise<AdminUser> {\n    const result = await this.db.insert(adminUsers).values(insertAdminUser).returning();\n    return result[0];\n  }\n\n  async deleteAdminUser(id: string): Promise<void> {\n    await this.db.delete(adminUsers).where(eq(adminUsers.id, id));\n  }\n\n  async getUser(id: string): Promise<User | undefined> {\n    const result = await this.db.select().from(users).where(eq(users.id, id));\n    return result[0];\n  }\n\n  async getAllUsers(): Promise<User[]> {\n    return await this.db.select().from(users);\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    const result = await this.db.select().from(users).where(eq(users.username, username));\n    return result[0];\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    const result = await this.db.select().from(users).where(eq(users.email, email));\n    return result[0];\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    let userData = insertUser;\n    \n    // If no organizationId provided, create a new organization for the user\n    if (!insertUser.organizationId) {\n      const org = await this.createOrganization({\n        name: `${insertUser.username}'s Organization`,\n      });\n      \n      userData = {\n        ...insertUser,\n        organizationId: org.id,\n        teamRole: insertUser.teamRole || \"owner\",\n      };\n    }\n    \n    // Create user\n    const result = await this.db.insert(users).values(userData).returning();\n    const user = result[0];\n    \n    // Create trial subscription (30 days)\n    const trialEndsAt = new Date(Date.now() + 30 * 24 * 60 * 60 * 1000);\n    await this.createSubscription(user.id, {\n      planId: null,\n      status: \"trial\",\n      trialEndsAt,\n      currentPeriodStart: null,\n      currentPeriodEnd: null,\n      stripeSubscriptionId: null,\n    });\n    \n    // Grant 10 trial credits (expires with trial)\n    await this.createCreditGrant(user.id, {\n      userId: user.id,\n      sourceType: \"trial\",\n      sourceRef: null,\n      creditsGranted: 10,\n      creditsConsumed: 0,\n      creditsRemaining: 10,\n      expiresAt: trialEndsAt,\n    });\n    \n    return user;\n  }\n\n  async updateUser(id: string, updates: Partial<InsertUser>): Promise<User> {\n    const result = await this.db\n      .update(users)\n      .set(updates)\n      .where(eq(users.id, id))\n      .returning();\n    return result[0];\n  }\n\n  async updateUserPassword(userId: string, password: string): Promise<User> {\n    const result = await this.db\n      .update(users)\n      .set({ password })\n      .where(eq(users.id, userId))\n      .returning();\n    return result[0];\n  }\n\n  async updateUserStripeInfo(userId: string, stripeCustomerId: string, stripeSubscriptionId: string): Promise<User> {\n    const result = await this.db\n      .update(users)\n      .set({ stripeCustomerId, stripeSubscriptionId })\n      .where(eq(users.id, userId))\n      .returning();\n    return result[0];\n  }\n\n  async disableUser(userId: string): Promise<User> {\n    const result = await this.db\n      .update(users)\n      .set({ isActive: false })\n      .where(eq(users.id, userId))\n      .returning();\n    return result[0];\n  }\n\n  async enableUser(userId: string): Promise<User> {\n    const result = await this.db\n      .update(users)\n      .set({ isActive: true })\n      .where(eq(users.id, userId))\n      .returning();\n    return result[0];\n  }\n\n  async createPasswordResetToken(insertToken: InsertPasswordResetToken): Promise<PasswordResetToken> {\n    const result = await this.db.insert(passwordResetTokens).values(insertToken).returning();\n    return result[0];\n  }\n\n  async getPasswordResetToken(token: string): Promise<PasswordResetToken | undefined> {\n    const result = await this.db.select().from(passwordResetTokens).where(eq(passwordResetTokens.token, token));\n    return result[0];\n  }\n\n  async deletePasswordResetToken(token: string): Promise<void> {\n    await this.db.delete(passwordResetTokens).where(eq(passwordResetTokens.token, token));\n  }\n\n  async getContacts(userId: string): Promise<Contact[]> {\n    return await this.db.select().from(contacts).where(eq(contacts.userId, userId));\n  }\n\n  async getContact(id: string): Promise<Contact | undefined> {\n    const result = await this.db.select().from(contacts).where(eq(contacts.id, id));\n    return result[0];\n  }\n\n  async getContactByRosterToken(token: string): Promise<Contact | undefined> {\n    const result = await this.db.select().from(contacts).where(eq(contacts.rosterToken, token));\n    return result[0];\n  }\n\n  async createContact(userId: string, contact: InsertContact): Promise<Contact> {\n    const result = await this.db.insert(contacts).values({ ...contact, userId }).returning();\n    return result[0];\n  }\n\n  async updateContact(id: string, updates: Partial<InsertContact>): Promise<Contact> {\n    const result = await this.db\n      .update(contacts)\n      .set({ ...updates, updatedAt: new Date() })\n      .where(eq(contacts.id, id))\n      .returning();\n    return result[0];\n  }\n\n  async deleteContact(id: string): Promise<void> {\n    await this.db.delete(contacts).where(eq(contacts.id, id));\n  }\n\n  async getJobs(userId: string): Promise<Job[]> {\n    return await this.db.select().from(jobs).where(eq(jobs.userId, userId));\n  }\n\n  async getJob(id: string): Promise<Job | undefined> {\n    const result = await this.db.select().from(jobs).where(eq(jobs.id, id));\n    return result[0];\n  }\n\n  async createJob(userId: string, job: InsertJob): Promise<Job> {\n    const result = await this.db.insert(jobs).values({ ...job, userId }).returning();\n    return result[0];\n  }\n\n  async updateJob(id: string, updates: Partial<InsertJob>): Promise<Job> {\n    const result = await this.db\n      .update(jobs)\n      .set({ ...updates, updatedAt: new Date() })\n      .where(eq(jobs.id, id))\n      .returning();\n    return result[0];\n  }\n\n  async deleteJob(id: string): Promise<void> {\n    await this.db.delete(jobs).where(eq(jobs.id, id));\n  }\n\n  async getTemplates(userId: string): Promise<Template[]> {\n    return await this.db.select().from(templates).where(eq(templates.userId, userId));\n  }\n\n  async getTemplate(id: string): Promise<Template | undefined> {\n    const result = await this.db.select().from(templates).where(eq(templates.id, id));\n    return result[0];\n  }\n\n  async createTemplate(userId: string, template: InsertTemplate): Promise<Template> {\n    const result = await this.db.insert(templates).values({ ...template, userId }).returning();\n    return result[0];\n  }\n\n  async deleteTemplate(id: string): Promise<void> {\n    await this.db.delete(templates).where(eq(templates.id, id));\n  }\n\n  async createCampaign(userId: string, campaign: InsertCampaign): Promise<Campaign> {\n    const result = await this.db.insert(campaigns).values({ ...campaign, userId }).returning();\n    return result[0];\n  }\n\n  async getCampaignsForJob(jobId: string): Promise<Campaign[]> {\n    return await this.db.select().from(campaigns).where(eq(campaigns.jobId, jobId));\n  }\n\n  async getMessages(contactId: string): Promise<Message[]> {\n    return await this.db.select().from(messages).where(eq(messages.contactId, contactId));\n  }\n\n  async getMessagesForJob(jobId: string): Promise<Message[]> {\n    return await this.db.select().from(messages).where(eq(messages.jobId, jobId));\n  }\n\n  async getAllMessagesForUser(userId: string): Promise<Message[]> {\n    return await this.db.select().from(messages)\n      .where(eq(messages.userId, userId))\n      .orderBy(desc(messages.createdAt));\n  }\n\n  async createMessage(userId: string, message: InsertMessage): Promise<Message> {\n    const result = await this.db.insert(messages).values({ ...message, userId }).returning();\n    return result[0];\n  }\n\n  async updateMessageStatus(id: string, status: string): Promise<Message> {\n    const result = await this.db\n      .update(messages)\n      .set({ status, updatedAt: new Date() })\n      .where(eq(messages.id, id))\n      .returning();\n    return result[0];\n  }\n\n  async getAvailability(jobId: string): Promise<Availability[]> {\n    return await this.db.select().from(availability).where(eq(availability.jobId, jobId));\n  }\n\n  async getAllAvailability(userId: string): Promise<Availability[]> {\n    // Get all availability entries for jobs belonging to this user\n    const result = await this.db\n      .select({ availability: availability })\n      .from(availability)\n      .innerJoin(jobs, eq(availability.jobId, jobs.id))\n      .where(eq(jobs.userId, userId));\n    return result.map(r => r.availability);\n  }\n\n  async getAvailabilityByContact(contactId: string): Promise<Availability[]> {\n    return await this.db.select().from(availability).where(eq(availability.contactId, contactId));\n  }\n\n  async getAvailabilityForContact(jobId: string, contactId: string): Promise<Availability | undefined> {\n    const result = await this.db\n      .select()\n      .from(availability)\n      .where(and(eq(availability.jobId, jobId), eq(availability.contactId, contactId)));\n    return result[0];\n  }\n\n  async getConfirmedContactsForJob(jobId: string): Promise<Contact[]> {\n    const result = await this.db\n      .select({ contact: contacts })\n      .from(availability)\n      .innerJoin(contacts, eq(availability.contactId, contacts.id))\n      .where(and(eq(availability.jobId, jobId), eq(availability.status, \"confirmed\")));\n    return result.map(r => r.contact);\n  }\n\n  async getCurrentJobForContact(contactId: string): Promise<Job | undefined> {\n    const result = await this.db\n      .select({ job: jobs })\n      .from(availability)\n      .innerJoin(jobs, eq(availability.jobId, jobs.id))\n      .where(and(eq(availability.contactId, contactId), eq(availability.status, \"confirmed\")))\n      .orderBy(jobs.startTime)\n      .limit(1);\n    return result[0]?.job;\n  }\n\n  async createAvailability(avail: InsertAvailability): Promise<Availability> {\n    const result = await this.db.insert(availability).values(avail).returning();\n    return result[0];\n  }\n\n  async updateAvailability(id: string, updates: Partial<InsertAvailability>): Promise<Availability> {\n    const result = await this.db\n      .update(availability)\n      .set({ ...updates, updatedAt: new Date() })\n      .where(eq(availability.id, id))\n      .returning();\n    return result[0];\n  }\n\n  async getSubscription(userId: string): Promise<Subscription | undefined> {\n    const result = await this.db.select().from(subscriptions).where(eq(subscriptions.userId, userId));\n    return result[0];\n  }\n\n  async getAllSubscriptions(): Promise<Subscription[]> {\n    return await this.db.select().from(subscriptions);\n  }\n\n  async createSubscription(userId: string, subscription: InsertSubscription): Promise<Subscription> {\n    const result = await this.db.insert(subscriptions).values({ ...subscription, userId }).returning();\n    return result[0];\n  }\n\n  async updateSubscription(userId: string, updates: Partial<InsertSubscription>): Promise<Subscription> {\n    const result = await this.db\n      .update(subscriptions)\n      .set({ ...updates, updatedAt: new Date() })\n      .where(eq(subscriptions.userId, userId))\n      .returning();\n    return result[0];\n  }\n\n  // Credit system methods\n  async getSubscriptionPlans(): Promise<SubscriptionPlan[]> {\n    return await this.db.select().from(subscriptionPlans);\n  }\n\n  async getSubscriptionPlan(id: string): Promise<SubscriptionPlan | undefined> {\n    const result = await this.db.select().from(subscriptionPlans).where(eq(subscriptionPlans.id, id));\n    return result[0];\n  }\n\n  async createSubscriptionPlan(plan: InsertSubscriptionPlan): Promise<SubscriptionPlan> {\n    const result = await this.db.insert(subscriptionPlans).values(plan).returning();\n    return result[0];\n  }\n\n  async updateSubscriptionPlanPricing(id: string, prices: { priceGBP: number; priceUSD: number; priceEUR: number }): Promise<SubscriptionPlan> {\n    const result = await this.db\n      .update(subscriptionPlans)\n      .set(prices)\n      .where(eq(subscriptionPlans.id, id))\n      .returning();\n    return result[0];\n  }\n\n  async getSmsBundles(): Promise<SmsBundle[]> {\n    return await this.db.select().from(smsBundles);\n  }\n\n  async getSmsBundle(id: string): Promise<SmsBundle | undefined> {\n    const result = await this.db.select().from(smsBundles).where(eq(smsBundles.id, id));\n    return result[0];\n  }\n\n  async createSmsBundle(bundle: InsertSmsBundle): Promise<SmsBundle> {\n    const result = await this.db.insert(smsBundles).values(bundle).returning();\n    return result[0];\n  }\n\n  async updateSmsBundlePricing(id: string, prices: { priceGBP: number; priceUSD: number; priceEUR: number }): Promise<SmsBundle> {\n    const result = await this.db\n      .update(smsBundles)\n      .set(prices)\n      .where(eq(smsBundles.id, id))\n      .returning();\n    return result[0];\n  }\n\n  async getCreditGrants(userId: string): Promise<CreditGrant[]> {\n    return await this.db.select().from(creditGrants).where(eq(creditGrants.userId, userId));\n  }\n\n  async createCreditGrant(userId: string, grant: InsertCreditGrant): Promise<CreditGrant> {\n    const result = await this.db.insert(creditGrants).values({ ...grant, userId }).returning();\n    return result[0];\n  }\n\n  async updateCreditGrant(id: string, updates: Partial<InsertCreditGrant>): Promise<CreditGrant> {\n    const result = await this.db\n      .update(creditGrants)\n      .set(updates)\n      .where(eq(creditGrants.id, id))\n      .returning();\n    return result[0];\n  }\n\n  async getCreditTransactions(userId: string): Promise<CreditTransaction[]> {\n    return await this.db.select().from(creditTransactions).where(eq(creditTransactions.userId, userId));\n  }\n\n  async createCreditTransaction(userId: string, transaction: InsertCreditTransaction): Promise<CreditTransaction> {\n    const result = await this.db.insert(creditTransactions).values({ ...transaction, userId }).returning();\n    return result[0];\n  }\n\n  async getTotalCredits(userId: string): Promise<number> {\n    const grants = await this.getCreditGrants(userId);\n    return grants.reduce((total, grant) => total + grant.creditsRemaining, 0);\n  }\n\n  async consumeCreditsAtomic(\n    userId: string,\n    amount: number,\n    reason: string,\n    messageId: string | null\n  ): Promise<CreditTransaction[]> {\n    if (amount <= 0) {\n      throw new Error(\"Amount must be positive\");\n    }\n\n    // Use database transaction for atomicity\n    return await this.db.transaction(async (tx) => {\n      // Get all active grants sorted by expiry (earliest first), with FOR UPDATE lock\n      const now = new Date();\n      const allGrants = await tx\n        .select()\n        .from(creditGrants)\n        .where(eq(creditGrants.userId, userId))\n        .for(\"update\");\n\n      const activeGrants = allGrants\n        .filter(g => g.creditsRemaining > 0)\n        .filter(g => !g.expiresAt || g.expiresAt > now)\n        .sort((a, b) => {\n          if (a.expiresAt && b.expiresAt) {\n            return a.expiresAt.getTime() - b.expiresAt.getTime();\n          }\n          if (a.expiresAt && !b.expiresAt) return -1;\n          if (!a.expiresAt && b.expiresAt) return 1;\n          return a.createdAt.getTime() - b.createdAt.getTime();\n        });\n\n      // Check if user has enough credits\n      const totalAvailable = activeGrants.reduce((sum, g) => sum + g.creditsRemaining, 0);\n      if (totalAvailable < amount) {\n        throw new Error(`Insufficient credits. Available: ${totalAvailable}, Required: ${amount}`);\n      }\n\n      // Consume credits from grants using FIFO\n      let remaining = amount;\n      const transactions: CreditTransaction[] = [];\n\n      for (const grant of activeGrants) {\n        if (remaining === 0) break;\n\n        const toConsume = Math.min(remaining, grant.creditsRemaining);\n        \n        // Update grant\n        await tx\n          .update(creditGrants)\n          .set({\n            creditsConsumed: grant.creditsConsumed + toConsume,\n            creditsRemaining: grant.creditsRemaining - toConsume,\n          })\n          .where(eq(creditGrants.id, grant.id));\n\n        // Create transaction record\n        const txResult = await tx\n          .insert(creditTransactions)\n          .values({\n            userId,\n            grantId: grant.id,\n            messageId,\n            delta: -toConsume,\n            reason,\n          })\n          .returning();\n\n        transactions.push(txResult[0]);\n        remaining -= toConsume;\n      }\n\n      return transactions;\n    });\n  }\n\n  async refundCreditsAtomic(\n    userId: string,\n    transactionIds: string[],\n    reason: string\n  ): Promise<CreditTransaction[]> {\n    // Use database transaction for atomicity\n    return await this.db.transaction(async (tx) => {\n      const refundTransactions: CreditTransaction[] = [];\n\n      for (const txId of transactionIds) {\n        const originalTxResult = await tx\n          .select()\n          .from(creditTransactions)\n          .where(eq(creditTransactions.id, txId));\n\n        const originalTx = originalTxResult[0];\n\n        if (!originalTx) {\n          throw new Error(`Transaction ${txId} not found`);\n        }\n\n        if (originalTx.userId !== userId) {\n          throw new Error(`Transaction ${txId} does not belong to user`);\n        }\n\n        if (originalTx.delta >= 0) {\n          throw new Error(`Transaction ${txId} is not a consumption`);\n        }\n\n        // Get the grant and lock it\n        const grantResult = await tx\n          .select()\n          .from(creditGrants)\n          .where(eq(creditGrants.id, originalTx.grantId))\n          .for(\"update\");\n\n        const grant = grantResult[0];\n\n        if (!grant) {\n          throw new Error(`Grant ${originalTx.grantId} not found`);\n        }\n\n        const refundAmount = Math.abs(originalTx.delta);\n\n        // Update grant to restore credits\n        await tx\n          .update(creditGrants)\n          .set({\n            creditsConsumed: grant.creditsConsumed - refundAmount,\n            creditsRemaining: grant.creditsRemaining + refundAmount,\n          })\n          .where(eq(creditGrants.id, grant.id));\n\n        // Create refund transaction\n        const refundTxResult = await tx\n          .insert(creditTransactions)\n          .values({\n            userId,\n            grantId: grant.id,\n            messageId: originalTx.messageId,\n            delta: refundAmount,\n            reason: `Refund: ${reason}`,\n          })\n          .returning();\n\n        refundTransactions.push(refundTxResult[0]);\n      }\n\n      return refundTransactions;\n    });\n  }\n}\n","size_bytes":21191},"client/src/pages/calendar.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { ChevronLeft, ChevronRight, Calendar as CalendarIcon } from \"lucide-react\";\nimport { format, startOfMonth, endOfMonth, eachDayOfInterval, isSameMonth, isSameDay, startOfWeek, endOfWeek, addMonths, subMonths } from \"date-fns\";\nimport type { Job } from \"@shared/schema\";\nimport { Link } from \"wouter\";\n\ntype JobWithAvailability = Job & {\n  availabilityCounts: {\n    confirmed: number;\n    maybe: number;\n    declined: number;\n    noReply: number;\n  };\n};\n\nexport default function Calendar() {\n  const [currentMonth, setCurrentMonth] = useState(new Date());\n\n  const { data: jobs, isLoading } = useQuery<JobWithAvailability[]>({\n    queryKey: [\"/api/jobs\"],\n  });\n\n  const monthStart = startOfMonth(currentMonth);\n  const monthEnd = endOfMonth(currentMonth);\n  const calendarStart = startOfWeek(monthStart);\n  const calendarEnd = endOfWeek(monthEnd);\n  const calendarDays = eachDayOfInterval({ start: calendarStart, end: calendarEnd });\n\n  const getJobsForDay = (day: Date) => {\n    return jobs?.filter((job) => {\n      const jobDate = new Date(job.startTime);\n      return isSameDay(jobDate, day);\n    }) || [];\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center min-h-[400px]\">\n        <div className=\"animate-spin w-8 h-8 border-4 border-primary border-t-transparent rounded-full\" aria-label=\"Loading\" />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex flex-col sm:flex-row items-start sm:items-center justify-between gap-4\">\n        <div>\n          <h1 className=\"text-3xl font-semibold\" data-testid=\"text-page-title\">Calendar</h1>\n          <p className=\"text-muted-foreground mt-1\">View all jobs by date and track confirmations</p>\n        </div>\n      </div>\n\n      <Card>\n        <CardContent className=\"p-6\">\n          <div className=\"flex items-center justify-between mb-6\">\n            <h2 className=\"text-2xl font-semibold\" data-testid=\"text-current-month\">\n              {format(currentMonth, \"MMMM yyyy\")}\n            </h2>\n            <div className=\"flex gap-2\">\n              <Button\n                variant=\"outline\"\n                size=\"icon\"\n                onClick={() => setCurrentMonth(subMonths(currentMonth, 1))}\n                data-testid=\"button-prev-month\"\n              >\n                <ChevronLeft className=\"h-4 w-4\" />\n              </Button>\n              <Button\n                variant=\"outline\"\n                onClick={() => setCurrentMonth(new Date())}\n                data-testid=\"button-today\"\n              >\n                Today\n              </Button>\n              <Button\n                variant=\"outline\"\n                size=\"icon\"\n                onClick={() => setCurrentMonth(addMonths(currentMonth, 1))}\n                data-testid=\"button-next-month\"\n              >\n                <ChevronRight className=\"h-4 w-4\" />\n              </Button>\n            </div>\n          </div>\n\n          <div className=\"grid grid-cols-7 gap-px bg-border rounded-lg overflow-hidden\">\n            {[\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"].map((day) => (\n              <div key={day} className=\"bg-muted p-3 text-center text-sm font-medium\">\n                {day}\n              </div>\n            ))}\n            {calendarDays.map((day, index) => {\n              const dayJobs = getJobsForDay(day);\n              const isCurrentMonth = isSameMonth(day, currentMonth);\n              const isToday = isSameDay(day, new Date());\n\n              return (\n                <div\n                  key={index}\n                  className={`bg-card min-h-24 p-2 ${!isCurrentMonth ? \"opacity-50\" : \"\"}`}\n                  data-testid={`calendar-day-${format(day, \"yyyy-MM-dd\")}`}\n                >\n                  <div className={`text-sm mb-2 ${isToday ? \"font-semibold text-primary\" : \"\"}`}>\n                    {format(day, \"d\")}\n                  </div>\n                  <div className=\"space-y-1\">\n                    {dayJobs.slice(0, 2).map((job) => (\n                      <Link key={job.id} href={`/jobs/${job.id}/roster`}>\n                        <a data-testid={`job-link-${job.id}`}>\n                          <div className=\"bg-primary/10 border-l-2 border-primary px-2 py-1 rounded-sm hover-elevate cursor-pointer\">\n                            <div className=\"text-xs font-medium truncate\">{job.name}</div>\n                            <div className=\"text-xs text-muted-foreground\">\n                              {format(new Date(job.startTime), \"h:mm a\")}\n                            </div>\n                          </div>\n                        </a>\n                      </Link>\n                    ))}\n                    {dayJobs.length > 2 && (\n                      <div className=\"text-xs text-muted-foreground px-2\">\n                        +{dayJobs.length - 2} more\n                      </div>\n                    )}\n                  </div>\n                </div>\n              );\n            })}\n          </div>\n        </CardContent>\n      </Card>\n\n      {jobs && jobs.length === 0 && (\n        <Card>\n          <CardContent className=\"p-12 text-center\">\n            <CalendarIcon className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n            <h3 className=\"text-lg font-medium mb-2\">No jobs scheduled</h3>\n            <p className=\"text-muted-foreground mb-6\">Create jobs to see them on the calendar</p>\n            <Link href=\"/jobs/new\">\n              <a data-testid=\"link-create-job\">\n                <Button>Create Job</Button>\n              </a>\n            </Link>\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  );\n}\n","size_bytes":5809},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/app-header.tsx":{"content":"import { Link, useLocation } from \"wouter\";\nimport { ThemeToggle } from \"./theme-toggle\";\nimport { Button } from \"./ui/button\";\nimport { Badge } from \"./ui/badge\";\nimport { Users, Calendar, FileText, Briefcase, CreditCard, LogOut, Shield, Settings, Menu, MessageSquare, ChevronDown, User } from \"lucide-react\";\nimport { useMutation, useQuery } from \"@tanstack/react-query\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport logoImage from \"@assets/heyteam 1_1760877824955.png\";\nimport {\n  Sheet,\n  SheetContent,\n  SheetHeader,\n  SheetTitle,\n  SheetTrigger,\n} from \"@/components/ui/sheet\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport { Avatar, AvatarFallback } from \"@/components/ui/avatar\";\nimport { useState } from \"react\";\n\nconst navItems = [\n  { path: \"/jobs\", label: \"Jobs\", icon: Briefcase },\n  { path: \"/calendar\", label: \"Calendar\", icon: Calendar },\n  { path: \"/contacts\", label: \"Contacts\", icon: Users },\n  { path: \"/templates\", label: \"Templates\", icon: FileText },\n];\n\nexport function AppHeader() {\n  const [location, setLocation] = useLocation();\n  const { toast } = useToast();\n  const [mobileMenuOpen, setMobileMenuOpen] = useState(false);\n\n  const { data: user } = useQuery({\n    queryKey: [\"/api/auth/me\"],\n  });\n\n  const { data: organization } = useQuery({\n    queryKey: [\"/api/organization\"],\n    enabled: !!user,\n  });\n\n  const logoutMutation = useMutation({\n    mutationFn: async () => {\n      return await apiRequest(\"POST\", \"/api/auth/logout\");\n    },\n    onSuccess: () => {\n      // Clear the user query cache, which will trigger App.tsx to redirect to /auth\n      queryClient.setQueryData([\"/api/auth/me\"], null);\n      toast({ title: \"Logged out successfully\" });\n      // Small delay to ensure state updates before redirect\n      setTimeout(() => {\n        setLocation(\"/auth\");\n      }, 100);\n    },\n    onError: () => {\n      toast({\n        title: \"Logout failed\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const getUserInitials = () => {\n    if (user?.firstName && user?.lastName) {\n      return `${user.firstName[0]}${user.lastName[0]}`.toUpperCase();\n    }\n    if (user?.username) {\n      return user.username.substring(0, 2).toUpperCase();\n    }\n    if (user?.email) {\n      return user.email.substring(0, 2).toUpperCase();\n    }\n    return \"U\";\n  };\n\n  const getUserDisplayName = () => {\n    if (user?.firstName && user?.lastName) {\n      return `${user.firstName} ${user.lastName}`;\n    }\n    return user?.username || user?.email || \"User\";\n  };\n\n  return (\n    <header className=\"sticky top-0 z-50 border-b bg-card\">\n      <div className=\"mx-auto max-w-screen-2xl px-3 sm:px-6 py-2 sm:py-3\">\n        <div className=\"flex items-center justify-between gap-2 sm:gap-6\">\n          <div className=\"flex items-center gap-3 sm:gap-8\">\n            <Link href=\"/\">\n              <div className=\"flex items-center gap-2 sm:gap-3 hover-elevate px-1 sm:px-2 py-1 rounded-md cursor-pointer\" data-testid=\"link-home\">\n                <img src={logoImage} alt=\"HeyTeam\" className=\"w-20 sm:w-28\" />\n                {organization && (\n                  <span className=\"text-xs sm:text-sm font-medium text-muted-foreground hidden sm:inline\" data-testid=\"text-organization-name\">\n                    {organization.name}\n                  </span>\n                )}\n              </div>\n            </Link>\n\n            <nav className=\"hidden md:flex items-center gap-1\">\n              {navItems.map((item) => {\n                const Icon = item.icon;\n                const isActive = location === item.path;\n                return (\n                  <Link key={item.path} href={item.path}>\n                    <Button\n                      variant=\"ghost\"\n                      className={`gap-2 ${isActive ? \"bg-accent\" : \"\"}`}\n                      data-testid={`link-nav-${item.label.toLowerCase()}`}\n                    >\n                      <Icon className=\"h-4 w-4\" />\n                      {item.label}\n                    </Button>\n                  </Link>\n                );\n              })}\n            </nav>\n          </div>\n\n          <div className=\"flex items-center gap-2\">\n            {/* Mobile menu - shows on small screens */}\n            <Sheet open={mobileMenuOpen} onOpenChange={setMobileMenuOpen}>\n              <SheetTrigger asChild>\n                <Button variant=\"ghost\" size=\"icon\" className=\"md:hidden\" data-testid=\"button-mobile-menu\">\n                  <Menu className=\"h-5 w-5\" />\n                </Button>\n              </SheetTrigger>\n              <SheetContent side=\"left\" className=\"w-[280px]\">\n                <SheetHeader>\n                  <SheetTitle>Menu</SheetTitle>\n                </SheetHeader>\n                <div className=\"flex flex-col gap-2 mt-6\">\n                  {navItems.map((item) => {\n                    const Icon = item.icon;\n                    const isActive = location === item.path;\n                    return (\n                      <Link key={item.path} href={item.path}>\n                        <Button\n                          variant={isActive ? \"secondary\" : \"ghost\"}\n                          className=\"w-full justify-start gap-3\"\n                          onClick={() => setMobileMenuOpen(false)}\n                          data-testid={`link-mobile-nav-${item.label.toLowerCase()}`}\n                        >\n                          <Icon className=\"h-4 w-4\" />\n                          {item.label}\n                        </Button>\n                      </Link>\n                    );\n                  })}\n                  \n                  <div className=\"border-t my-2\" />\n                  \n                  {/* Setup Menu */}\n                  <div className=\"text-xs font-medium text-muted-foreground px-2 py-1\">Setup</div>\n                  {(user?.teamRole === \"admin\" || user?.teamRole === \"owner\") && (\n                    <Link href=\"/team\">\n                      <Button \n                        variant=\"ghost\" \n                        className=\"w-full justify-start gap-3\"\n                        onClick={() => setMobileMenuOpen(false)}\n                        data-testid=\"link-mobile-team\"\n                      >\n                        <Settings className=\"h-4 w-4\" />\n                        Team\n                      </Button>\n                    </Link>\n                  )}\n                  <Link href=\"/messages\">\n                    <Button \n                      variant=\"ghost\" \n                      className=\"w-full justify-start gap-3\"\n                      onClick={() => setMobileMenuOpen(false)}\n                      data-testid=\"link-mobile-messages\"\n                    >\n                      <MessageSquare className=\"h-4 w-4\" />\n                      Messages\n                    </Button>\n                  </Link>\n                  <Link href=\"/billing\">\n                    <Button \n                      variant=\"ghost\" \n                      className=\"w-full justify-start gap-3\"\n                      onClick={() => setMobileMenuOpen(false)}\n                      data-testid=\"link-mobile-billing\"\n                    >\n                      <CreditCard className=\"h-4 w-4\" />\n                      Billing\n                    </Button>\n                  </Link>\n                  \n                  <div className=\"border-t my-2\" />\n                  \n                  {/* User Menu */}\n                  <div className=\"text-xs font-medium text-muted-foreground px-2 py-1\">Account</div>\n                  <Link href=\"/profile\">\n                    <Button \n                      variant=\"ghost\" \n                      className=\"w-full justify-start gap-3\"\n                      onClick={() => setMobileMenuOpen(false)}\n                      data-testid=\"link-mobile-profile\"\n                    >\n                      <User className=\"h-4 w-4\" />\n                      Edit Profile\n                    </Button>\n                  </Link>\n                  <Button\n                    variant=\"ghost\"\n                    className=\"w-full justify-start gap-3\"\n                    onClick={() => {\n                      setMobileMenuOpen(false);\n                      logoutMutation.mutate();\n                    }}\n                    disabled={logoutMutation.isPending}\n                    data-testid=\"button-mobile-logout\"\n                  >\n                    <LogOut className=\"h-4 w-4\" />\n                    Logout\n                  </Button>\n                </div>\n              </SheetContent>\n            </Sheet>\n            \n            {/* Desktop navigation - hidden on mobile */}\n            <div className=\"hidden md:flex items-center gap-2\">\n              {/* Setup Dropdown */}\n              <DropdownMenu>\n                <DropdownMenuTrigger asChild>\n                  <Button variant=\"outline\" size=\"sm\" className=\"gap-2\" data-testid=\"button-setup-menu\">\n                    <Settings className=\"h-4 w-4\" />\n                    <span className=\"hidden lg:inline\">Setup</span>\n                    <ChevronDown className=\"h-3 w-3\" />\n                  </Button>\n                </DropdownMenuTrigger>\n                <DropdownMenuContent align=\"end\" className=\"w-48\">\n                  <DropdownMenuLabel>Setup</DropdownMenuLabel>\n                  <DropdownMenuSeparator />\n                  {(user?.teamRole === \"admin\" || user?.teamRole === \"owner\") && (\n                    <DropdownMenuItem asChild>\n                      <Link href=\"/team\" className=\"cursor-pointer\">\n                        <Settings className=\"h-4 w-4 mr-2\" />\n                        Team\n                      </Link>\n                    </DropdownMenuItem>\n                  )}\n                  <DropdownMenuItem asChild>\n                    <Link href=\"/messages\" className=\"cursor-pointer\" data-testid=\"link-messages\">\n                      <MessageSquare className=\"h-4 w-4 mr-2\" />\n                      Messages\n                    </Link>\n                  </DropdownMenuItem>\n                  <DropdownMenuItem asChild>\n                    <Link href=\"/billing\" className=\"cursor-pointer\">\n                      <CreditCard className=\"h-4 w-4 mr-2\" />\n                      Billing\n                    </Link>\n                  </DropdownMenuItem>\n                </DropdownMenuContent>\n              </DropdownMenu>\n\n              {/* User Profile Dropdown */}\n              <DropdownMenu>\n                <DropdownMenuTrigger asChild>\n                  <Button variant=\"ghost\" size=\"sm\" className=\"gap-2\" data-testid=\"button-profile-menu\">\n                    <Avatar className=\"h-6 w-6\">\n                      <AvatarFallback className=\"text-xs\">{getUserInitials()}</AvatarFallback>\n                    </Avatar>\n                    <span className=\"hidden lg:inline\">{getUserDisplayName()}</span>\n                    <ChevronDown className=\"h-3 w-3\" />\n                  </Button>\n                </DropdownMenuTrigger>\n                <DropdownMenuContent align=\"end\" className=\"w-56\">\n                  <DropdownMenuLabel>\n                    <div className=\"flex flex-col space-y-1\">\n                      <p className=\"text-sm font-medium leading-none\">{getUserDisplayName()}</p>\n                      <p className=\"text-xs leading-none text-muted-foreground\">{user?.email}</p>\n                    </div>\n                  </DropdownMenuLabel>\n                  <DropdownMenuSeparator />\n                  <DropdownMenuItem asChild>\n                    <Link href=\"/profile\" className=\"cursor-pointer\" data-testid=\"link-profile\">\n                      <User className=\"h-4 w-4 mr-2\" />\n                      Edit Profile\n                    </Link>\n                  </DropdownMenuItem>\n                  <DropdownMenuSeparator />\n                  <DropdownMenuItem \n                    onClick={() => logoutMutation.mutate()} \n                    disabled={logoutMutation.isPending}\n                    data-testid=\"button-logout\"\n                  >\n                    <LogOut className=\"h-4 w-4 mr-2\" />\n                    Logout\n                  </DropdownMenuItem>\n                </DropdownMenuContent>\n              </DropdownMenu>\n            </div>\n            \n            <ThemeToggle />\n          </div>\n        </div>\n      </div>\n    </header>\n  );\n}\n","size_bytes":12467},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n/* LIGHT MODE */\n:root {\n  --button-outline: rgba(0,0,0, .10);\n  --badge-outline: rgba(0,0,0, .05);\n\n  /* Automatic computation of border around primary / danger buttons */\n  --opaque-button-border-intensity: -8; /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(0,0,0, .03);\n  --elevate-2: rgba(0,0,0, .08);\n\n  --background: 0 0% 100%;\n\n  --foreground: 240 10% 4%;\n\n  --border: 240 6% 90%;\n\n  --card: 240 5% 96%;\n\n  --card-foreground: 240 10% 4%;\n\n  --card-border: 240 6% 92%;\n\n  --sidebar: 240 5% 94%;\n\n  --sidebar-foreground: 240 10% 4%;\n\n  --sidebar-border: 240 6% 88%;\n\n  --sidebar-primary: 178 60% 50%;\n\n  --sidebar-primary-foreground: 0 0% 100%;\n\n  --sidebar-accent: 240 5% 88%;\n\n  --sidebar-accent-foreground: 240 10% 4%;\n\n  --sidebar-ring: 178 60% 50%;\n\n  --popover: 240 5% 92%;\n\n  --popover-foreground: 240 10% 4%;\n\n  --popover-border: 240 6% 86%;\n\n  --primary: 178 60% 50%;\n\n  --primary-foreground: 0 0% 100%;\n\n  --secondary: 210 15% 25%;\n\n  --secondary-foreground: 0 0% 100%;\n\n  --muted: 240 5% 90%;\n\n  --muted-foreground: 240 4% 46%;\n\n  --accent: 240 4% 88%;\n\n  --accent-foreground: 240 10% 4%;\n\n  --destructive: 0 84% 60%;\n\n  --destructive-foreground: 0 0% 100%;\n\n  --input: 240 6% 80%;\n  --ring: 178 60% 50%;\n  --chart-1: 178 60% 50%;\n  --chart-2: 142 71% 45%;\n  --chart-3: 38 92% 50%;\n  --chart-4: 0 84% 60%;\n  --chart-5: 280 65% 55%;\n\n  --font-sans: Inter, -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: \"SF Mono\", Monaco, \"Cascadia Code\", \"Roboto Mono\", Consolas, \"Courier New\", monospace;\n  --radius: .5rem; /* 8px */\n  --shadow-2xs: 0px 1px 2px 0px hsl(240 10% 4% / 0.05);\n  --shadow-xs: 0px 1px 3px 0px hsl(240 10% 4% / 0.1);\n  --shadow-sm: 0px 2px 4px -1px hsl(240 10% 4% / 0.06), 0px 1px 2px -1px hsl(240 10% 4% / 0.1);\n  --shadow: 0px 4px 6px -1px hsl(240 10% 4% / 0.1), 0px 2px 4px -2px hsl(240 10% 4% / 0.1);\n  --shadow-md: 0px 6px 12px -2px hsl(240 10% 4% / 0.12), 0px 3px 7px -3px hsl(240 10% 4% / 0.1);\n  --shadow-lg: 0px 10px 20px -4px hsl(240 10% 4% / 0.15), 0px 4px 10px -4px hsl(240 10% 4% / 0.1);\n  --shadow-xl: 0px 20px 30px -6px hsl(240 10% 4% / 0.18), 0px 8px 16px -6px hsl(240 10% 4% / 0.12);\n  --shadow-2xl: 0px 25px 50px -12px hsl(240 10% 4% / 0.25);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n\n  /* Automatically computed borders - intensity can be controlled by the user by the --opaque-button-border-intensity setting */\n\n  /* Fallback for older browsers */\n  --sidebar-primary-border: hsl(var(--sidebar-primary));\n  --sidebar-primary-border: hsl(from hsl(var(--sidebar-primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --sidebar-accent-border: hsl(var(--sidebar-accent));\n  --sidebar-accent-border: hsl(from hsl(var(--sidebar-accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --primary-border: hsl(var(--primary));\n  --primary-border: hsl(from hsl(var(--primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --secondary-border: hsl(var(--secondary));\n  --secondary-border: hsl(from hsl(var(--secondary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --muted-border: hsl(var(--muted));\n  --muted-border: hsl(from hsl(var(--muted)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --accent-border: hsl(var(--accent));\n  --accent-border: hsl(from hsl(var(--accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --destructive-border: hsl(var(--destructive));\n  --destructive-border: hsl(from hsl(var(--destructive)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n}\n\n.dark {\n  --button-outline: rgba(255,255,255, .10);\n  --badge-outline: rgba(255,255,255, .05);\n\n  --opaque-button-border-intensity: 9;  /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(255,255,255, .04);\n  --elevate-2: rgba(255,255,255, .09);\n\n  --background: 240 10% 4%;\n\n  --foreground: 0 0% 98%;\n\n  --border: 240 4% 16%;\n\n  --card: 240 6% 10%;\n\n  --card-foreground: 0 0% 98%;\n\n  --card-border: 240 4% 14%;\n\n  --sidebar: 240 6% 8%;\n\n  --sidebar-foreground: 0 0% 98%;\n\n  --sidebar-border: 240 4% 12%;\n\n  --sidebar-primary: 178 60% 55%;\n\n  --sidebar-primary-foreground: 240 10% 4%;\n\n  --sidebar-accent: 240 5% 14%;\n\n  --sidebar-accent-foreground: 0 0% 98%;\n\n  --sidebar-ring: 178 60% 55%;\n\n  --popover: 240 6% 12%;\n\n  --popover-foreground: 0 0% 98%;\n\n  --popover-border: 240 4% 16%;\n\n  --primary: 178 60% 55%;\n\n  --primary-foreground: 240 10% 4%;\n\n  --secondary: 210 15% 20%;\n\n  --secondary-foreground: 0 0% 98%;\n\n  --muted: 240 4% 16%;\n\n  --muted-foreground: 240 5% 65%;\n\n  --accent: 240 4% 20%;\n\n  --accent-foreground: 0 0% 98%;\n\n  --destructive: 0 84% 60%;\n\n  --destructive-foreground: 0 0% 100%;\n\n  --input: 240 5% 26%;\n  --ring: 178 60% 55%;\n  --chart-1: 178 60% 60%;\n  --chart-2: 142 76% 50%;\n  --chart-3: 38 92% 60%;\n  --chart-4: 0 84% 70%;\n  --chart-5: 280 65% 65%;\n\n  --shadow-2xs: 0px 1px 2px 0px hsl(0 0% 0% / 0.3);\n  --shadow-xs: 0px 1px 3px 0px hsl(0 0% 0% / 0.4);\n  --shadow-sm: 0px 2px 4px -1px hsl(0 0% 0% / 0.35), 0px 1px 2px -1px hsl(0 0% 0% / 0.4);\n  --shadow: 0px 4px 6px -1px hsl(0 0% 0% / 0.4), 0px 2px 4px -2px hsl(0 0% 0% / 0.4);\n  --shadow-md: 0px 6px 12px -2px hsl(0 0% 0% / 0.45), 0px 3px 7px -3px hsl(0 0% 0% / 0.4);\n  --shadow-lg: 0px 10px 20px -4px hsl(0 0% 0% / 0.5), 0px 4px 10px -4px hsl(0 0% 0% / 0.4);\n  --shadow-xl: 0px 20px 30px -6px hsl(0 0% 0% / 0.55), 0px 8px 16px -6px hsl(0 0% 0% / 0.45);\n  --shadow-2xl: 0px 25px 50px -12px hsl(0 0% 0% / 0.6);\n\n  /* Automatically computed borders - intensity can be controlled by the user by the --opaque-button-border-intensity setting */\n  --sidebar-primary-border: hsl(from hsl(var(--sidebar-primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n  --sidebar-accent-border: hsl(from hsl(var(--sidebar-accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n  --primary-border: hsl(from hsl(var(--primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n  --secondary-border: hsl(from hsl(var(--secondary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n  --muted-border: hsl(from hsl(var(--muted)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n  --accent-border: hsl(from hsl(var(--accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n  --destructive-border: hsl(from hsl(var(--destructive)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n@layer utilities {\n\n  /* Hide ugly search cancel button in Chrome until we can style it properly */\n  input[type=\"search\"]::-webkit-search-cancel-button {\n    @apply hidden;\n  }\n\n  /* Placeholder styling for contentEditable div */\n  [contenteditable][data-placeholder]:empty::before {\n    content: attr(data-placeholder);\n    color: hsl(var(--muted-foreground));\n    pointer-events: none;\n  }\n\n  .no-default-hover-elevate {}\n\n  .no-default-active-elevate {}\n\n  .toggle-elevate::before,\n  .toggle-elevate-2::before {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    border-radius: inherit;\n    z-index: -1;\n  }\n\n  .toggle-elevate.toggle-elevated::before {\n    background-color: var(--elevate-2);\n  }\n\n  .border.toggle-elevate::before {\n    inset: -1px;\n  }\n\n  .hover-elevate:not(.no-default-hover-elevate),\n  .active-elevate:not(.no-default-active-elevate),\n  .hover-elevate-2:not(.no-default-hover-elevate),\n  .active-elevate-2:not(.no-default-active-elevate) {\n    position: relative;\n    z-index: 0;\n  }\n\n  .hover-elevate:not(.no-default-hover-elevate)::after,\n  .active-elevate:not(.no-default-active-elevate)::after,\n  .hover-elevate-2:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:not(.no-default-active-elevate)::after {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    border-radius: inherit;\n    z-index: 999;\n  }\n\n  .hover-elevate:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-1);\n  }\n\n  .hover-elevate-2:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-2);\n  }\n\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate-2:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate-2:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after {\n    inset: -1px;\n  }\n}","size_bytes":9141},"client/src/pages/roster-board.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useRoute, Link } from \"wouter\";\nimport { Card, CardContent, CardHeader } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Sheet, SheetContent, SheetHeader, SheetTitle } from \"@/components/ui/sheet\";\nimport { Avatar, AvatarFallback } from \"@/components/ui/avatar\";\nimport { ArrowLeft, Phone, Mail, MessageSquare, Download, Calendar } from \"lucide-react\";\nimport { format } from \"date-fns\";\nimport type { Job, Contact, Availability, Message } from \"@shared/schema\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ntype AvailabilityWithContact = Availability & { contact: Contact };\ntype JobWithDetails = Job & { availability: AvailabilityWithContact[] };\n\nconst statusColumns = [\n  { id: \"confirmed\", label: \"Confirmed\", variant: \"default\" as const },\n  { id: \"maybe\", label: \"Maybe\", variant: \"secondary\" as const },\n  { id: \"declined\", label: \"Declined\", variant: \"secondary\" as const },\n  { id: \"no_reply\", label: \"No Reply\", variant: \"secondary\" as const },\n];\n\nfunction DropZone({\n  columnId,\n  label,\n  variant,\n  availability,\n  onSelect,\n  onDrop,\n}: {\n  columnId: string;\n  label: string;\n  variant: \"default\" | \"secondary\";\n  availability: AvailabilityWithContact[];\n  onSelect: (contact: Contact) => void;\n  onDrop: (availabilityId: string, targetStatus: string) => void;\n}) {\n  const [isOver, setIsOver] = useState(false);\n\n  const handleDragOver = (e: React.DragEvent) => {\n    e.preventDefault();\n    e.dataTransfer.dropEffect = \"move\";\n    const currentStatus = e.dataTransfer.getData(\"currentStatus\");\n    if (currentStatus !== columnId) {\n      setIsOver(true);\n    }\n  };\n\n  const handleDragLeave = () => {\n    setIsOver(false);\n  };\n\n  const handleDrop = (e: React.DragEvent) => {\n    e.preventDefault();\n    setIsOver(false);\n    const availabilityId = e.dataTransfer.getData(\"availabilityId\");\n    const currentStatus = e.dataTransfer.getData(\"currentStatus\");\n    if (availabilityId && currentStatus !== columnId) {\n      onDrop(availabilityId, columnId);\n    }\n  };\n\n  return (\n    <Card\n      className={`${isOver ? \"ring-2 ring-primary\" : \"\"}`}\n      data-testid={`column-${columnId}`}\n      onDragOver={handleDragOver}\n      onDragLeave={handleDragLeave}\n      onDrop={handleDrop}\n    >\n      <CardHeader className=\"pb-4\">\n        <div className=\"flex items-center justify-between\">\n          <h3 className=\"font-semibold\">{label}</h3>\n          <Badge variant={variant} data-testid={`badge-count-${columnId}`}>\n            {availability.length}\n          </Badge>\n        </div>\n      </CardHeader>\n      <CardContent className=\"space-y-3\">\n        {availability.length === 0 ? (\n          <div className={`text-center py-8 text-sm text-muted-foreground border-2 border-dashed rounded-lg ${isOver ? \"border-primary bg-primary/5\" : \"\"}`}>\n            {isOver ? \"Drop here\" : \"No contacts\"}\n          </div>\n        ) : (\n          availability.map((avail) => (\n            <ContactCard\n              key={avail.id}\n              availability={avail}\n              onSelect={() => onSelect(avail.contact)}\n              onStatusChange={(newStatus) => onDrop(avail.id, newStatus)}\n            />\n          ))\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n\nexport default function RosterBoard() {\n  const [, params] = useRoute(\"/jobs/:id/roster\");\n  const [selectedContact, setSelectedContact] = useState<Contact | null>(null);\n  const { toast } = useToast();\n\n  const { data: job, isLoading } = useQuery<JobWithDetails>({\n    queryKey: [\"/api/jobs\", params?.id, \"roster\"],\n  });\n\n  const { data: messages } = useQuery<Message[]>({\n    queryKey: [\"/api/messages\", selectedContact?.id],\n    enabled: !!selectedContact,\n  });\n\n  const updateAvailabilityMutation = useMutation({\n    mutationFn: ({ availabilityId, status }: { availabilityId: string; status: string }) =>\n      apiRequest(\"PATCH\", `/api/availability/${availabilityId}`, { status }),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/jobs\", params?.id, \"roster\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/jobs\"] });\n      toast({\n        title: \"Status Updated\",\n        description: \"Contact availability status has been updated\",\n      });\n    },\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center min-h-[400px]\">\n        <div className=\"animate-spin w-8 h-8 border-4 border-primary border-t-transparent rounded-full\" aria-label=\"Loading\" />\n      </div>\n    );\n  }\n\n  if (!job) {\n    return <div>Job not found</div>;\n  }\n\n  const groupedAvailability = statusColumns.reduce((acc, column) => {\n    acc[column.id] = job.availability.filter(a => a.status === column.id);\n    return acc;\n  }, {} as Record<string, AvailabilityWithContact[]>);\n\n  return (\n    <div className=\"space-y-6\">\n      <div>\n        <Link href=\"/\">\n          <a data-testid=\"link-back-dashboard\">\n            <Button variant=\"ghost\" size=\"sm\" className=\"gap-2 mb-4\">\n              <ArrowLeft className=\"h-4 w-4\" />\n              Back to Dashboard\n            </Button>\n          </a>\n        </Link>\n        <h1 className=\"text-3xl font-semibold\" data-testid=\"text-job-name\">{job.name}</h1>\n        <p className=\"text-muted-foreground mt-1\">\n          {format(new Date(job.startTime), \"MMMM d, yyyy 'at' h:mm a\")} - {job.location}\n        </p>\n      </div>\n\n      <div className=\"flex gap-2 flex-wrap\">\n        <Link href={`/jobs/${job.id}/send`}>\n          <a data-testid=\"link-send-message\">\n            <Button className=\"gap-2\">\n              <MessageSquare className=\"h-4 w-4\" />\n              Send Message\n            </Button>\n          </a>\n        </Link>\n        <Link href={`/jobs/${job.id}/edit`}>\n          <a data-testid=\"link-edit-job\">\n            <Button variant=\"outline\">Edit Job</Button>\n          </a>\n        </Link>\n        <Button\n          variant=\"outline\"\n          className=\"gap-2\"\n          onClick={() => exportToCSV(job, groupedAvailability.confirmed || [])}\n          data-testid=\"button-export-csv\"\n        >\n          <Download className=\"h-4 w-4\" />\n          Export CSV\n        </Button>\n        <Button\n          variant=\"outline\"\n          className=\"gap-2\"\n          onClick={() => downloadCalendarInvite(job.id)}\n          data-testid=\"button-download-calendar\"\n        >\n          <Calendar className=\"h-4 w-4\" />\n          Calendar Invite\n        </Button>\n      </div>\n\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n        {statusColumns.map((column) => (\n          <DropZone\n            key={column.id}\n            columnId={column.id}\n            label={column.label}\n            variant={column.variant}\n            availability={groupedAvailability[column.id] || []}\n            onSelect={setSelectedContact}\n            onDrop={(availabilityId: string, targetStatus: string) => {\n              updateAvailabilityMutation.mutate({\n                availabilityId,\n                status: targetStatus,\n              });\n            }}\n          />\n        ))}\n      </div>\n\n      <Sheet open={!!selectedContact} onOpenChange={(open) => !open && setSelectedContact(null)}>\n        <SheetContent className=\"w-full sm:max-w-lg overflow-y-auto\">\n          {selectedContact && (\n            <>\n              <SheetHeader>\n                <SheetTitle className=\"flex items-center gap-3\">\n                  <Avatar>\n                    <AvatarFallback>\n                      {selectedContact.firstName[0]}{selectedContact.lastName[0]}\n                    </AvatarFallback>\n                  </Avatar>\n                  <div>\n                    <div data-testid=\"text-contact-name\">\n                      {selectedContact.firstName} {selectedContact.lastName}\n                    </div>\n                    <div className=\"text-sm font-normal text-muted-foreground\">Contact Details</div>\n                  </div>\n                </SheetTitle>\n              </SheetHeader>\n\n              <div className=\"mt-6 space-y-6\">\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center gap-2 text-sm\">\n                    <Phone className=\"h-4 w-4 text-muted-foreground\" />\n                    <span data-testid=\"text-contact-phone\">{selectedContact.phone}</span>\n                  </div>\n                  {selectedContact.email && (\n                    <div className=\"flex items-center gap-2 text-sm\">\n                      <Mail className=\"h-4 w-4 text-muted-foreground\" />\n                      <span data-testid=\"text-contact-email\">{selectedContact.email}</span>\n                    </div>\n                  )}\n                </div>\n\n                <div>\n                  <h3 className=\"font-semibold mb-3\">Message Thread</h3>\n                  {messages && messages.length > 0 ? (\n                    <div className=\"space-y-3\">\n                      {messages.map((message) => (\n                        <div\n                          key={message.id}\n                          className={`p-3 rounded-lg ${\n                            message.direction === \"outbound\"\n                              ? \"bg-primary/10 ml-8\"\n                              : \"bg-card mr-8\"\n                          }`}\n                          data-testid={`message-${message.id}`}\n                        >\n                          <p className=\"text-sm\">{message.content}</p>\n                          <div className=\"flex items-center gap-2 mt-2\">\n                            <span className=\"text-xs text-muted-foreground\">\n                              {format(new Date(message.createdAt), \"MMM d, h:mm a\")}\n                            </span>\n                            {message.direction === \"outbound\" && (\n                              <Badge variant=\"secondary\" className=\"text-xs\">{message.status}</Badge>\n                            )}\n                          </div>\n                        </div>\n                      ))}\n                    </div>\n                  ) : (\n                    <div className=\"text-center py-8 text-sm text-muted-foreground border-2 border-dashed rounded-lg\">\n                      No messages yet\n                    </div>\n                  )}\n                </div>\n              </div>\n            </>\n          )}\n        </SheetContent>\n      </Sheet>\n    </div>\n  );\n}\n\nfunction exportToCSV(job: JobWithDetails, confirmedAvailability: AvailabilityWithContact[]) {\n  const escapeCSV = (str: string) => `\"${str.replace(/\"/g, '\"\"')}\"`;\n  \n  const headers = [\"First Name\", \"Last Name\", \"Phone\", \"Email\", \"Shift Preference\", \"Status\"];\n  const rows = confirmedAvailability.map((avail) => [\n    avail.contact.firstName,\n    avail.contact.lastName,\n    avail.contact.phone,\n    avail.contact.email || \"\",\n    avail.shiftPreference || \"\",\n    avail.status,\n  ]);\n\n  const csvContent = [\n    headers.map(escapeCSV).join(\",\"),\n    ...rows.map((row) => row.map(escapeCSV).join(\",\")),\n  ].join(\"\\n\");\n\n  const blob = new Blob([csvContent], { type: \"text/csv\" });\n  const url = window.URL.createObjectURL(blob);\n  const link = document.createElement(\"a\");\n  link.href = url;\n  link.download = `${job.name.replace(/\\s+/g, \"_\")}_roster_${format(new Date(), \"yyyy-MM-dd\")}.csv`;\n  document.body.appendChild(link);\n  link.click();\n  document.body.removeChild(link);\n  window.URL.revokeObjectURL(url);\n}\n\nfunction downloadCalendarInvite(jobId: string) {\n  const link = document.createElement(\"a\");\n  link.href = `/api/jobs/${jobId}/calendar-invite`;\n  link.download = \"\";\n  document.body.appendChild(link);\n  link.click();\n  document.body.removeChild(link);\n}\n\nfunction ContactCard({\n  availability,\n  onSelect,\n  onStatusChange,\n}: {\n  availability: AvailabilityWithContact;\n  onSelect: () => void;\n  onStatusChange: (status: string) => void;\n}) {\n  const { contact } = availability;\n  const [isDragging, setIsDragging] = useState(false);\n\n  const handleDragStart = (e: React.DragEvent) => {\n    e.dataTransfer.effectAllowed = \"move\";\n    e.dataTransfer.setData(\"availabilityId\", availability.id);\n    e.dataTransfer.setData(\"currentStatus\", availability.status);\n    setIsDragging(true);\n  };\n\n  const handleDragEnd = () => {\n    setIsDragging(false);\n  };\n\n  return (\n    <Card\n      draggable\n      onDragStart={handleDragStart}\n      onDragEnd={handleDragEnd}\n      className={`hover-elevate cursor-move ${isDragging ? \"opacity-50\" : \"\"}`}\n      onClick={onSelect}\n      data-testid={`card-contact-${contact.id}`}\n    >\n      <CardContent className=\"p-3\">\n        <div className=\"flex items-center gap-3\">\n          <Avatar className=\"h-10 w-10\">\n            <AvatarFallback className=\"text-xs\">\n              {contact.firstName[0]}{contact.lastName[0]}\n            </AvatarFallback>\n          </Avatar>\n          <div className=\"flex-1 min-w-0\">\n            <div className=\"font-medium text-sm truncate\">\n              {contact.firstName} {contact.lastName}\n            </div>\n            <div className=\"text-xs text-muted-foreground truncate\">{contact.phone}</div>\n          </div>\n        </div>\n        {availability.shiftPreference && (\n          <Badge variant=\"secondary\" className=\"mt-2 text-xs\">\n            {availability.shiftPreference}\n          </Badge>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":13456},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-9 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5741},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"server/storage.ts":{"content":"import {\n  type User, type InsertUser,\n  type Contact, type InsertContact,\n  type Job, type InsertJob,\n  type Template, type InsertTemplate,\n  type Campaign, type InsertCampaign,\n  type Message, type InsertMessage,\n  type Availability, type InsertAvailability,\n  type Subscription, type InsertSubscription,\n  type PasswordResetToken, type InsertPasswordResetToken,\n  type SubscriptionPlan, type InsertSubscriptionPlan,\n  type SmsBundle, type InsertSmsBundle,\n  type CreditGrant, type InsertCreditGrant,\n  type CreditTransaction, type InsertCreditTransaction,\n  type Organization, type InsertOrganization,\n  type AdminUser, type InsertAdminUser,\n} from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\n\nexport interface IStorage {\n  // Organization methods\n  getOrganization(id: string): Promise<Organization | undefined>;\n  createOrganization(org: InsertOrganization): Promise<Organization>;\n  updateOrganization(id: string, updates: Partial<InsertOrganization>): Promise<Organization>;\n  getUsersInOrganization(organizationId: string): Promise<User[]>;\n  updateUserTeamRole(userId: string, teamRole: string): Promise<User>;\n  \n  // Admin user methods\n  getAllAdminUsers(): Promise<AdminUser[]>;\n  getAdminUserByEmail(email: string): Promise<AdminUser | undefined>;\n  createAdminUser(adminUser: InsertAdminUser): Promise<AdminUser>;\n  deleteAdminUser(id: string): Promise<void>;\n\n  // User methods\n  getUser(id: string): Promise<User | undefined>;\n  getAllUsers(): Promise<User[]>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  getUserByEmail(email: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  updateUser(id: string, updates: Partial<InsertUser>): Promise<User>;\n  updateUserPassword(userId: string, password: string): Promise<User>;\n  updateUserStripeInfo(userId: string, stripeCustomerId: string, stripeSubscriptionId: string): Promise<User>;\n  disableUser(userId: string): Promise<User>;\n  enableUser(userId: string): Promise<User>;\n  \n  createPasswordResetToken(token: InsertPasswordResetToken): Promise<PasswordResetToken>;\n  getPasswordResetToken(token: string): Promise<PasswordResetToken | undefined>;\n  deletePasswordResetToken(token: string): Promise<void>;\n\n  getContacts(userId: string): Promise<Contact[]>;\n  getContact(id: string): Promise<Contact | undefined>;\n  getContactByRosterToken(token: string): Promise<Contact | undefined>;\n  createContact(userId: string, contact: InsertContact): Promise<Contact>;\n  updateContact(id: string, updates: Partial<InsertContact>): Promise<Contact>;\n  deleteContact(id: string): Promise<void>;\n\n  getJobs(userId: string): Promise<Job[]>;\n  getJob(id: string): Promise<Job | undefined>;\n  createJob(userId: string, job: InsertJob): Promise<Job>;\n  updateJob(id: string, updates: Partial<InsertJob>): Promise<Job>;\n  deleteJob(id: string): Promise<void>;\n\n  getTemplates(userId: string): Promise<Template[]>;\n  getTemplate(id: string): Promise<Template | undefined>;\n  createTemplate(userId: string, template: InsertTemplate): Promise<Template>;\n  deleteTemplate(id: string): Promise<void>;\n\n  createCampaign(userId: string, campaign: InsertCampaign): Promise<Campaign>;\n  getCampaignsForJob(jobId: string): Promise<Campaign[]>;\n\n  getMessages(contactId: string): Promise<Message[]>;\n  getMessagesForJob(jobId: string): Promise<Message[]>;\n  getAllMessagesForUser(userId: string): Promise<Message[]>;\n  createMessage(userId: string, message: InsertMessage): Promise<Message>;\n  updateMessageStatus(id: string, status: string): Promise<Message>;\n\n  getAvailability(jobId: string): Promise<Availability[]>;\n  getAllAvailability(userId: string): Promise<Availability[]>;\n  getAvailabilityByContact(contactId: string): Promise<Availability[]>;\n  getAvailabilityForContact(jobId: string, contactId: string): Promise<Availability | undefined>;\n  getConfirmedContactsForJob(jobId: string): Promise<Contact[]>;\n  getCurrentJobForContact(contactId: string): Promise<Job | undefined>;\n  createAvailability(availability: InsertAvailability): Promise<Availability>;\n  updateAvailability(id: string, updates: Partial<InsertAvailability>): Promise<Availability>;\n\n  getSubscription(userId: string): Promise<Subscription | undefined>;\n  getAllSubscriptions(): Promise<Subscription[]>;\n  createSubscription(userId: string, subscription: InsertSubscription): Promise<Subscription>;\n  updateSubscription(userId: string, updates: Partial<InsertSubscription>): Promise<Subscription>;\n  \n  // Credit system methods\n  getSubscriptionPlans(): Promise<SubscriptionPlan[]>;\n  getSubscriptionPlan(id: string): Promise<SubscriptionPlan | undefined>;\n  createSubscriptionPlan(plan: InsertSubscriptionPlan): Promise<SubscriptionPlan>;\n  updateSubscriptionPlanPricing(id: string, prices: { priceGBP: number; priceUSD: number; priceEUR: number }): Promise<SubscriptionPlan>;\n  \n  getSmsBundles(): Promise<SmsBundle[]>;\n  getSmsBundle(id: string): Promise<SmsBundle | undefined>;\n  createSmsBundle(bundle: InsertSmsBundle): Promise<SmsBundle>;\n  updateSmsBundlePricing(id: string, prices: { priceGBP: number; priceUSD: number; priceEUR: number }): Promise<SmsBundle>;\n  \n  getCreditGrants(userId: string): Promise<CreditGrant[]>;\n  createCreditGrant(userId: string, grant: InsertCreditGrant): Promise<CreditGrant>;\n  updateCreditGrant(id: string, updates: Partial<InsertCreditGrant>): Promise<CreditGrant>;\n  \n  getCreditTransactions(userId: string): Promise<CreditTransaction[]>;\n  createCreditTransaction(userId: string, transaction: InsertCreditTransaction): Promise<CreditTransaction>;\n  \n  getTotalCredits(userId: string): Promise<number>;\n  \n  // Atomic credit operations\n  consumeCreditsAtomic(\n    userId: string,\n    amount: number,\n    reason: string,\n    messageId: string | null\n  ): Promise<CreditTransaction[]>;\n  \n  refundCreditsAtomic(\n    userId: string,\n    transactionIds: string[],\n    reason: string\n  ): Promise<CreditTransaction[]>;\n}\n\nexport class MemStorage implements IStorage {\n  private users: Map<string, User> = new Map();\n  private contacts: Map<string, Contact> = new Map();\n  private jobs: Map<string, Job> = new Map();\n  private templates: Map<string, Template> = new Map();\n  private campaigns: Map<string, Campaign> = new Map();\n  private messages: Map<string, Message> = new Map();\n  private availability: Map<string, Availability> = new Map();\n  private subscriptions: Map<string, Subscription> = new Map();\n  private passwordResetTokens: Map<string, PasswordResetToken> = new Map();\n  private subscriptionPlans: Map<string, SubscriptionPlan> = new Map();\n  private smsBundles: Map<string, SmsBundle> = new Map();\n  private creditGrants: Map<string, CreditGrant> = new Map();\n  private creditTransactions: Map<string, CreditTransaction> = new Map();\n  \n  // Simple mutex for atomic credit operations\n  private creditLocks: Map<string, Promise<any>> = new Map();\n\n  async getUser(id: string): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async getAllUsers(): Promise<User[]> {\n    return Array.from(this.users.values());\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(\n      (user) => user.username === username,\n    );\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(\n      (user) => user.email === email,\n    );\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const id = randomUUID();\n    const user: User = { ...insertUser, id, stripeCustomerId: null, stripeSubscriptionId: null };\n    this.users.set(id, user);\n    \n    // Create trial subscription (30 days)\n    const trialEndsAt = new Date(Date.now() + 30 * 24 * 60 * 60 * 1000);\n    await this.createSubscription(id, {\n      planId: null,\n      status: \"trial\",\n      trialEndsAt,\n      currentPeriodStart: null,\n      currentPeriodEnd: null,\n      stripeSubscriptionId: null,\n    });\n    \n    // Grant 10 trial credits (expires with trial)\n    await this.createCreditGrant(id, {\n      userId: id,\n      sourceType: \"trial\",\n      sourceRef: null,\n      creditsGranted: 10,\n      creditsConsumed: 0,\n      creditsRemaining: 10,\n      expiresAt: trialEndsAt,\n    });\n    \n    return user;\n  }\n\n  async updateUser(id: string, updates: Partial<InsertUser>): Promise<User> {\n    const user = this.users.get(id);\n    if (!user) throw new Error(\"User not found\");\n    Object.assign(user, updates);\n    this.users.set(id, user);\n    return user;\n  }\n\n  async updateUserPassword(userId: string, password: string): Promise<User> {\n    const user = this.users.get(userId);\n    if (!user) throw new Error(\"User not found\");\n    user.password = password;\n    this.users.set(userId, user);\n    return user;\n  }\n\n  async createPasswordResetToken(insertToken: InsertPasswordResetToken): Promise<PasswordResetToken> {\n    const id = randomUUID();\n    const token: PasswordResetToken = { ...insertToken, id, createdAt: new Date() };\n    this.passwordResetTokens.set(token.token, token);\n    return token;\n  }\n\n  async getPasswordResetToken(token: string): Promise<PasswordResetToken | undefined> {\n    return this.passwordResetTokens.get(token);\n  }\n\n  async deletePasswordResetToken(token: string): Promise<void> {\n    this.passwordResetTokens.delete(token);\n  }\n\n  constructor() {\n    const mockUserId = \"mock-user-1\";\n    const mockUser: User = {\n      id: mockUserId,\n      username: \"demo\",\n      password: \"demo\",\n      email: \"demo@heyteam.app\",\n      stripeCustomerId: null,\n      stripeSubscriptionId: null,\n    };\n    this.users.set(mockUserId, mockUser);\n\n    const mockSubscription: Subscription = {\n      id: randomUUID(),\n      userId: mockUserId,\n      plan: \"pro\",\n      status: \"active\",\n      messageCredits: 500,\n      renewsAt: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000),\n      stripeSubscriptionId: null,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n    this.subscriptions.set(mockSubscription.id, mockSubscription);\n  }\n\n  async updateUserStripeInfo(userId: string, stripeCustomerId: string, stripeSubscriptionId: string): Promise<User> {\n    const user = this.users.get(userId);\n    if (!user) throw new Error(\"User not found\");\n    user.stripeCustomerId = stripeCustomerId;\n    user.stripeSubscriptionId = stripeSubscriptionId;\n    this.users.set(userId, user);\n    return user;\n  }\n\n  async getContacts(userId: string): Promise<Contact[]> {\n    return Array.from(this.contacts.values()).filter((c) => c.userId === userId);\n  }\n\n  async getContact(id: string): Promise<Contact | undefined> {\n    return this.contacts.get(id);\n  }\n\n  async createContact(userId: string, insertContact: InsertContact): Promise<Contact> {\n    const id = randomUUID();\n    const contact: Contact = { ...insertContact, id, userId, createdAt: new Date() };\n    this.contacts.set(id, contact);\n    return contact;\n  }\n\n  async updateContact(id: string, updates: Partial<InsertContact>): Promise<Contact> {\n    const contact = this.contacts.get(id);\n    if (!contact) throw new Error(\"Contact not found\");\n    Object.assign(contact, updates);\n    this.contacts.set(id, contact);\n    return contact;\n  }\n\n  async deleteContact(id: string): Promise<void> {\n    this.contacts.delete(id);\n  }\n\n  async getJobs(userId: string): Promise<Job[]> {\n    return Array.from(this.jobs.values()).filter((j) => j.userId === userId);\n  }\n\n  async getJob(id: string): Promise<Job | undefined> {\n    return this.jobs.get(id);\n  }\n\n  async createJob(userId: string, insertJob: InsertJob): Promise<Job> {\n    const id = randomUUID();\n    const now = new Date();\n    const job: Job = { ...insertJob, id, userId, createdAt: now, updatedAt: now };\n    this.jobs.set(id, job);\n    return job;\n  }\n\n  async updateJob(id: string, updates: Partial<InsertJob>): Promise<Job> {\n    const job = this.jobs.get(id);\n    if (!job) throw new Error(\"Job not found\");\n    Object.assign(job, { ...updates, updatedAt: new Date() });\n    this.jobs.set(id, job);\n    return job;\n  }\n\n  async deleteJob(id: string): Promise<void> {\n    this.jobs.delete(id);\n  }\n\n  async getTemplates(userId: string): Promise<Template[]> {\n    return Array.from(this.templates.values()).filter((t) => t.userId === userId);\n  }\n\n  async getTemplate(id: string): Promise<Template | undefined> {\n    return this.templates.get(id);\n  }\n\n  async createTemplate(userId: string, insertTemplate: InsertTemplate): Promise<Template> {\n    const id = randomUUID();\n    const template: Template = { ...insertTemplate, id, userId, createdAt: new Date() };\n    this.templates.set(id, template);\n    return template;\n  }\n\n  async deleteTemplate(id: string): Promise<void> {\n    this.templates.delete(id);\n  }\n\n  async createCampaign(userId: string, insertCampaign: InsertCampaign): Promise<Campaign> {\n    const id = randomUUID();\n    const campaign: Campaign = { ...insertCampaign, id, userId, sentAt: new Date() };\n    this.campaigns.set(id, campaign);\n    return campaign;\n  }\n\n  async getCampaignsForJob(jobId: string): Promise<Campaign[]> {\n    return Array.from(this.campaigns.values()).filter((c) => c.jobId === jobId);\n  }\n\n  async getMessages(contactId: string): Promise<Message[]> {\n    return Array.from(this.messages.values())\n      .filter((m) => m.contactId === contactId)\n      .sort((a, b) => a.createdAt.getTime() - b.createdAt.getTime());\n  }\n\n  async getMessagesForJob(jobId: string): Promise<Message[]> {\n    return Array.from(this.messages.values())\n      .filter((m) => m.jobId === jobId)\n      .sort((a, b) => a.createdAt.getTime() - b.createdAt.getTime());\n  }\n\n  async getAllMessagesForUser(userId: string): Promise<Message[]> {\n    return Array.from(this.messages.values())\n      .filter((m) => m.userId === userId)\n      .sort((a, b) => b.createdAt.getTime() - a.createdAt.getTime());\n  }\n\n  async createMessage(userId: string, insertMessage: InsertMessage): Promise<Message> {\n    const id = randomUUID();\n    const message: Message = { ...insertMessage, id, userId, createdAt: new Date() };\n    this.messages.set(id, message);\n    return message;\n  }\n\n  async updateMessageStatus(id: string, status: string): Promise<Message> {\n    const message = this.messages.get(id);\n    if (!message) throw new Error(\"Message not found\");\n    message.status = status;\n    this.messages.set(id, message);\n    return message;\n  }\n\n  async getAvailability(jobId: string): Promise<Availability[]> {\n    return Array.from(this.availability.values()).filter((a) => a.jobId === jobId);\n  }\n\n  async getAllAvailability(userId: string): Promise<Availability[]> {\n    // Get all jobs for this user\n    const userJobs = await this.getJobs(userId);\n    const jobIds = new Set(userJobs.map(j => j.id));\n    \n    // Filter availability entries that belong to user's jobs\n    return Array.from(this.availability.values()).filter((a) => jobIds.has(a.jobId));\n  }\n\n  async getAvailabilityForContact(jobId: string, contactId: string): Promise<Availability | undefined> {\n    return Array.from(this.availability.values()).find(\n      (a) => a.jobId === jobId && a.contactId === contactId\n    );\n  }\n\n  async getConfirmedContactsForJob(jobId: string): Promise<Contact[]> {\n    const confirmed = Array.from(this.availability.values()).filter(\n      (a) => a.jobId === jobId && a.status === \"confirmed\"\n    );\n    return confirmed\n      .map((a) => this.contacts.get(a.contactId))\n      .filter((c): c is Contact => c !== undefined);\n  }\n\n  async createAvailability(insertAvailability: InsertAvailability): Promise<Availability> {\n    const id = randomUUID();\n    const availability: Availability = { ...insertAvailability, id, updatedAt: new Date() };\n    this.availability.set(id, availability);\n    return availability;\n  }\n\n  async updateAvailability(id: string, updates: Partial<InsertAvailability>): Promise<Availability> {\n    const avail = this.availability.get(id);\n    if (!avail) throw new Error(\"Availability not found\");\n    Object.assign(avail, { ...updates, updatedAt: new Date() });\n    this.availability.set(id, avail);\n    return avail;\n  }\n\n  async getSubscription(userId: string): Promise<Subscription | undefined> {\n    return Array.from(this.subscriptions.values()).find((s) => s.userId === userId);\n  }\n\n  async getAllSubscriptions(): Promise<Subscription[]> {\n    return Array.from(this.subscriptions.values());\n  }\n\n  async createSubscription(userId: string, insertSubscription: InsertSubscription): Promise<Subscription> {\n    const id = randomUUID();\n    const now = new Date();\n    const subscription: Subscription = { ...insertSubscription, id, userId, createdAt: now, updatedAt: now };\n    this.subscriptions.set(id, subscription);\n    return subscription;\n  }\n\n  async updateSubscription(userId: string, updates: Partial<InsertSubscription>): Promise<Subscription> {\n    const subscription = Array.from(this.subscriptions.values()).find((s) => s.userId === userId);\n    if (!subscription) throw new Error(\"Subscription not found\");\n    Object.assign(subscription, { ...updates, updatedAt: new Date() });\n    this.subscriptions.set(subscription.id, subscription);\n    return subscription;\n  }\n\n  // Credit system methods\n  async getSubscriptionPlans(): Promise<SubscriptionPlan[]> {\n    return Array.from(this.subscriptionPlans.values());\n  }\n\n  async getSubscriptionPlan(id: string): Promise<SubscriptionPlan | undefined> {\n    return this.subscriptionPlans.get(id);\n  }\n\n  async createSubscriptionPlan(insertPlan: InsertSubscriptionPlan): Promise<SubscriptionPlan> {\n    const id = randomUUID();\n    const plan: SubscriptionPlan = { ...insertPlan, id, createdAt: new Date() };\n    this.subscriptionPlans.set(id, plan);\n    return plan;\n  }\n\n  async getSmsBundles(): Promise<SmsBundle[]> {\n    return Array.from(this.smsBundles.values());\n  }\n\n  async getSmsBundle(id: string): Promise<SmsBundle | undefined> {\n    return this.smsBundles.get(id);\n  }\n\n  async createSmsBundle(insertBundle: InsertSmsBundle): Promise<SmsBundle> {\n    const id = randomUUID();\n    const bundle: SmsBundle = { ...insertBundle, id, createdAt: new Date() };\n    this.smsBundles.set(id, bundle);\n    return bundle;\n  }\n\n  async getCreditGrants(userId: string): Promise<CreditGrant[]> {\n    return Array.from(this.creditGrants.values()).filter((g) => g.userId === userId);\n  }\n\n  async createCreditGrant(userId: string, insertGrant: InsertCreditGrant): Promise<CreditGrant> {\n    const id = randomUUID();\n    const grant: CreditGrant = { ...insertGrant, id, createdAt: new Date() };\n    this.creditGrants.set(id, grant);\n    return grant;\n  }\n\n  async updateCreditGrant(id: string, updates: Partial<InsertCreditGrant>): Promise<CreditGrant> {\n    const grant = this.creditGrants.get(id);\n    if (!grant) throw new Error(\"Credit grant not found\");\n    Object.assign(grant, updates);\n    this.creditGrants.set(id, grant);\n    return grant;\n  }\n\n  async getCreditTransactions(userId: string): Promise<CreditTransaction[]> {\n    return Array.from(this.creditTransactions.values()).filter((t) => t.userId === userId);\n  }\n\n  async createCreditTransaction(userId: string, insertTransaction: InsertCreditTransaction): Promise<CreditTransaction> {\n    const id = randomUUID();\n    const transaction: CreditTransaction = { ...insertTransaction, id, createdAt: new Date() };\n    this.creditTransactions.set(id, transaction);\n    return transaction;\n  }\n\n  async getTotalCredits(userId: string): Promise<number> {\n    const grants = await this.getCreditGrants(userId);\n    return grants.reduce((total, grant) => total + grant.creditsRemaining, 0);\n  }\n\n  // Helper to acquire lock for atomic credit operations\n  private async withCreditLock<T>(userId: string, operation: () => Promise<T>): Promise<T> {\n    // Wait for any existing lock to be released\n    while (this.creditLocks.has(userId)) {\n      await this.creditLocks.get(userId);\n    }\n    \n    // Create a new lock\n    let releaseLock: () => void;\n    const lockPromise = new Promise<void>((resolve) => {\n      releaseLock = resolve;\n    });\n    \n    this.creditLocks.set(userId, lockPromise);\n    \n    try {\n      return await operation();\n    } finally {\n      this.creditLocks.delete(userId);\n      releaseLock!();\n    }\n  }\n\n  async consumeCreditsAtomic(\n    userId: string,\n    amount: number,\n    reason: string,\n    messageId: string | null\n  ): Promise<CreditTransaction[]> {\n    return this.withCreditLock(userId, async () => {\n      if (amount <= 0) {\n        throw new Error(\"Amount must be positive\");\n      }\n\n      // Get all active grants sorted by expiry (earliest first)\n      const grants = Array.from(this.creditGrants.values())\n        .filter(g => g.userId === userId && g.creditsRemaining > 0)\n        .filter(g => !g.expiresAt || g.expiresAt > new Date())\n        .sort((a, b) => {\n          if (a.expiresAt && b.expiresAt) {\n            return a.expiresAt.getTime() - b.expiresAt.getTime();\n          }\n          if (a.expiresAt && !b.expiresAt) return -1;\n          if (!a.expiresAt && b.expiresAt) return 1;\n          return a.createdAt.getTime() - b.createdAt.getTime();\n        });\n\n      // Check if user has enough credits\n      const totalAvailable = grants.reduce((sum, g) => sum + g.creditsRemaining, 0);\n      if (totalAvailable < amount) {\n        throw new Error(`Insufficient credits. Available: ${totalAvailable}, Required: ${amount}`);\n      }\n\n      // Consume credits from grants using FIFO\n      let remaining = amount;\n      const transactions: CreditTransaction[] = [];\n\n      for (const grant of grants) {\n        if (remaining === 0) break;\n\n        const toConsume = Math.min(remaining, grant.creditsRemaining);\n        \n        // Update grant atomically\n        grant.creditsConsumed += toConsume;\n        grant.creditsRemaining -= toConsume;\n        this.creditGrants.set(grant.id, grant);\n\n        // Create transaction record\n        const txId = randomUUID();\n        const transaction: CreditTransaction = {\n          id: txId,\n          userId,\n          grantId: grant.id,\n          messageId,\n          delta: -toConsume,\n          reason,\n          createdAt: new Date(),\n        };\n\n        this.creditTransactions.set(txId, transaction);\n        transactions.push(transaction);\n\n        remaining -= toConsume;\n      }\n\n      return transactions;\n    });\n  }\n\n  async refundCreditsAtomic(\n    userId: string,\n    transactionIds: string[],\n    reason: string\n  ): Promise<CreditTransaction[]> {\n    return this.withCreditLock(userId, async () => {\n      const refundTransactions: CreditTransaction[] = [];\n\n      for (const txId of transactionIds) {\n        const originalTx = this.creditTransactions.get(txId);\n\n        if (!originalTx) {\n          throw new Error(`Transaction ${txId} not found`);\n        }\n\n        if (originalTx.userId !== userId) {\n          throw new Error(`Transaction ${txId} does not belong to user`);\n        }\n\n        if (originalTx.delta >= 0) {\n          throw new Error(`Transaction ${txId} is not a consumption`);\n        }\n\n        // Get the grant and restore credits atomically\n        const grant = this.creditGrants.get(originalTx.grantId);\n\n        if (!grant) {\n          throw new Error(`Grant ${originalTx.grantId} not found`);\n        }\n\n        const refundAmount = Math.abs(originalTx.delta);\n\n        // Update grant atomically\n        grant.creditsConsumed -= refundAmount;\n        grant.creditsRemaining += refundAmount;\n        this.creditGrants.set(grant.id, grant);\n\n        // Create refund transaction\n        const refundTxId = randomUUID();\n        const refundTx: CreditTransaction = {\n          id: refundTxId,\n          userId,\n          grantId: grant.id,\n          messageId: originalTx.messageId,\n          delta: refundAmount,\n          reason: `Refund: ${reason}`,\n          createdAt: new Date(),\n        };\n\n        this.creditTransactions.set(refundTxId, refundTx);\n        refundTransactions.push(refundTx);\n      }\n\n      return refundTransactions;\n    });\n  }\n}\n\nimport { DbStorage } from \"./db-storage\";\n\nexport const storage = new DbStorage();\n","size_bytes":24033},"client/src/App.tsx":{"content":"import { Switch, Route, Redirect, useLocation } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider, useQuery } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { ThemeProvider } from \"@/components/theme-provider\";\nimport { AppHeader } from \"@/components/app-header\";\nimport Dashboard from \"@/pages/dashboard\";\nimport JobForm from \"@/pages/job-form\";\nimport RosterBoard from \"@/pages/roster-board\";\nimport SendMessage from \"@/pages/send-message\";\nimport Contacts from \"@/pages/contacts\";\nimport Templates from \"@/pages/templates\";\nimport Calendar from \"@/pages/calendar\";\nimport Billing from \"@/pages/billing\";\nimport AdminPage from \"@/pages/admin\";\nimport AdminDashboard from \"@/pages/admin-dashboard\";\nimport TeamPage from \"@/pages/team\";\nimport AuthPage from \"@/pages/auth\";\nimport ResetPasswordPage from \"@/pages/reset-password\";\nimport PricingPage from \"@/pages/pricing\";\nimport RosterView from \"@/pages/roster-view\";\nimport MessageHistory from \"@/pages/message-history\";\nimport ProfilePage from \"@/pages/profile\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  const [location] = useLocation();\n  const { data: user, isLoading } = useQuery({\n    queryKey: [\"/api/auth/me\"],\n  });\n\n  // Public routes\n  const isPublicRoute = location === \"/auth\" || location.startsWith(\"/reset-password\") || location === \"/pricing\" || location.startsWith(\"/roster/\");\n\n  if (isLoading && !isPublicRoute) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"text-muted-foreground\">Loading...</div>\n      </div>\n    );\n  }\n\n  // Redirect to auth if not logged in and trying to access protected route\n  if (!user && !isPublicRoute) {\n    return <Redirect to=\"/auth\" />;\n  }\n\n  // Redirect to jobs if logged in and trying to access auth page\n  if (user && location === \"/auth\") {\n    return <Redirect to=\"/jobs\" />;\n  }\n\n  return (\n    <Switch>\n      <Route path=\"/auth\" component={AuthPage} />\n      <Route path=\"/reset-password\" component={ResetPasswordPage} />\n      <Route path=\"/pricing\" component={PricingPage} />\n      <Route path=\"/roster/:token\" component={RosterView} />\n      <Route path=\"/\">\n        {() => <Redirect to=\"/jobs\" />}\n      </Route>\n      <Route path=\"/jobs/new\" component={JobForm} />\n      <Route path=\"/jobs/:id/edit\" component={JobForm} />\n      <Route path=\"/jobs/:id/roster\" component={RosterBoard} />\n      <Route path=\"/jobs/:id/send\" component={SendMessage} />\n      <Route path=\"/jobs\" component={Dashboard} />\n      <Route path=\"/contacts\" component={Contacts} />\n      <Route path=\"/templates\" component={Templates} />\n      <Route path=\"/calendar\" component={Calendar} />\n      <Route path=\"/billing\" component={Billing} />\n      <Route path=\"/messages\" component={MessageHistory} />\n      <Route path=\"/profile\" component={ProfilePage} />\n      <Route path=\"/admin/admin.aspx\" component={AdminDashboard} />\n      <Route path=\"/team\" component={TeamPage} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction AppContent() {\n  const [location] = useLocation();\n  const isPublicRoute = location === \"/auth\" || location.startsWith(\"/reset-password\") || location === \"/pricing\" || location.startsWith(\"/roster/\");\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      {!isPublicRoute && <AppHeader />}\n      <main className={isPublicRoute ? \"\" : \"mx-auto max-w-screen-2xl px-6 py-8\"}>\n        <Router />\n      </main>\n    </div>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <ThemeProvider defaultTheme=\"light\">\n        <TooltipProvider>\n          <AppContent />\n          <Toaster />\n        </TooltipProvider>\n      </ThemeProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":3895},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/theme-toggle.tsx":{"content":"import { Moon, Sun } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { useTheme } from \"@/components/theme-provider\";\n\nexport function ThemeToggle() {\n  const { theme, setTheme } = useTheme();\n\n  return (\n    <Button\n      variant=\"ghost\"\n      size=\"icon\"\n      onClick={() => setTheme(theme === \"light\" ? \"dark\" : \"light\")}\n      data-testid=\"button-theme-toggle\"\n    >\n      {theme === \"light\" ? (\n        <Moon className=\"h-5 w-5\" />\n      ) : (\n        <Sun className=\"h-5 w-5\" />\n      )}\n      <span className=\"sr-only\">Toggle theme</span>\n    </Button>\n  );\n}\n","size_bytes":597},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n          await import(\"@replit/vite-plugin-dev-banner\").then((m) =>\n            m.devBanner(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":1080},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(`\n      after:content-[''] after:block after:absolute after:inset-0 after:rounded-full after:pointer-events-none after:border after:border-black/10 dark:after:border-white/10\n      relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full`,\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1592},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \".5625rem\", /* 9px */\n        md: \".375rem\", /* 6px */\n        sm: \".1875rem\", /* 3px */\n      },\n      colors: {\n        // Flat / base colors (regular buttons)\n        background: \"hsl(var(--background) / <alpha-value>)\",\n        foreground: \"hsl(var(--foreground) / <alpha-value>)\",\n        border: \"hsl(var(--border) / <alpha-value>)\",\n        input: \"hsl(var(--input) / <alpha-value>)\",\n        card: {\n          DEFAULT: \"hsl(var(--card) / <alpha-value>)\",\n          foreground: \"hsl(var(--card-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--card-border) / <alpha-value>)\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover) / <alpha-value>)\",\n          foreground: \"hsl(var(--popover-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--popover-border) / <alpha-value>)\",\n        },\n        primary: {\n          DEFAULT: \"hsl(var(--primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--primary-foreground) / <alpha-value>)\",\n          border: \"var(--primary-border)\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary) / <alpha-value>)\",\n          foreground: \"hsl(var(--secondary-foreground) / <alpha-value>)\",\n          border: \"var(--secondary-border)\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted) / <alpha-value>)\",\n          foreground: \"hsl(var(--muted-foreground) / <alpha-value>)\",\n          border: \"var(--muted-border)\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--accent-foreground) / <alpha-value>)\",\n          border: \"var(--accent-border)\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive) / <alpha-value>)\",\n          foreground: \"hsl(var(--destructive-foreground) / <alpha-value>)\",\n          border: \"var(--destructive-border)\",\n        },\n        ring: \"hsl(var(--ring) / <alpha-value>)\",\n        chart: {\n          \"1\": \"hsl(var(--chart-1) / <alpha-value>)\",\n          \"2\": \"hsl(var(--chart-2) / <alpha-value>)\",\n          \"3\": \"hsl(var(--chart-3) / <alpha-value>)\",\n          \"4\": \"hsl(var(--chart-4) / <alpha-value>)\",\n          \"5\": \"hsl(var(--chart-5) / <alpha-value>)\",\n        },\n        sidebar: {\n          ring: \"hsl(var(--sidebar-ring) / <alpha-value>)\",\n          DEFAULT: \"hsl(var(--sidebar) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--sidebar-border) / <alpha-value>)\",\n        },\n        \"sidebar-primary\": {\n          DEFAULT: \"hsl(var(--sidebar-primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-primary-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-primary-border)\",\n        },\n        \"sidebar-accent\": {\n          DEFAULT: \"hsl(var(--sidebar-accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-accent-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-accent-border)\"\n        },\n        status: {\n          online: \"rgb(34 197 94)\",\n          away: \"rgb(245 158 11)\",\n          busy: \"rgb(239 68 68)\",\n          offline: \"rgb(156 163 175)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: { height: \"0\" },\n          to: { height: \"var(--radix-accordion-content-height)\" },\n        },\n        \"accordion-up\": {\n          from: { height: \"var(--radix-accordion-content-height)\" },\n          to: { height: \"0\" },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":4050},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"replit.md":{"content":"# HeyTeam - Workforce Coordination Application\n\n## Overview\nHeyTeam is a lightweight, subscription-based workforce coordination application designed to streamline communication, availability collection, and job scheduling for managers and their crew members. It offers bi-directional SMS/Email messaging, real-time availability tracking, calendar visualization, and advanced contact management. The platform aims to provide a robust, multi-tenant solution with secure authentication to enhance team collaboration and operational efficiency.\n\n## User Preferences\nPreferred communication style: Simple, everyday language.\n\n## Recent Changes (October 24, 2025)\n\n**Message History/Journal Feature (October 24, 2025):**\n- Added comprehensive message history page at `/messages` accessible from header navigation\n- Displays all sent and received messages in a searchable table format\n- Backend endpoint GET `/api/messages/history` returns enriched message data with contact names and job names\n- Real-time client-side filtering by contact name, message content, and date\n- Table columns: Date & Time, Contact, Direction (Sent/Received), Job, Message, Status\n- Direction badges: \"Sent\" for outbound, \"Received\" for inbound messages\n- Status badges: color-coded (sent=default, failed=destructive, received=secondary)\n- Filter panel with three search fields: Contact Name, Message Content, Date\n- Clear Filters button appears when filters are active, shows filtered count\n- Navigation link \"Messages\" in header (desktop and mobile) with MessageSquare icon\n- Empty state displays \"No messages yet\" when no messages exist\n- Messages sorted by creation date (newest first) for easy tracking\n- Route configured at /messages with authentication required\n- Fully responsive design with proper test IDs for e2e testing\n\n**Roster Link Feature (October 24, 2025):**\n- Added roster link generation feature allowing SMS recipients to view their weekly job schedule via secure links\n- Added `rosterToken` field to contacts table (varchar, unique, nullable) for secure roster access\n- Added `includeRosterLink` field to templates table (boolean, default false)\n- Template creation form now includes \"Include Roster Link\" toggle switch\n- When enabled, messages automatically append roster link: \"View your weekly roster: [baseUrl]/roster/[token]\"\n- Roster tokens are 32-character unique IDs generated using nanoid, created lazily on first message send\n- Created public roster viewing page at `/roster/:token` accessible without authentication\n- Public roster displays contact name, upcoming jobs, and past jobs with full details (name, location, time, notes)\n- Backend endpoints: GET `/api/contacts/:id/roster-token` (auth required) and GET `/api/roster/:token` (public)\n- Roster shows ALL jobs where contact has availability records (not just confirmed status)\n- Security: Tokens are unique per contact, ownership checks on token generation, public page intentionally unauthenticated\n- E2E tests confirm end-to-end flow: token generation during messaging, public roster consumption without auth\n- Database migration applied manually using execute_sql_tool to add roster_token and include_roster_link columns\n\n## Recent Changes (October 23, 2025)\n\n**Job Deletion Feature (October 23, 2025):**\n- Added job deletion functionality with DELETE endpoint at `/api/jobs/:id`\n- Delete button (trash icon) appears on each job card in the Jobs page\n- Confirmation dialog requires typing \"heyteam\" to prevent accidental deletions\n- Authorization check ensures only job owner can delete\n- Cascade delete removes associated availability records automatically\n- Success toast and automatic list refresh after deletion\n- Placeholder `syncJobToCalendars` function added (calendar integration uses .ics downloads)\n\n**Login Page Updates (October 23, 2025):**\n- Replaced static illustration with animated GIF showing hand holding phone with messaging interface\n- Changed left panel gradient from blue to teal (from-[#14b8a6] to-[#0d9488]) to match primary button color\n- Maintains modern split-screen layout with logo and \"Stop calling around. Just HeyTeam it.\" headline\n\n**Navigation Simplification (October 23, 2025):**\n- Removed Dashboard tab from main navigation as it served the same purpose as Jobs\n- Jobs is now the primary landing page for authenticated users\n- Root route (/) redirects to /jobs for cleaner user experience\n- Navigation items: Jobs, Calendar, Contacts, Templates\n\n## Recent Changes (October 21, 2025)\n\n**Admin User Management & Instance Control (October 21, 2025):**\n- Implemented separate admin user management system with dedicated `adminUsers` table for platform administrators\n- Added user instance management with soft delete using `isActive` flag (preserves all user data)\n- Redesigned admin dashboard with tabbed interface:\n  - **User Instances Tab:** Displays all customer accounts with disable/enable actions and status indicators\n  - **Platform Admins Tab:** Manages platform administrators with create/delete functionality\n- Disable/enable functionality allows administrators to deactivate user accounts without data loss\n- Add Admin User dialog with secure password hashing (bcrypt, 10 rounds) before storage\n- Summary cards updated to show Total Instances (with active count), Active Subscriptions, Monthly Revenue, Total SMS Credits\n- All admin routes protected with `requireAdmin` middleware verifying both authentication and `isAdmin = true`\n- E2E tests confirm user disable/enable, admin user creation/deletion, and authorization work correctly\n\n**Admin Monitoring Dashboard (October 21, 2025):**\n- Created comprehensive admin dashboard at /admin/dashboard for monitoring all registered users\n- Added referralCode field to users schema to track referral sources\n- Added createdAt timestamp to users schema to track registration dates\n- Dashboard displays summary cards: Total Users, Active Subscriptions, Monthly Revenue (mixed currencies), Total SMS Credits\n- User table shows: Company name, Email, Subscription plan, Status, SMS credits, Monthly payment amount, Referral code, Registration date\n- Monthly payment calculated based on user's subscription plan and preferred currency (GBP/USD/EUR)\n- Frontend authorization redirects non-admin users attempting to access admin routes\n- Backend authorization via requireAdmin middleware ensures API security\n- Admin navigation link (Shield icon) only visible to users with isAdmin = true\n- E2E tests confirm authorization, data display, and registration date tracking work correctly\n\n**Jobs Search Function (October 21, 2025):**\n- Added real-time search functionality to the Jobs/Dashboard page\n- Search filters jobs by name, location, and description (case-insensitive)\n- Search bar appears automatically when jobs exist in the system\n- Dynamic empty state: Shows \"No jobs found\" with clear search button when no matches\n- Filters both upcoming and past jobs independently\n- E2E tests confirm search, filtering, and clear functionality work correctly\n\n**Modern Login Page Redesign (October 21, 2025):**\n- Redesigned login page with modern split-screen layout\n- Left panel: Blue gradient background with logo and \"Stop calling around. Just HeyTeam it.\" headline\n- Right panel: Clean white form area with Sign in/Sign up states\n- Removed tabs in favor of state-based switching for cleaner UX\n- Larger input fields (h-11) for better usability\n- Terms of Service mention on registration\n- Responsive design: Single column on mobile, split-screen on desktop\n- E2E tests confirm registration, login, and form switching work correctly\n\n**Password Reminder for Team Members (October 21, 2025):**\n- Added password reminder feature allowing owners and admins to reset team member passwords\n- Backend endpoint `/api/organization/members/:userId/password-reminder` generates temporary 8-character password\n- Password reminder button visible in Team Members tab on Contacts page (owners/admins only)\n- Cannot send password reminder to yourself\n- Dialog displays generated temporary password with copy-to-clipboard functionality\n- Security: All plaintext password logging removed from server logs (invite and password reminder endpoints)\n- Temporary passwords securely hashed with bcrypt (10 rounds) before storage\n- E2E tests confirm authorization, password generation, and login with new password work correctly\n\n## System Architecture\n\n### Frontend Architecture\n**Framework:** React with TypeScript using Vite.\n**UI Component System:** shadcn/ui components with Radix UI primitives, styled using Tailwind CSS.\n**Styling:** Tailwind CSS with custom design tokens, Linear-inspired aesthetic, light/dark mode support, and Inter font family.\n**State Management:** TanStack Query for data fetching, React Hook Form with Zod for forms, and Wouter for routing.\n**Key Design Principles:** High information density, consistent visual hierarchy, purposeful minimalism, and a professional blue primary color.\n**UI/UX Decisions:** Modern split-screen login/registration with clear forms, responsive design for mobile and desktop, dynamic empty states, clickable status badges for navigation, and improved mobile optimization for headers and forms.\n\n### Backend Architecture\n**Server Framework:** Express.js with TypeScript.\n**API Design:** RESTful endpoints (`/api/*`), JSON request/response, session-based authentication with bcrypt, and centralized error handling.\n**Core Modules:** Interface-based storage abstraction, PostgreSQL implementation using Drizzle ORM, and API route definitions.\n**Key Backend Services:** Message Pipeline, Availability Tracking, Calendar Invite Generation, and Subscription Management.\n\n### Database Architecture\n**ORM:** Drizzle ORM with PostgreSQL dialect, using Neon serverless PostgreSQL.\n**Schema Design:** Includes core entities like `users`, `contacts`, `jobs`, `organizations`, `subscriptions`, and messaging entities (`campaigns`, `messages`, `availability`). Extensive use of foreign key constraints and UUID primary keys for scalability.\n**Admin Tables:** Separate `adminUsers` table for platform administrators, independent from regular portal users.\n**Soft Delete:** Users table includes `isActive` boolean field for soft delete pattern - disabled users retain all data.\n\n### Authentication & Authorization\n**Implementation:** Full session-based authentication with bcrypt hashing (10 rounds).\n**Authentication Features:** User registration, login/logout (using email), password reset with time-limited tokens, and automatic basic subscription creation. Email persistence across logins.\n**Authorization:** Role-based access control (`isAdmin`, `teamRole`) with middleware for protected routes and organization-scoped data access.\n**Security Measures:** httpOnly cookies, password reset tokens with expiration, user ID isolation, and password hashes never returned in API responses.\n\n### Feature Specifications\n**Jobs Search:** Real-time search functionality on the Dashboard by name, location, and description.\n**Calendar Integration:** Generation and download of RFC 5545-compliant `.ics` calendar invites for job events, eliminating OAuth complexity.\n**Reporting:** Downloadable PDF resource allocation reports showing contact assignments, availability, and off-shift status.\n**Contact Management:** Visual status indicators for contacts (Free, On Job, Off Shift), status filtering, and clickable status badges to navigate to jobs.\n**Multi-Currency Subscriptions:** Support for GBP, USD, EUR across subscription plans and SMS bundles, with a dedicated pricing page and Stripe integration.\n**Team Messaging:** Ability to send 1:1 messages to team members from a dedicated tab on the Contacts page, with role badges and organization-scoped security.\n\n## External Dependencies\n\n**Communication Services:**\n- **Twilio:** For bi-directional SMS messaging via Programmable Messaging API.\n\n**Payment Processing:**\n- **Stripe:** For subscription billing, customer management, and webhook handling.\n\n**Infrastructure Services:**\n- **Neon Database:** Serverless PostgreSQL.\n\n**Third-Party UI Libraries:**\n- **Radix UI:** Accessible component primitives.\n- **date-fns:** Date manipulation.\n- **cmdk:** Command palette interface.\n- **react-day-picker:** Calendar date selection.\n- **PDFKit:** For server-side PDF generation.","size_bytes":12284},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/ui/sidebar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, VariantProps } from \"class-variance-authority\"\nimport { PanelLeftIcon } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nfunction SidebarProvider({\n  defaultOpen = true,\n  open: openProp,\n  onOpenChange: setOpenProp,\n  className,\n  style,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  defaultOpen?: boolean\n  open?: boolean\n  onOpenChange?: (open: boolean) => void\n}) {\n  const isMobile = useIsMobile()\n  const [openMobile, setOpenMobile] = React.useState(false)\n\n  // This is the internal state of the sidebar.\n  // We use openProp and setOpenProp for control from outside the component.\n  const [_open, _setOpen] = React.useState(defaultOpen)\n  const open = openProp ?? _open\n  const setOpen = React.useCallback(\n    (value: boolean | ((value: boolean) => boolean)) => {\n      const openState = typeof value === \"function\" ? value(open) : value\n      if (setOpenProp) {\n        setOpenProp(openState)\n      } else {\n        _setOpen(openState)\n      }\n\n      // This sets the cookie to keep the sidebar state.\n      document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n    },\n    [setOpenProp, open]\n  )\n\n  // Helper to toggle the sidebar.\n  const toggleSidebar = React.useCallback(() => {\n    return isMobile ? setOpenMobile((open) => !open) : setOpen((open) => !open)\n  }, [isMobile, setOpen, setOpenMobile])\n\n  // Adds a keyboard shortcut to toggle the sidebar.\n  React.useEffect(() => {\n    const handleKeyDown = (event: KeyboardEvent) => {\n      if (\n        event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n        (event.metaKey || event.ctrlKey)\n      ) {\n        event.preventDefault()\n        toggleSidebar()\n      }\n    }\n\n    window.addEventListener(\"keydown\", handleKeyDown)\n    return () => window.removeEventListener(\"keydown\", handleKeyDown)\n  }, [toggleSidebar])\n\n  // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n  // This makes it easier to style the sidebar with Tailwind classes.\n  const state = open ? \"expanded\" : \"collapsed\"\n\n  const contextValue = React.useMemo<SidebarContextProps>(\n    () => ({\n      state,\n      open,\n      setOpen,\n      isMobile,\n      openMobile,\n      setOpenMobile,\n      toggleSidebar,\n    }),\n    [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n  )\n\n  return (\n    <SidebarContext.Provider value={contextValue}>\n      <TooltipProvider delayDuration={0}>\n        <div\n          data-slot=\"sidebar-wrapper\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH,\n              \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n              ...style,\n            } as React.CSSProperties\n          }\n          className={cn(\n            \"group/sidebar-wrapper has-data-[variant=inset]:bg-sidebar flex min-h-svh w-full\",\n            className\n          )}\n          {...props}\n        >\n          {children}\n        </div>\n      </TooltipProvider>\n    </SidebarContext.Provider>\n  )\n}\n\nfunction Sidebar({\n  side = \"left\",\n  variant = \"sidebar\",\n  collapsible = \"offcanvas\",\n  className,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  side?: \"left\" | \"right\"\n  variant?: \"sidebar\" | \"floating\" | \"inset\"\n  collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n}) {\n  const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n  if (collapsible === \"none\") {\n    return (\n      <div\n        data-slot=\"sidebar\"\n        className={cn(\n          \"bg-sidebar text-sidebar-foreground flex h-full w-[var(--sidebar-width)] flex-col\",\n          className\n        )}\n        {...props}\n      >\n        {children}\n      </div>\n    )\n  }\n\n  if (isMobile) {\n    return (\n      <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n        <SheetContent\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar\"\n          data-mobile=\"true\"\n          className=\"bg-sidebar text-sidebar-foreground w-[var(--sidebar-width)] p-0 [&>button]:hidden\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n            } as React.CSSProperties\n          }\n          side={side}\n        >\n          <SheetHeader className=\"sr-only\">\n            <SheetTitle>Sidebar</SheetTitle>\n            <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n          </SheetHeader>\n          <div className=\"flex h-full w-full flex-col\">{children}</div>\n        </SheetContent>\n      </Sheet>\n    )\n  }\n\n  return (\n    <div\n      className=\"group peer text-sidebar-foreground hidden md:block\"\n      data-state={state}\n      data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n      data-variant={variant}\n      data-side={side}\n      data-slot=\"sidebar\"\n    >\n      {/* This is what handles the sidebar gap on desktop */}\n      <div\n        data-slot=\"sidebar-gap\"\n        className={cn(\n          \"relative w-[var(--sidebar-width)] bg-transparent transition-[width] duration-200 ease-linear\",\n          \"group-data-[collapsible=offcanvas]:w-0\",\n          \"group-data-[side=right]:rotate-180\",\n          variant === \"floating\" || variant === \"inset\"\n            ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4))]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)]\"\n        )}\n      />\n      <div\n        data-slot=\"sidebar-container\"\n        className={cn(\n          \"fixed inset-y-0 z-10 hidden h-svh w-[var(--sidebar-width)] transition-[left,right,width] duration-200 ease-linear md:flex\",\n          side === \"left\"\n            ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n            : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n          // Adjust the padding for floating and inset variants.\n          variant === \"floating\" || variant === \"inset\"\n            ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4)+2px)]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n          className\n        )}\n        {...props}\n      >\n        <div\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar-inner\"\n          className=\"bg-sidebar group-data-[variant=floating]:border-sidebar-border flex h-full w-full flex-col group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:shadow-sm\"\n        >\n          {children}\n        </div>\n      </div>\n    </div>\n  )\n}\n\nfunction SidebarTrigger({\n  className,\n  onClick,\n  ...props\n}: React.ComponentProps<typeof Button>) {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      data-sidebar=\"trigger\"\n      data-slot=\"sidebar-trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeftIcon />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n}\n\nfunction SidebarRail({ className, ...props }: React.ComponentProps<\"button\">) {\n  const { toggleSidebar } = useSidebar()\n\n  // Note: Tailwind v3.4 doesn't support \"in-\" selectors. So the rail won't work perfectly.\n  return (\n    <button\n      data-sidebar=\"rail\"\n      data-slot=\"sidebar-rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"hover:after:bg-sidebar-border absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear group-data-[side=left]:-right-4 group-data-[side=right]:left-0 after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] sm:flex\",\n        \"in-data-[side=left]:cursor-w-resize in-data-[side=right]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"hover:group-data-[collapsible=offcanvas]:bg-sidebar group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInset({ className, ...props }: React.ComponentProps<\"main\">) {\n  return (\n    <main\n      data-slot=\"sidebar-inset\"\n      className={cn(\n        \"bg-background relative flex w-full flex-1 flex-col\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow-sm md:peer-data-[variant=inset]:peer-data-[state=collapsed]:ml-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInput({\n  className,\n  ...props\n}: React.ComponentProps<typeof Input>) {\n  return (\n    <Input\n      data-slot=\"sidebar-input\"\n      data-sidebar=\"input\"\n      className={cn(\"bg-background h-8 w-full shadow-none\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarHeader({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-header\"\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarFooter({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-footer\"\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarSeparator({\n  className,\n  ...props\n}: React.ComponentProps<typeof Separator>) {\n  return (\n    <Separator\n      data-slot=\"sidebar-separator\"\n      data-sidebar=\"separator\"\n      className={cn(\"bg-sidebar-border mx-2 w-auto\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarContent({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-content\"\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroup({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group\"\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupLabel({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"div\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-label\"\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"text-sidebar-foreground/70 ring-sidebar-ring flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium outline-hidden transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:h-4 [&>svg]:w-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupAction({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"button\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-action\"\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground absolute top-3.5 right-3 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupContent({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group-content\"\n      data-sidebar=\"group-content\"\n      className={cn(\"w-full text-sm\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenu({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu\"\n      data-sidebar=\"menu\"\n      className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuItem({ className, ...props }: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-item\"\n      data-sidebar=\"menu-item\"\n      className={cn(\"group/menu-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-hidden ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-data-[sidebar=menu-action]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:w-8! group-data-[collapsible=icon]:h-8! group-data-[collapsible=icon]:p-2! [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:p-0!\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nfunction SidebarMenuButton({\n  asChild = false,\n  isActive = false,\n  variant = \"default\",\n  size = \"default\",\n  tooltip,\n  className,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  isActive?: boolean\n  tooltip?: string | React.ComponentProps<typeof TooltipContent>\n} & VariantProps<typeof sidebarMenuButtonVariants>) {\n  const Comp = asChild ? Slot : \"button\"\n  const { isMobile, state } = useSidebar()\n\n  const button = (\n    <Comp\n      data-slot=\"sidebar-menu-button\"\n      data-sidebar=\"menu-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n      {...props}\n    />\n  )\n\n  if (!tooltip) {\n    return button\n  }\n\n  if (typeof tooltip === \"string\") {\n    tooltip = {\n      children: tooltip,\n    }\n  }\n\n  return (\n    <Tooltip>\n      <TooltipTrigger asChild>{button}</TooltipTrigger>\n      <TooltipContent\n        side=\"right\"\n        align=\"center\"\n        hidden={state !== \"collapsed\" || isMobile}\n        {...tooltip}\n      />\n    </Tooltip>\n  )\n}\n\nfunction SidebarMenuAction({\n  className,\n  asChild = false,\n  showOnHover = false,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  showOnHover?: boolean\n}) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-action\"\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground peer-hover/menu-button:text-sidebar-accent-foreground absolute top-1.5 right-1 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"peer-data-[active=true]/menu-button:text-sidebar-accent-foreground group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuBadge({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-menu-badge\"\n      data-sidebar=\"menu-badge\"\n      className={cn(\n        \"text-sidebar-foreground pointer-events-none absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums select-none\",\n        \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSkeleton({\n  className,\n  showIcon = false,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  showIcon?: boolean\n}) {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      data-slot=\"sidebar-menu-skeleton\"\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[var(--skeleton-width)] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n}\n\nfunction SidebarMenuSub({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu-sub\"\n      data-sidebar=\"menu-sub\"\n      className={cn(\n        \"border-sidebar-border mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l px-2.5 py-0.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubItem({\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-sub-item\"\n      data-sidebar=\"menu-sub-item\"\n      className={cn(\"group/menu-sub-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubButton({\n  asChild = false,\n  size = \"md\",\n  isActive = false,\n  className,\n  ...props\n}: React.ComponentProps<\"a\"> & {\n  asChild?: boolean\n  size?: \"sm\" | \"md\"\n  isActive?: boolean\n}) {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-sub-button\"\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground active:bg-sidebar-accent active:text-sidebar-accent-foreground [&>svg]:text-sidebar-accent-foreground flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 outline outline-2 outline-transparent outline-offset-2 focus-visible:ring-2 disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":21846},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"shadcn-card rounded-xl border bg-card border-card-border text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n));\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n));\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n));\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\nexport {\n  Card,\n  CardHeader,\n  CardFooter,\n  CardTitle,\n  CardDescription,\n  CardContent,\n}\n","size_bytes":1904},"server/lib/reply-parser.ts":{"content":"export type ParsedReply = {\n  status: \"confirmed\" | \"maybe\" | \"declined\" | \"no_reply\";\n  shiftPreference?: string;\n};\n\nexport function parseReply(message: string): ParsedReply {\n  const normalized = message.trim().toLowerCase();\n\n  if (normalized === \"y\" || normalized === \"yes\" || normalized === \"👍\") {\n    return { status: \"confirmed\" };\n  }\n\n  if (normalized === \"n\" || normalized === \"no\" || normalized === \"👎\") {\n    return { status: \"declined\" };\n  }\n\n  if (normalized === \"1\") {\n    return { status: \"confirmed\", shiftPreference: \"AM Shift\" };\n  }\n\n  if (normalized === \"2\") {\n    return { status: \"confirmed\", shiftPreference: \"PM Shift\" };\n  }\n\n  if (normalized === \"3\") {\n    return { status: \"confirmed\", shiftPreference: \"Full Day\" };\n  }\n\n  if (normalized === \"maybe\" || normalized === \"m\") {\n    return { status: \"maybe\" };\n  }\n\n  return { status: \"no_reply\" };\n}\n","size_bytes":884},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"server/lib/template-renderer.ts":{"content":"import { format } from \"date-fns\";\nimport type { Contact, Job } from \"@shared/schema\";\n\nexport function renderTemplate(template: string, contact: Contact, job: Job): string {\n  return template\n    .replace(/{FirstName}/g, contact.firstName)\n    .replace(/{LastName}/g, contact.lastName)\n    .replace(/{JobName}/g, job.name)\n    .replace(/{Date}/g, format(new Date(job.startTime), \"MMMM d, yyyy\"))\n    .replace(/{Time}/g, format(new Date(job.startTime), \"h:mm a\"))\n    .replace(/{Location}/g, job.location);\n}\n","size_bytes":509},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport session from \"express-session\";\nimport createMemoryStore from \"memorystore\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst MemoryStore = createMemoryStore(session);\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\n// Session configuration\napp.use(\n  session({\n    secret: process.env.SESSION_SECRET || \"dev-secret-change-in-production\",\n    resave: false,\n    saveUninitialized: false,\n    store: new MemoryStore({\n      checkPeriod: 86400000, // 24 hours\n    }),\n    cookie: {\n      secure: process.env.NODE_ENV === \"production\",\n      httpOnly: true,\n      maxAge: 7 * 24 * 60 * 60 * 1000, // 7 days\n    },\n  })\n);\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2603},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/pages/not-found.tsx":{"content":"import { Link } from \"wouter\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { AlertCircle, Home } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"flex items-center justify-center min-h-[600px]\">\n      <Card className=\"max-w-md\">\n        <CardContent className=\"p-12 text-center\">\n          <AlertCircle className=\"h-16 w-16 text-destructive mx-auto mb-6\" />\n          <h1 className=\"text-3xl font-semibold mb-3\">Page Not Found</h1>\n          <p className=\"text-muted-foreground mb-8\">\n            The page you're looking for doesn't exist or has been moved.\n          </p>\n          <Link href=\"/\">\n            <a data-testid=\"link-home\">\n              <Button className=\"gap-2\">\n                <Home className=\"h-4 w-4\" />\n                Back to Dashboard\n              </Button>\n            </a>\n          </Link>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":984},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"server/lib/twilio-client.ts":{"content":"import twilio from 'twilio';\n\nlet connectionSettings: any;\n\nasync function getCredentials() {\n  const hostname = process.env.REPLIT_CONNECTORS_HOSTNAME\n  const xReplitToken = process.env.REPL_IDENTITY \n    ? 'repl ' + process.env.REPL_IDENTITY \n    : process.env.WEB_REPL_RENEWAL \n    ? 'depl ' + process.env.WEB_REPL_RENEWAL \n    : null;\n\n  if (!xReplitToken) {\n    throw new Error('X_REPLIT_TOKEN not found for repl/depl');\n  }\n\n  connectionSettings = await fetch(\n    'https://' + hostname + '/api/v2/connection?include_secrets=true&connector_names=twilio',\n    {\n      headers: {\n        'Accept': 'application/json',\n        'X_REPLIT_TOKEN': xReplitToken\n      }\n    }\n  ).then(res => res.json()).then(data => data.items?.[0]);\n\n  if (!connectionSettings || (!connectionSettings.settings.account_sid || !connectionSettings.settings.api_key || !connectionSettings.settings.api_key_secret)) {\n    throw new Error('Twilio not connected');\n  }\n  return {\n    accountSid: connectionSettings.settings.account_sid,\n    apiKey: connectionSettings.settings.api_key,\n    apiKeySecret: connectionSettings.settings.api_key_secret,\n    phoneNumber: connectionSettings.settings.phone_number\n  };\n}\n\nexport async function getTwilioClient() {\n  const { accountSid, apiKey, apiKeySecret } = await getCredentials();\n  return twilio(apiKey, apiKeySecret, {\n  accountSid: accountSid\n  });\n}\n\nexport async function getTwilioFromPhoneNumber() {\n  const { phoneNumber } = await getCredentials();\n  return phoneNumber;\n}\n","size_bytes":1503},"client/src/pages/contacts.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useLocation } from \"wouter\";\nimport { Card, CardContent, CardHeader } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n  DialogFooter,\n  DialogDescription,\n} from \"@/components/ui/dialog\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage, FormDescription } from \"@/components/ui/form\";\nimport { Plus, Search, Phone, Mail, UserX, Upload, FileText, Pencil, X, Calendar, Award, Send, Filter, MapPin, MessageSquare, Crown, Shield, User as UserIcon, Trash2, CheckCircle, Briefcase, Clock, Download, Key, Copy } from \"lucide-react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { insertContactSchema, type InsertContact, type Contact } from \"@shared/schema\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Label } from \"@/components/ui/label\";\nimport { COUNTRIES } from \"@/lib/constants\";\n\nexport default function Contacts() {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [skillFilter, setSkillFilter] = useState<string>(\"\");\n  const [qualificationFilter, setQualificationFilter] = useState<string>(\"\");\n  const [locationFilter, setLocationFilter] = useState(\"\");\n  const [statusFilter, setStatusFilter] = useState<string>(\"\");\n  const [showFilters, setShowFilters] = useState(false);\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\n  const [isImportDialogOpen, setIsImportDialogOpen] = useState(false);\n  const [isBulkSMSOpen, setIsBulkSMSOpen] = useState(false);\n  const [editingContact, setEditingContact] = useState<Contact | null>(null);\n  const [messageDialogOpen, setMessageDialogOpen] = useState(false);\n  const [selectedMember, setSelectedMember] = useState<any>(null);\n  const [messageContent, setMessageContent] = useState(\"\");\n  const [contactMessageDialogOpen, setContactMessageDialogOpen] = useState(false);\n  const [selectedContact, setSelectedContact] = useState<Contact | null>(null);\n  const [contactMessageContent, setContactMessageContent] = useState(\"\");\n  const [isDownloadingReport, setIsDownloadingReport] = useState(false);\n  const [passwordReminderDialogOpen, setPasswordReminderDialogOpen] = useState(false);\n  const [tempPassword, setTempPassword] = useState(\"\");\n  const [passwordReminderUsername, setPasswordReminderUsername] = useState(\"\");\n  const { toast } = useToast();\n\n  const handleDownloadReport = async () => {\n    try {\n      setIsDownloadingReport(true);\n      const response = await fetch('/api/reports/resource-allocation');\n      if (!response.ok) {\n        throw new Error('Failed to generate report');\n      }\n      \n      // Get the PDF blob\n      const blob = await response.blob();\n      \n      // Create a download link\n      const url = window.URL.createObjectURL(blob);\n      const a = document.createElement('a');\n      a.href = url;\n      a.download = `resource-allocation-${new Date().toISOString().split('T')[0]}.pdf`;\n      document.body.appendChild(a);\n      a.click();\n      window.URL.revokeObjectURL(url);\n      document.body.removeChild(a);\n      \n      toast({\n        title: \"Report downloaded\",\n        description: \"Resource allocation report has been downloaded successfully.\",\n      });\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to download report. Please try again.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsDownloadingReport(false);\n    }\n  };\n\n  const { data: contacts, isLoading } = useQuery<Contact[]>({\n    queryKey: [\"/api/contacts\"],\n  });\n\n  const { data: teamMembers, isLoading: membersLoading } = useQuery({\n    queryKey: [\"/api/organization/members\"],\n  });\n\n  const { data: currentUser } = useQuery({\n    queryKey: [\"/api/auth/me\"],\n  });\n\n  // Get unique skills and qualifications for filter dropdowns\n  const allSkills = Array.from(new Set(contacts?.flatMap(c => c.skills || []) || []));\n  const allQualifications = Array.from(new Set(contacts?.flatMap(c => c.qualifications || []) || []));\n\n  const filteredContacts = contacts?.filter((contact) => {\n    const fullName = `${contact.firstName} ${contact.lastName}`.toLowerCase();\n    const query = searchQuery.toLowerCase();\n    const nameMatch = fullName.includes(query) || contact.phone.includes(query) || contact.email?.includes(query);\n    \n    // Apply skill filter\n    const skillMatch = !skillFilter || (contact.skills && contact.skills.includes(skillFilter));\n    \n    // Apply qualification filter\n    const qualificationMatch = !qualificationFilter || (contact.qualifications && contact.qualifications.includes(qualificationFilter));\n    \n    // Apply location filter\n    const locationMatch = !locationFilter || (contact.address && contact.address.toLowerCase().includes(locationFilter.toLowerCase()));\n    \n    // Apply status filter\n    const statusMatch = !statusFilter || contact.status === statusFilter;\n    \n    return nameMatch && skillMatch && qualificationMatch && locationMatch && statusMatch;\n  });\n\n  // Password reminder mutation\n  const passwordReminderMutation = useMutation({\n    mutationFn: async (userId: string) => {\n      const res = await apiRequest(\"POST\", `/api/organization/members/${userId}/password-reminder`, {});\n      return res.json();\n    },\n    onSuccess: (data) => {\n      setTempPassword(data.tempPassword);\n      setPasswordReminderUsername(data.username);\n      setPasswordReminderDialogOpen(true);\n      toast({\n        title: \"Password reminder sent\",\n        description: `Temporary password generated for ${data.username}`,\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Failed to send password reminder\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center min-h-[400px]\">\n        <div className=\"animate-spin w-8 h-8 border-4 border-primary border-t-transparent rounded-full\" aria-label=\"Loading\" />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex flex-col sm:flex-row items-start sm:items-center justify-between gap-4\">\n        <div>\n          <h1 className=\"text-3xl font-semibold\" data-testid=\"text-page-title\">Contacts</h1>\n          <p className=\"text-muted-foreground mt-1\">Manage your crew members and their details</p>\n        </div>\n        <div className=\"flex gap-2 flex-wrap\">\n          <Button \n            variant=\"outline\" \n            className=\"gap-2\" \n            onClick={handleDownloadReport}\n            disabled={isDownloadingReport}\n            data-testid=\"button-download-report\"\n          >\n            <Download className=\"h-4 w-4\" />\n            {isDownloadingReport ? \"Generating...\" : \"Download Report\"}\n          </Button>\n          <Dialog open={isImportDialogOpen} onOpenChange={setIsImportDialogOpen}>\n            <DialogTrigger asChild>\n              <Button variant=\"outline\" className=\"gap-2\" data-testid=\"button-import-csv\">\n                <Upload className=\"h-4 w-4\" />\n                Import CSV\n              </Button>\n            </DialogTrigger>\n            <DialogContent className=\"max-w-2xl\">\n              <ImportCSV onSuccess={() => setIsImportDialogOpen(false)} />\n            </DialogContent>\n          </Dialog>\n          <Dialog open={isDialogOpen} onOpenChange={(open) => {\n            setIsDialogOpen(open);\n            if (!open) setEditingContact(null);\n          }}>\n            <DialogTrigger asChild>\n              <Button className=\"gap-2\" data-testid=\"button-add-contact\">\n                <Plus className=\"h-4 w-4\" />\n                Add Contact\n              </Button>\n            </DialogTrigger>\n            <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\">\n              <ContactForm \n                contact={editingContact} \n                onSuccess={() => {\n                  setIsDialogOpen(false);\n                  setEditingContact(null);\n                }} \n              />\n            </DialogContent>\n          </Dialog>\n        </div>\n      </div>\n\n      <Dialog open={isBulkSMSOpen} onOpenChange={setIsBulkSMSOpen}>\n        <DialogContent className=\"max-w-lg\">\n          <BulkSMSForm \n            contacts={filteredContacts || []} \n            onSuccess={() => setIsBulkSMSOpen(false)} \n          />\n        </DialogContent>\n      </Dialog>\n\n      <Dialog open={messageDialogOpen} onOpenChange={setMessageDialogOpen}>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle>Message {selectedMember?.username}</DialogTitle>\n            <DialogDescription>\n              Send a direct message to this team member\n            </DialogDescription>\n          </DialogHeader>\n          <div className=\"space-y-4 py-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"message\">Message</Label>\n              <Textarea\n                id=\"message\"\n                placeholder=\"Type your message here...\"\n                value={messageContent}\n                onChange={(e) => setMessageContent(e.target.value)}\n                rows={5}\n                data-testid=\"input-message-content\"\n              />\n            </div>\n          </div>\n          <DialogFooter>\n            <Button\n              onClick={async () => {\n                try {\n                  await apiRequest(\"POST\", \"/api/messages/team\", {\n                    recipientId: selectedMember?.id,\n                    content: messageContent,\n                  });\n                  toast({ title: \"Message sent successfully\" });\n                  setMessageDialogOpen(false);\n                  setMessageContent(\"\");\n                } catch (error: any) {\n                  toast({\n                    title: \"Failed to send message\",\n                    description: error.message,\n                    variant: \"destructive\",\n                  });\n                }\n              }}\n              disabled={!messageContent.trim()}\n              data-testid=\"button-send-message\"\n            >\n              <Send className=\"h-4 w-4 mr-2\" />\n              Send Message\n            </Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n\n      <Dialog open={contactMessageDialogOpen} onOpenChange={setContactMessageDialogOpen}>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle>Message {selectedContact?.firstName} {selectedContact?.lastName}</DialogTitle>\n            <DialogDescription>\n              Send an SMS message to this contact\n            </DialogDescription>\n          </DialogHeader>\n          <div className=\"space-y-4 py-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"contact-message\">Message</Label>\n              <Textarea\n                id=\"contact-message\"\n                placeholder=\"Type your SMS message here...\"\n                value={contactMessageContent}\n                onChange={(e) => setContactMessageContent(e.target.value)}\n                rows={5}\n                data-testid=\"input-contact-message-content\"\n              />\n              <p className=\"text-xs text-muted-foreground\">\n                Message will be sent via SMS to {selectedContact?.phone}\n              </p>\n            </div>\n          </div>\n          <DialogFooter>\n            <Button\n              variant=\"outline\"\n              onClick={() => {\n                setContactMessageDialogOpen(false);\n                setContactMessageContent(\"\");\n              }}\n            >\n              Cancel\n            </Button>\n            <Button\n              onClick={async () => {\n                if (!selectedContact) return;\n                \n                try {\n                  await apiRequest(\"POST\", \"/api/messages/bulk-sms\", {\n                    contactIds: [selectedContact.id],\n                    message: contactMessageContent,\n                  });\n                  \n                  // Close dialog and clear content first\n                  setContactMessageDialogOpen(false);\n                  setContactMessageContent(\"\");\n                  \n                  // Show success toast after dialog closes\n                  setTimeout(() => {\n                    toast({ \n                      title: \"Message sent successfully\",\n                      description: `SMS sent to ${selectedContact.firstName} ${selectedContact.lastName}` \n                    });\n                  }, 150);\n                } catch (error: any) {\n                  // Parse error message from response\n                  let errorMessage = error.message || \"An error occurred\";\n                  try {\n                    // Error format from apiRequest is \"status: json\"\n                    const parts = errorMessage.split(\": \");\n                    if (parts.length > 1) {\n                      const jsonPart = parts.slice(1).join(\": \");\n                      const parsed = JSON.parse(jsonPart);\n                      errorMessage = parsed.message || errorMessage;\n                    }\n                  } catch {\n                    // If parsing fails, use the original error message\n                  }\n                  \n                  toast({\n                    title: \"Failed to send message\",\n                    description: errorMessage,\n                    variant: \"destructive\",\n                  });\n                }\n              }}\n              disabled={!contactMessageContent.trim()}\n              data-testid=\"button-send-contact-message\"\n            >\n              <Send className=\"h-4 w-4 mr-2\" />\n              Send SMS\n            </Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n\n      <Dialog open={passwordReminderDialogOpen} onOpenChange={setPasswordReminderDialogOpen}>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle>Password Reminder Generated</DialogTitle>\n            <DialogDescription>\n              A temporary password has been generated for {passwordReminderUsername}\n            </DialogDescription>\n          </DialogHeader>\n          <div className=\"space-y-4 py-4\">\n            <div className=\"space-y-2\">\n              <Label>Temporary Password</Label>\n              <div className=\"flex items-center gap-2\">\n                <Input\n                  value={tempPassword}\n                  readOnly\n                  className=\"font-mono text-lg\"\n                  data-testid=\"input-temp-password\"\n                />\n                <Button\n                  variant=\"outline\"\n                  size=\"icon\"\n                  onClick={() => {\n                    navigator.clipboard.writeText(tempPassword);\n                    toast({ title: \"Copied to clipboard\" });\n                  }}\n                  data-testid=\"button-copy-password\"\n                >\n                  <Copy className=\"h-4 w-4\" />\n                </Button>\n              </div>\n              <p className=\"text-sm text-muted-foreground\">\n                Share this password with the team member. They should change it after logging in.\n              </p>\n            </div>\n          </div>\n          <DialogFooter>\n            <Button\n              onClick={() => {\n                setPasswordReminderDialogOpen(false);\n                setTempPassword(\"\");\n                setPasswordReminderUsername(\"\");\n              }}\n              data-testid=\"button-close-password-dialog\"\n            >\n              Done\n            </Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n\n      <Tabs defaultValue=\"crew\" className=\"space-y-4\">\n        <TabsList data-testid=\"tabs-contacts\">\n          <TabsTrigger value=\"crew\" data-testid=\"tab-crew\">Crew Contacts</TabsTrigger>\n          <TabsTrigger value=\"team\" data-testid=\"tab-team\">Team Members</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"crew\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <div className=\"space-y-3\">\n                <div className=\"flex gap-2\">\n                  <div className=\"relative flex-1\">\n                    <Search className=\"absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n                    <Input\n                      placeholder=\"Search contacts by name, phone, or email...\"\n                      value={searchQuery}\n                      onChange={(e) => setSearchQuery(e.target.value)}\n                      className=\"pl-9\"\n                      data-testid=\"input-search-contacts\"\n                    />\n                  </div>\n                  <Button \n                    variant=\"outline\" \n                    size=\"icon\"\n                    onClick={() => setShowFilters(!showFilters)}\n                    data-testid=\"button-toggle-filters\"\n                  >\n                    <Filter className=\"h-4 w-4\" />\n                  </Button>\n                  {filteredContacts && filteredContacts.length > 0 && (\n                    <Button \n                      className=\"gap-2\"\n                      onClick={() => setIsBulkSMSOpen(true)}\n                      data-testid=\"button-bulk-sms\"\n                    >\n                      <Send className=\"h-4 w-4\" />\n                      Bulk SMS ({filteredContacts.length})\n                    </Button>\n                  )}\n                </div>\n\n            {showFilters && (\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-3 pt-2 border-t\">\n                <div>\n                  <label className=\"text-sm font-medium mb-1.5 block\">Filter by Status</label>\n                  <Select value={statusFilter || \"all\"} onValueChange={(value) => setStatusFilter(value === \"all\" ? \"\" : value)}>\n                    <SelectTrigger data-testid=\"select-status-filter\">\n                      <SelectValue placeholder=\"All statuses\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"all\">All statuses</SelectItem>\n                      <SelectItem value=\"free\">Free</SelectItem>\n                      <SelectItem value=\"on_job\">On Job</SelectItem>\n                      <SelectItem value=\"off_shift\">Off Shift</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n                <div>\n                  <label className=\"text-sm font-medium mb-1.5 block\">Filter by Skill</label>\n                  <Select value={skillFilter || \"all\"} onValueChange={(value) => setSkillFilter(value === \"all\" ? \"\" : value)}>\n                    <SelectTrigger data-testid=\"select-skill-filter\">\n                      <SelectValue placeholder=\"All skills\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"all\">All skills</SelectItem>\n                      {allSkills.map((skill) => (\n                        <SelectItem key={skill} value={skill}>{skill}</SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n                <div>\n                  <label className=\"text-sm font-medium mb-1.5 block\">Filter by Qualification</label>\n                  <Select value={qualificationFilter || \"all\"} onValueChange={(value) => setQualificationFilter(value === \"all\" ? \"\" : value)}>\n                    <SelectTrigger data-testid=\"select-qualification-filter\">\n                      <SelectValue placeholder=\"All qualifications\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"all\">All qualifications</SelectItem>\n                      {allQualifications.map((qual) => (\n                        <SelectItem key={qual} value={qual}>{qual}</SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n                <div>\n                  <label className=\"text-sm font-medium mb-1.5 block\">Filter by Location</label>\n                  <div className=\"relative\">\n                    <MapPin className=\"absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n                    <Input\n                      placeholder=\"City, State, etc...\"\n                      value={locationFilter}\n                      onChange={(e) => setLocationFilter(e.target.value)}\n                      className=\"pl-9\"\n                      data-testid=\"input-location-filter\"\n                    />\n                  </div>\n                </div>\n              </div>\n            )}\n          </div>\n        </CardHeader>\n        <CardContent>\n          {filteredContacts && filteredContacts.length > 0 ? (\n            <div className=\"space-y-3\">\n              {filteredContacts.map((contact) => (\n                <ContactCard \n                  key={contact.id} \n                  contact={contact} \n                  onEdit={() => {\n                    setEditingContact(contact);\n                    setIsDialogOpen(true);\n                  }}\n                  onMessage={() => {\n                    setSelectedContact(contact);\n                    setContactMessageDialogOpen(true);\n                  }}\n                />\n              ))}\n            </div>\n          ) : (\n            <div className=\"text-center py-12\">\n              {contacts && contacts.length === 0 ? (\n                <>\n                  <UserX className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n                  <h3 className=\"text-lg font-medium mb-2\">No contacts yet</h3>\n                  <p className=\"text-muted-foreground mb-6\">Add your first crew member to get started</p>\n                </>\n              ) : (\n                <p className=\"text-muted-foreground\">No contacts match your search</p>\n              )}\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    </TabsContent>\n\n    <TabsContent value=\"team\" className=\"space-y-4\">\n      <Card>\n        <CardHeader>\n          <h2 className=\"text-lg font-semibold\">Team Members</h2>\n          <p className=\"text-sm text-muted-foreground\">Message your team members directly</p>\n        </CardHeader>\n        <CardContent>\n          {membersLoading ? (\n            <div className=\"flex items-center justify-center py-8\">\n              <div className=\"animate-spin w-8 h-8 border-4 border-primary border-t-transparent rounded-full\" />\n            </div>\n          ) : teamMembers && teamMembers.length > 0 ? (\n            <div className=\"space-y-3\">\n              {teamMembers.map((member: any) => (\n                <Card key={member.id} className=\"hover-elevate\" data-testid={`card-team-member-${member.id}`}>\n                  <CardContent className=\"p-4\">\n                    <div className=\"flex flex-col sm:flex-row items-start sm:items-center justify-between gap-3 sm:gap-4\">\n                      <div className=\"flex items-center gap-3 flex-1 min-w-0\">\n                        <Avatar className=\"h-10 w-10 flex-shrink-0\">\n                          <AvatarFallback>\n                            {member.username.substring(0, 2).toUpperCase()}\n                          </AvatarFallback>\n                        </Avatar>\n                        <div className=\"min-w-0 flex-1\">\n                          <div className=\"flex items-center gap-2 flex-wrap\">\n                            <span className=\"font-semibold truncate\" data-testid={`text-member-name-${member.id}`}>\n                              {member.username}\n                            </span>\n                            {member.id === currentUser?.id && (\n                              <Badge variant=\"outline\" className=\"text-xs flex-shrink-0\">You</Badge>\n                            )}\n                          </div>\n                          <div className=\"flex items-center gap-2 mt-1\">\n                            <Mail className=\"h-3 w-3 text-muted-foreground flex-shrink-0\" />\n                            <span className=\"text-sm text-muted-foreground truncate\" data-testid={`text-member-email-${member.id}`}>\n                              {member.email}\n                            </span>\n                          </div>\n                        </div>\n                      </div>\n                      <div className=\"flex items-center gap-2 flex-wrap self-end sm:self-auto\">\n                        <Badge \n                          variant={member.teamRole === \"owner\" ? \"default\" : member.teamRole === \"admin\" ? \"secondary\" : \"outline\"}\n                          className=\"gap-1\"\n                          data-testid={`badge-member-role-${member.id}`}\n                        >\n                          {member.teamRole === \"owner\" && <Crown className=\"h-3 w-3\" />}\n                          {member.teamRole === \"admin\" && <Shield className=\"h-3 w-3\" />}\n                          {member.teamRole === \"member\" && <UserIcon className=\"h-3 w-3\" />}\n                          {member.teamRole.charAt(0).toUpperCase() + member.teamRole.slice(1)}\n                        </Badge>\n                        {member.id !== currentUser?.id && (\n                          <>\n                            <Button\n                              variant=\"outline\"\n                              size=\"sm\"\n                              className=\"gap-2\"\n                              onClick={() => {\n                                setSelectedMember(member);\n                                setMessageDialogOpen(true);\n                              }}\n                              data-testid={`button-message-${member.id}`}\n                              aria-label=\"Send message\"\n                            >\n                              <MessageSquare className=\"h-4 w-4\" />\n                              <span className=\"hidden sm:inline\">Message</span>\n                              <span className=\"sr-only sm:hidden\">Message</span>\n                            </Button>\n                            {(currentUser?.teamRole === \"owner\" || currentUser?.teamRole === \"admin\") && (\n                              <Button\n                                variant=\"ghost\"\n                                size=\"sm\"\n                                className=\"gap-2\"\n                                onClick={() => passwordReminderMutation.mutate(member.id)}\n                                disabled={passwordReminderMutation.isPending}\n                                data-testid={`button-password-reminder-${member.id}`}\n                                aria-label=\"Send password reminder\"\n                              >\n                                <Key className=\"h-4 w-4\" />\n                                <span className=\"hidden sm:inline\">Password Reminder</span>\n                                <span className=\"sr-only sm:hidden\">Password Reminder</span>\n                              </Button>\n                            )}\n                          </>\n                        )}\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          ) : (\n            <div className=\"text-center py-12\">\n              <UserX className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n              <h3 className=\"text-lg font-medium mb-2\">No team members</h3>\n              <p className=\"text-muted-foreground\">Your team will appear here</p>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    </TabsContent>\n  </Tabs>\n    </div>\n  );\n}\n\nfunction ContactCard({ contact, onEdit, onMessage }: { contact: Contact; onEdit: () => void; onMessage: () => void }) {\n  const { toast } = useToast();\n  const [, setLocation] = useLocation();\n  const [deleteDialogOpen, setDeleteDialogOpen] = useState(false);\n  const [deleteConfirmText, setDeleteConfirmText] = useState(\"\");\n\n  // Get status badge configuration\n  const getStatusConfig = (status: string) => {\n    switch (status) {\n      case \"free\":\n        return { \n          label: \"Free\", \n          variant: \"default\" as const, \n          icon: CheckCircle,\n          className: \"bg-green-600 hover:bg-green-700 text-white border-green-600\"\n        };\n      case \"on_job\":\n        return { \n          label: \"On Job\", \n          variant: \"default\" as const, \n          icon: Briefcase,\n          className: \"bg-blue-600 hover:bg-blue-700 text-white border-blue-600\"\n        };\n      case \"off_shift\":\n        return { \n          label: \"Off Shift\", \n          variant: \"secondary\" as const, \n          icon: Clock,\n          className: \"bg-gray-600 dark:bg-gray-700 hover:bg-gray-700 dark:hover:bg-gray-800 text-white border-gray-600\"\n        };\n      default:\n        return { \n          label: \"Free\", \n          variant: \"default\" as const, \n          icon: CheckCircle,\n          className: \"bg-green-600 hover:bg-green-700 text-white border-green-600\"\n        };\n    }\n  };\n\n  const statusConfig = getStatusConfig(contact.status || \"free\");\n  const StatusIcon = statusConfig.icon;\n\n  const navigateToJobMutation = useMutation({\n    mutationFn: async () => {\n      const response = await fetch(`/api/contacts/${contact.id}/current-job`);\n      if (!response.ok) {\n        throw new Error(\"No current job found\");\n      }\n      return response.json();\n    },\n    onSuccess: (job) => {\n      setLocation(`/jobs/${job.id}/roster`);\n    },\n    onError: () => {\n      toast({\n        title: \"No Job Found\",\n        description: \"This contact is not currently assigned to any job\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleStatusClick = () => {\n    if (contact.status === \"on_job\") {\n      navigateToJobMutation.mutate();\n    }\n  };\n\n  const toggleOptOutMutation = useMutation({\n    mutationFn: () =>\n      apiRequest(\"PATCH\", `/api/contacts/${contact.id}`, {\n        isOptedOut: !contact.isOptedOut,\n      }),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/contacts\"] });\n      toast({\n        title: contact.isOptedOut ? \"Contact Opted In\" : \"Contact Opted Out\",\n        description: contact.isOptedOut\n          ? \"Contact will receive messages again\"\n          : \"Contact will not receive future messages\",\n      });\n    },\n  });\n\n  const deleteMutation = useMutation({\n    mutationFn: () => apiRequest(\"DELETE\", `/api/contacts/${contact.id}`),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/contacts\"] });\n      toast({\n        title: \"Contact Deleted\",\n        description: `${contact.firstName} ${contact.lastName} has been removed from your contacts`,\n      });\n      setDeleteDialogOpen(false);\n      setDeleteConfirmText(\"\");\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Failed to delete contact\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const country = COUNTRIES.find(c => c.code === contact.countryCode) || COUNTRIES[0];\n  // Don't prepend dial code if phone already starts with + (legacy data)\n  const fullPhone = contact.phone.startsWith('+') \n    ? contact.phone \n    : `${country.dialCode} ${contact.phone}`;\n\n  return (\n    <Card className=\"hover-elevate\" data-testid={`card-contact-${contact.id}`}>\n      <CardContent className=\"p-4\">\n        <div className=\"flex items-start justify-between gap-4\">\n          <div className=\"flex items-start gap-4 flex-1 min-w-0\">\n            <Avatar className=\"h-12 w-12\">\n              {contact.profilePicture && (\n                <AvatarImage src={contact.profilePicture} alt={`${contact.firstName} ${contact.lastName}`} />\n              )}\n              <AvatarFallback>\n                {contact.firstName[0]}{contact.lastName[0]}\n              </AvatarFallback>\n            </Avatar>\n            <div className=\"flex-1 min-w-0\">\n              <div className=\"flex items-center gap-2 flex-wrap\">\n                <h3 className=\"font-semibold\" data-testid={`text-contact-name-${contact.id}`}>\n                  {contact.firstName} {contact.lastName}\n                </h3>\n                <Badge \n                  variant={statusConfig.variant} \n                  className={`gap-1 font-medium ${statusConfig.className} ${contact.status === \"on_job\" ? \"cursor-pointer\" : \"\"}`}\n                  onClick={handleStatusClick}\n                  data-testid={`badge-contact-status-${contact.id}`}\n                >\n                  <StatusIcon className=\"h-3 w-3\" />\n                  {statusConfig.label}\n                </Badge>\n                {contact.isOptedOut && (\n                  <Badge variant=\"secondary\" className=\"text-xs\">Opted Out</Badge>\n                )}\n              </div>\n              <div className=\"space-y-1 mt-2\">\n                <div className=\"flex items-center gap-2 text-sm text-muted-foreground\">\n                  <Phone className=\"h-3.5 w-3.5\" />\n                  <span data-testid={`text-contact-phone-${contact.id}`}>{fullPhone}</span>\n                </div>\n                {contact.email && (\n                  <div className=\"flex items-center gap-2 text-sm text-muted-foreground\">\n                    <Mail className=\"h-3.5 w-3.5\" />\n                    <span data-testid={`text-contact-email-${contact.id}`}>{contact.email}</span>\n                  </div>\n                )}\n                {contact.address && (\n                  <div className=\"flex items-center gap-2 text-sm text-muted-foreground\">\n                    <MapPin className=\"h-3.5 w-3.5\" />\n                    <span data-testid={`text-contact-address-${contact.id}`}>{contact.address}</span>\n                  </div>\n                )}\n              </div>\n              {contact.skills && contact.skills.length > 0 && (\n                <div className=\"flex gap-2 mt-3 flex-wrap\">\n                  {contact.skills.map((skill) => (\n                    <Badge key={skill} variant=\"outline\" className=\"text-xs\">\n                      {skill}\n                    </Badge>\n                  ))}\n                </div>\n              )}\n              {contact.qualifications && contact.qualifications.length > 0 && (\n                <div className=\"flex gap-2 mt-2 flex-wrap\">\n                  {contact.qualifications.map((qual) => (\n                    <Badge key={qual} variant=\"secondary\" className=\"text-xs gap-1\">\n                      <Award className=\"h-3 w-3\" />\n                      {qual}\n                    </Badge>\n                  ))}\n                </div>\n              )}\n              {contact.tags && contact.tags.length > 0 && (\n                <div className=\"flex gap-2 mt-2 flex-wrap\">\n                  {contact.tags.map((tag) => (\n                    <Badge key={tag} variant=\"secondary\" className=\"text-xs\">\n                      {tag}\n                    </Badge>\n                  ))}\n                </div>\n              )}\n              {contact.blackoutPeriods && contact.blackoutPeriods.length > 0 && (\n                <div className=\"flex items-center gap-2 mt-2 text-sm text-muted-foreground\">\n                  <Calendar className=\"h-3.5 w-3.5\" />\n                  <span>{contact.blackoutPeriods.length} blackout period(s)</span>\n                </div>\n              )}\n            </div>\n          </div>\n          <div className=\"flex flex-col sm:flex-row gap-2 items-end sm:items-start\">\n            <Button\n              variant=\"ghost\"\n              size=\"icon\"\n              onClick={onMessage}\n              disabled={contact.isOptedOut}\n              title={contact.isOptedOut ? \"Contact has opted out of messages\" : \"Send message\"}\n              data-testid={`button-message-contact-${contact.id}`}\n            >\n              <MessageSquare className=\"h-4 w-4\" />\n            </Button>\n            <Button\n              variant=\"ghost\"\n              size=\"icon\"\n              onClick={onEdit}\n              data-testid={`button-edit-contact-${contact.id}`}\n            >\n              <Pencil className=\"h-4 w-4\" />\n            </Button>\n            <Button\n              variant=\"ghost\"\n              size=\"icon\"\n              onClick={() => setDeleteDialogOpen(true)}\n              title=\"Delete contact\"\n              data-testid={`button-delete-contact-${contact.id}`}\n            >\n              <Trash2 className=\"h-4 w-4\" />\n            </Button>\n            <Button\n              variant={contact.isOptedOut ? \"outline\" : \"ghost\"}\n              size=\"sm\"\n              onClick={() => toggleOptOutMutation.mutate()}\n              data-testid={`button-toggle-opt-out-${contact.id}`}\n            >\n              {contact.isOptedOut ? \"Opt In\" : \"Opt Out\"}\n            </Button>\n          </div>\n        </div>\n      </CardContent>\n\n      <Dialog open={deleteDialogOpen} onOpenChange={setDeleteDialogOpen}>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle>Delete Contact</DialogTitle>\n            <DialogDescription>\n              This action cannot be undone. To confirm deletion of {contact.firstName} {contact.lastName}, please type <strong>heyteam</strong> below.\n            </DialogDescription>\n          </DialogHeader>\n          <div className=\"py-4\">\n            <Label htmlFor=\"delete-confirm\">Type \"heyteam\" to confirm</Label>\n            <Input\n              id=\"delete-confirm\"\n              placeholder=\"heyteam\"\n              value={deleteConfirmText}\n              onChange={(e) => setDeleteConfirmText(e.target.value)}\n              data-testid={`input-delete-confirm-${contact.id}`}\n            />\n          </div>\n          <DialogFooter>\n            <Button\n              variant=\"outline\"\n              onClick={() => {\n                setDeleteDialogOpen(false);\n                setDeleteConfirmText(\"\");\n              }}\n              data-testid={`button-cancel-delete-${contact.id}`}\n            >\n              Cancel\n            </Button>\n            <Button\n              variant=\"destructive\"\n              onClick={() => deleteMutation.mutate()}\n              disabled={deleteConfirmText !== \"heyteam\" || deleteMutation.isPending}\n              aria-disabled={deleteConfirmText !== \"heyteam\" || deleteMutation.isPending}\n              data-testid={`button-confirm-delete-${contact.id}`}\n            >\n              {deleteMutation.isPending ? \"Deleting...\" : \"Delete Contact\"}\n            </Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n    </Card>\n  );\n}\n\nfunction ContactForm({ contact, onSuccess }: { contact?: Contact | null; onSuccess: () => void }) {\n  const { toast } = useToast();\n  const isEdit = !!contact;\n\n  const [skillInput, setSkillInput] = useState(\"\");\n  const [qualificationInput, setQualificationInput] = useState(\"\");\n  const [blackoutStart, setBlackoutStart] = useState(\"\");\n  const [blackoutEnd, setBlackoutEnd] = useState(\"\");\n  const [uploadingImage, setUploadingImage] = useState(false);\n\n  const form = useForm<InsertContact>({\n    resolver: zodResolver(insertContactSchema),\n    defaultValues: contact ? {\n      firstName: contact.firstName,\n      lastName: contact.lastName,\n      countryCode: contact.countryCode || \"US\",\n      phone: contact.phone,\n      email: contact.email || \"\",\n      address: contact.address || \"\",\n      profilePicture: contact.profilePicture || \"\",\n      notes: contact.notes || \"\",\n      skills: contact.skills || [],\n      qualifications: contact.qualifications || [],\n      blackoutPeriods: contact.blackoutPeriods || [],\n      isOptedOut: contact.isOptedOut,\n      quietHoursStart: contact.quietHoursStart || \"22:00\",\n      quietHoursEnd: contact.quietHoursEnd || \"07:00\",\n      tags: contact.tags || [],\n      status: contact.status || \"free\",\n    } : {\n      firstName: \"\",\n      lastName: \"\",\n      countryCode: \"US\",\n      phone: \"\",\n      email: \"\",\n      address: \"\",\n      profilePicture: \"\",\n      notes: \"\",\n      skills: [],\n      qualifications: [],\n      blackoutPeriods: [],\n      isOptedOut: false,\n      quietHoursStart: \"22:00\",\n      quietHoursEnd: \"07:00\",\n      tags: [],\n      status: \"free\",\n    },\n  });\n\n  const createMutation = useMutation({\n    mutationFn: async (data: InsertContact) => {\n      const res = await apiRequest(\"POST\", \"/api/contacts\", data);\n      return res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/contacts\"] });\n      toast({\n        title: \"Contact Added\",\n        description: \"New contact has been added successfully\",\n      });\n      form.reset();\n      onSuccess();\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to add contact\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateMutation = useMutation({\n    mutationFn: async (data: InsertContact) => {\n      const res = await apiRequest(\"PATCH\", `/api/contacts/${contact?.id}`, data);\n      return res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/contacts\"] });\n      toast({\n        title: \"Contact Updated\",\n        description: \"Contact has been updated successfully\",\n      });\n      onSuccess();\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to update contact\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: InsertContact) => {\n    if (isEdit) {\n      updateMutation.mutate(data);\n    } else {\n      createMutation.mutate(data);\n    }\n  };\n\n  const handleImageUpload = async (e: React.ChangeEvent<HTMLInputElement>) => {\n    const file = e.target.files?.[0];\n    if (!file) return;\n\n    if (!file.type.startsWith('image/')) {\n      toast({\n        title: \"Invalid File\",\n        description: \"Please upload an image file\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setUploadingImage(true);\n    const formData = new FormData();\n    formData.append('file', file);\n\n    try {\n      const response = await fetch('/api/contacts/upload-image', {\n        method: 'POST',\n        body: formData,\n        credentials: 'include',\n      });\n\n      if (!response.ok) throw new Error('Upload failed');\n\n      const data = await response.json();\n      form.setValue('profilePicture', data.url);\n      toast({\n        title: \"Image Uploaded\",\n        description: \"Profile picture has been uploaded successfully\",\n      });\n    } catch (error) {\n      toast({\n        title: \"Upload Failed\",\n        description: \"Failed to upload profile picture\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setUploadingImage(false);\n    }\n  };\n\n  const addSkill = () => {\n    if (skillInput.trim()) {\n      const currentSkills = form.getValues(\"skills\") || [];\n      if (!currentSkills.includes(skillInput.trim())) {\n        form.setValue(\"skills\", [...currentSkills, skillInput.trim()]);\n      }\n      setSkillInput(\"\");\n    }\n  };\n\n  const removeSkill = (skill: string) => {\n    const currentSkills = form.getValues(\"skills\") || [];\n    form.setValue(\"skills\", currentSkills.filter(s => s !== skill));\n  };\n\n  const addQualification = () => {\n    if (qualificationInput.trim()) {\n      const currentQuals = form.getValues(\"qualifications\") || [];\n      if (!currentQuals.includes(qualificationInput.trim())) {\n        form.setValue(\"qualifications\", [...currentQuals, qualificationInput.trim()]);\n      }\n      setQualificationInput(\"\");\n    }\n  };\n\n  const removeQualification = (qual: string) => {\n    const currentQuals = form.getValues(\"qualifications\") || [];\n    form.setValue(\"qualifications\", currentQuals.filter(q => q !== qual));\n  };\n\n  const addBlackoutPeriod = () => {\n    if (blackoutStart && blackoutEnd) {\n      const currentPeriods = form.getValues(\"blackoutPeriods\") || [];\n      const periodStr = `${blackoutStart} to ${blackoutEnd}`;\n      form.setValue(\"blackoutPeriods\", [...currentPeriods, periodStr]);\n      setBlackoutStart(\"\");\n      setBlackoutEnd(\"\");\n    }\n  };\n\n  const removeBlackoutPeriod = (period: string) => {\n    const currentPeriods = form.getValues(\"blackoutPeriods\") || [];\n    form.setValue(\"blackoutPeriods\", currentPeriods.filter(p => p !== period));\n  };\n\n  return (\n    <>\n      <DialogHeader>\n        <DialogTitle>{isEdit ? \"Edit Contact\" : \"Add New Contact\"}</DialogTitle>\n      </DialogHeader>\n      <Form {...form}>\n        <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n          <FormField\n            control={form.control}\n            name=\"profilePicture\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>Profile Picture</FormLabel>\n                <FormControl>\n                  <div className=\"flex items-center gap-4\">\n                    <Avatar className=\"h-20 w-20\">\n                      {field.value && (\n                        <AvatarImage src={field.value} alt=\"Profile\" />\n                      )}\n                      <AvatarFallback>\n                        <Upload className=\"h-8 w-8 text-muted-foreground\" />\n                      </AvatarFallback>\n                    </Avatar>\n                    <div className=\"flex-1\">\n                      <Input\n                        type=\"file\"\n                        accept=\"image/*\"\n                        onChange={handleImageUpload}\n                        disabled={uploadingImage}\n                        data-testid=\"input-profile-picture\"\n                      />\n                      {uploadingImage && (\n                        <p className=\"text-sm text-muted-foreground mt-1\">Uploading...</p>\n                      )}\n                    </div>\n                  </div>\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n\n          <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-4\">\n            <FormField\n              control={form.control}\n              name=\"firstName\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>First Name</FormLabel>\n                  <FormControl>\n                    <Input placeholder=\"John\" {...field} data-testid=\"input-first-name\" />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n            <FormField\n              control={form.control}\n              name=\"lastName\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Last Name</FormLabel>\n                  <FormControl>\n                    <Input placeholder=\"Doe\" {...field} data-testid=\"input-last-name\" />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n          </div>\n\n          <div className=\"grid grid-cols-1 sm:grid-cols-3 gap-4\">\n            <FormField\n              control={form.control}\n              name=\"countryCode\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Country</FormLabel>\n                  <Select onValueChange={field.onChange} defaultValue={field.value}>\n                    <FormControl>\n                      <SelectTrigger data-testid=\"select-country\">\n                        <SelectValue placeholder=\"Select country\" />\n                      </SelectTrigger>\n                    </FormControl>\n                    <SelectContent>\n                      {COUNTRIES.map((country) => (\n                        <SelectItem key={country.code} value={country.code}>\n                          {country.name} ({country.dialCode})\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n            <FormField\n              control={form.control}\n              name=\"phone\"\n              render={({ field }) => (\n                <FormItem className=\"sm:col-span-2\">\n                  <FormLabel>Mobile Number</FormLabel>\n                  <FormControl>\n                    <Input placeholder=\"555-123-4567\" {...field} data-testid=\"input-phone\" />\n                  </FormControl>\n                  <FormDescription>\n                    {COUNTRIES.find(c => c.code === form.watch(\"countryCode\"))?.dialCode} will be prefixed\n                  </FormDescription>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n          </div>\n\n          <FormField\n            control={form.control}\n            name=\"email\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>Email (Optional)</FormLabel>\n                <FormControl>\n                  <Input type=\"email\" placeholder=\"john@example.com\" {...field} data-testid=\"input-email\" />\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n\n          <FormField\n            control={form.control}\n            name=\"address\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>Address (Optional)</FormLabel>\n                <FormControl>\n                  <Input placeholder=\"123 Main St, City, State/Province\" {...field} data-testid=\"input-address\" />\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n\n          <FormField\n            control={form.control}\n            name=\"status\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>Status</FormLabel>\n                <Select onValueChange={field.onChange} defaultValue={field.value}>\n                  <FormControl>\n                    <SelectTrigger data-testid=\"select-status\">\n                      <SelectValue placeholder=\"Select status\" />\n                    </SelectTrigger>\n                  </FormControl>\n                  <SelectContent>\n                    <SelectItem value=\"free\">Free</SelectItem>\n                    <SelectItem value=\"on_job\">On Job</SelectItem>\n                    <SelectItem value=\"off_shift\">Off Shift</SelectItem>\n                  </SelectContent>\n                </Select>\n                <FormDescription>Current work status of this contact</FormDescription>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n\n          <FormField\n            control={form.control}\n            name=\"skills\"\n            render={() => (\n              <FormItem>\n                <FormLabel>Skills</FormLabel>\n                <FormControl>\n                  <div className=\"space-y-2\">\n                    <div className=\"flex gap-2\">\n                      <Input\n                        placeholder=\"Add a skill...\"\n                        value={skillInput}\n                        onChange={(e) => setSkillInput(e.target.value)}\n                        onKeyPress={(e) => {\n                          if (e.key === 'Enter') {\n                            e.preventDefault();\n                            addSkill();\n                          }\n                        }}\n                        data-testid=\"input-skill\"\n                      />\n                      <Button type=\"button\" onClick={addSkill} variant=\"outline\" data-testid=\"button-add-skill\">\n                        Add\n                      </Button>\n                    </div>\n                    <div className=\"flex gap-2 flex-wrap\">\n                      {form.watch(\"skills\")?.map((skill) => (\n                        <Badge key={skill} variant=\"outline\" className=\"gap-1\" data-testid={`badge-skill-${skill}`}>\n                          {skill}\n                          <X \n                            className=\"h-3 w-3 cursor-pointer hover-elevate\" \n                            onClick={() => removeSkill(skill)}\n                          />\n                        </Badge>\n                      ))}\n                    </div>\n                  </div>\n                </FormControl>\n                <FormDescription>Add skills like \"Carpenter\", \"Electrician\", etc.</FormDescription>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n\n          <FormField\n            control={form.control}\n            name=\"qualifications\"\n            render={() => (\n              <FormItem>\n                <FormLabel>Qualifications</FormLabel>\n                <FormControl>\n                  <div className=\"space-y-2\">\n                    <div className=\"flex gap-2\">\n                      <Input\n                        placeholder=\"Add a qualification...\"\n                        value={qualificationInput}\n                        onChange={(e) => setQualificationInput(e.target.value)}\n                        onKeyPress={(e) => {\n                          if (e.key === 'Enter') {\n                            e.preventDefault();\n                            addQualification();\n                          }\n                        }}\n                        data-testid=\"input-qualification\"\n                      />\n                      <Button type=\"button\" onClick={addQualification} variant=\"outline\" data-testid=\"button-add-qualification\">\n                        Add\n                      </Button>\n                    </div>\n                    <div className=\"flex gap-2 flex-wrap\">\n                      {form.watch(\"qualifications\")?.map((qual) => (\n                        <Badge key={qual} variant=\"secondary\" className=\"gap-1\" data-testid={`badge-qualification-${qual}`}>\n                          <Award className=\"h-3 w-3\" />\n                          {qual}\n                          <X \n                            className=\"h-3 w-3 cursor-pointer hover-elevate\" \n                            onClick={() => removeQualification(qual)}\n                          />\n                        </Badge>\n                      ))}\n                    </div>\n                  </div>\n                </FormControl>\n                <FormDescription>Add certifications like \"First Aid\", \"Forklift License\", etc.</FormDescription>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n\n          <FormField\n            control={form.control}\n            name=\"blackoutPeriods\"\n            render={() => (\n              <FormItem>\n                <FormLabel>Blackout Periods</FormLabel>\n                <FormControl>\n                  <div className=\"space-y-2\">\n                    <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-2\">\n                      <Input\n                        type=\"date\"\n                        value={blackoutStart}\n                        onChange={(e) => setBlackoutStart(e.target.value)}\n                        data-testid=\"input-blackout-start\"\n                      />\n                      <Input\n                        type=\"date\"\n                        value={blackoutEnd}\n                        onChange={(e) => setBlackoutEnd(e.target.value)}\n                        data-testid=\"input-blackout-end\"\n                      />\n                    </div>\n                    <Button \n                      type=\"button\" \n                      onClick={addBlackoutPeriod} \n                      variant=\"outline\" \n                      size=\"sm\"\n                      disabled={!blackoutStart || !blackoutEnd}\n                      data-testid=\"button-add-blackout\"\n                    >\n                      Add Blackout Period\n                    </Button>\n                    <div className=\"space-y-1\">\n                      {form.watch(\"blackoutPeriods\")?.map((period, index) => (\n                        <div key={index} className=\"flex items-center justify-between p-2 bg-muted rounded-md text-sm\" data-testid={`blackout-period-${index}`}>\n                          <span className=\"flex items-center gap-2\">\n                            <Calendar className=\"h-3.5 w-3.5\" />\n                            {period}\n                          </span>\n                          <X \n                            className=\"h-3.5 w-3.5 cursor-pointer hover-elevate\" \n                            onClick={() => removeBlackoutPeriod(period)}\n                          />\n                        </div>\n                      ))}\n                    </div>\n                  </div>\n                </FormControl>\n                <FormDescription>Contact won't receive notifications during these dates</FormDescription>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n\n          <FormField\n            control={form.control}\n            name=\"notes\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>Notes (Optional)</FormLabel>\n                <FormControl>\n                  <Textarea\n                    placeholder=\"Any additional information...\"\n                    className=\"resize-none h-20\"\n                    {...field}\n                    data-testid=\"input-notes\"\n                  />\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n\n          <DialogFooter>\n            <Button \n              type=\"submit\" \n              disabled={createMutation.isPending || updateMutation.isPending} \n              data-testid=\"button-submit-contact\"\n            >\n              {(createMutation.isPending || updateMutation.isPending) && (\n                <div className=\"animate-spin w-4 h-4 border-2 border-primary-foreground border-t-transparent rounded-full mr-2\" />\n              )}\n              {isEdit ? \"Update Contact\" : \"Add Contact\"}\n            </Button>\n          </DialogFooter>\n        </form>\n      </Form>\n    </>\n  );\n}\n\nfunction ImportCSV({ onSuccess }: { onSuccess: () => void }) {\n  const [file, setFile] = useState<File | null>(null);\n  const [results, setResults] = useState<any>(null);\n  const { toast } = useToast();\n\n  const importMutation = useMutation({\n    mutationFn: async (formData: FormData) => {\n      const response = await fetch(\"/api/contacts/import\", {\n        method: \"POST\",\n        body: formData,\n        credentials: \"include\",\n      });\n      if (!response.ok) {\n        throw new Error(\"Failed to import contacts\");\n      }\n      return response.json();\n    },\n    onSuccess: (data) => {\n      setResults(data);\n      queryClient.invalidateQueries({ queryKey: [\"/api/contacts\"] });\n      toast({\n        title: \"Import Complete\",\n        description: `Imported ${data.imported} contacts, skipped ${data.skipped}`,\n      });\n      if (data.imported > 0 && data.errors.length === 0) {\n        setTimeout(onSuccess, 2000);\n      }\n    },\n    onError: () => {\n      toast({\n        title: \"Import Failed\",\n        description: \"Failed to import contacts\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleImport = () => {\n    if (!file) return;\n\n    const formData = new FormData();\n    formData.append(\"file\", file);\n    importMutation.mutate(formData);\n  };\n\n  return (\n    <>\n      <DialogHeader>\n        <DialogTitle>Import Contacts from CSV</DialogTitle>\n      </DialogHeader>\n      <div className=\"space-y-4\">\n        <div>\n          <p className=\"text-sm text-muted-foreground mb-4\">\n            Upload a CSV file with columns: firstName, lastName, phone, email (optional)\n          </p>\n          <Input\n            type=\"file\"\n            accept=\".csv\"\n            onChange={(e) => setFile(e.target.files?.[0] || null)}\n            data-testid=\"input-csv-file\"\n          />\n        </div>\n\n        {results && (\n          <Card>\n            <CardContent className=\"p-4 space-y-2\">\n              <div className=\"flex items-center justify-between\">\n                <span className=\"text-sm font-medium\">Imported:</span>\n                <span className=\"text-sm text-green-600\">{results.imported}</span>\n              </div>\n              <div className=\"flex items-center justify-between\">\n                <span className=\"text-sm font-medium\">Skipped (duplicates):</span>\n                <span className=\"text-sm text-yellow-600\">{results.skipped}</span>\n              </div>\n              {results.errors.length > 0 && (\n                <div className=\"mt-4\">\n                  <p className=\"text-sm font-medium text-red-600 mb-2\">Errors:</p>\n                  <div className=\"space-y-1 max-h-40 overflow-y-auto\">\n                    {results.errors.map((error: any, index: number) => (\n                      <p key={index} className=\"text-xs text-red-600\">\n                        Row {error.row}: {error.message}\n                      </p>\n                    ))}\n                  </div>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        )}\n      </div>\n      <DialogFooter>\n        <Button\n          onClick={handleImport}\n          disabled={!file || importMutation.isPending}\n          data-testid=\"button-import-contacts\"\n        >\n          {importMutation.isPending && (\n            <div className=\"animate-spin w-4 h-4 border-2 border-primary-foreground border-t-transparent rounded-full mr-2\" />\n          )}\n          Import Contacts\n        </Button>\n      </DialogFooter>\n    </>\n  );\n}\n\nfunction BulkSMSForm({ contacts, onSuccess }: { contacts: Contact[]; onSuccess: () => void }) {\n  const [message, setMessage] = useState(\"\");\n  const { toast } = useToast();\n\n  const sendMutation = useMutation({\n    mutationFn: async () => {\n      const contactIds = contacts.map(c => c.id);\n      const res = await apiRequest(\"POST\", \"/api/messages/bulk-sms\", {\n        contactIds,\n        message,\n      });\n      return res.json();\n    },\n    onSuccess: (data) => {\n      // Close dialog first\n      onSuccess();\n      // Show success toast after dialog closes\n      setTimeout(() => {\n        toast({\n          title: \"Messages Sent Successfully\",\n          description: `Successfully sent SMS to ${data.sent} contact(s)`,\n        });\n      }, 150);\n    },\n    onError: (error: any) => {\n      let errorMessage = \"Failed to send bulk SMS\";\n      try {\n        const parts = error.message?.split(\": \");\n        if (parts && parts.length > 1) {\n          const jsonPart = parts.slice(1).join(\": \");\n          const parsed = JSON.parse(jsonPart);\n          errorMessage = parsed.message || errorMessage;\n        }\n      } catch {\n        // Use default error message\n      }\n      toast({\n        title: \"Error\",\n        description: errorMessage,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSend = () => {\n    if (!message.trim()) {\n      toast({\n        title: \"Message Required\",\n        description: \"Please enter a message to send\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    sendMutation.mutate();\n  };\n\n  return (\n    <>\n      <DialogHeader>\n        <DialogTitle>Send Bulk SMS</DialogTitle>\n        <p className=\"text-sm text-muted-foreground\">\n          Send a message to {contacts.length} selected contact{contacts.length !== 1 ? 's' : ''}\n        </p>\n      </DialogHeader>\n      <div className=\"space-y-4\">\n        <div>\n          <label className=\"text-sm font-medium block mb-2\">Recipients</label>\n          <div className=\"max-h-32 overflow-y-auto border rounded-md p-3 space-y-1\">\n            {contacts.map((contact) => (\n              <div key={contact.id} className=\"text-sm\">\n                {contact.firstName} {contact.lastName}\n              </div>\n            ))}\n          </div>\n        </div>\n        <div>\n          <label className=\"text-sm font-medium block mb-2\">Message</label>\n          <Textarea\n            placeholder=\"Type your message here...\"\n            value={message}\n            onChange={(e) => setMessage(e.target.value)}\n            className=\"resize-none h-32\"\n            data-testid=\"input-bulk-message\"\n          />\n          <p className=\"text-xs text-muted-foreground mt-1\">\n            {message.length} characters\n          </p>\n        </div>\n      </div>\n      <DialogFooter>\n        <Button\n          onClick={handleSend}\n          disabled={!message.trim() || sendMutation.isPending}\n          data-testid=\"button-send-bulk-sms\"\n        >\n          {sendMutation.isPending && (\n            <div className=\"animate-spin w-4 h-4 border-2 border-primary-foreground border-t-transparent rounded-full mr-2\" />\n          )}\n          <Send className=\"h-4 w-4 mr-2\" />\n          Send to {contacts.length} Contact{contacts.length !== 1 ? 's' : ''}\n        </Button>\n      </DialogFooter>\n    </>\n  );\n}\n","size_bytes":64905},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    // h-9 to match icon buttons and default buttons.\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-9 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":844},"server/lib/credit-service.ts":{"content":"import type { IStorage } from \"../storage\";\nimport type { InsertCreditGrant, InsertCreditTransaction } from \"@shared/schema\";\n\nexport class CreditService {\n  constructor(private storage: IStorage) {}\n\n  /**\n   * Grant credits to a user from a specific source (trial, subscription, bundle)\n   */\n  async grantCredits(\n    userId: string,\n    sourceType: \"trial\" | \"subscription\" | \"bundle\",\n    creditsGranted: number,\n    sourceRef: string | null = null,\n    expiresAt: Date | null = null\n  ) {\n    const grant: InsertCreditGrant = {\n      userId,\n      sourceType,\n      sourceRef,\n      creditsGranted,\n      creditsConsumed: 0,\n      creditsRemaining: creditsGranted,\n      expiresAt,\n    };\n\n    return await this.storage.createCreditGrant(userId, grant);\n  }\n\n  /**\n   * Consume credits using FIFO (First In, First Out) by expiry date\n   * Credits expiring soonest are used first, then non-expiring credits\n   * Returns the credit transactions created\n   * This operation is atomic and transaction-safe\n   */\n  async consumeCredits(\n    userId: string,\n    amount: number,\n    reason: string,\n    messageId: string | null = null\n  ) {\n    return await this.storage.consumeCreditsAtomic(userId, amount, reason, messageId);\n  }\n\n  /**\n   * Refund credits back to their original grant\n   * This reverses a previous consumption\n   * This operation is atomic and transaction-safe\n   */\n  async refundCredits(\n    userId: string,\n    transactionIds: string[],\n    reason: string\n  ) {\n    return await this.storage.refundCreditsAtomic(userId, transactionIds, reason);\n  }\n\n  /**\n   * Get the total available credits for a user\n   * Excludes expired grants\n   */\n  async getAvailableCredits(userId: string) {\n    const grants = await this.storage.getCreditGrants(userId);\n    \n    const now = new Date();\n    const activeGrants = grants.filter(g => {\n      if (g.creditsRemaining <= 0) return false;\n      if (g.expiresAt && g.expiresAt <= now) return false;\n      return true;\n    });\n\n    return activeGrants.reduce((total, g) => total + g.creditsRemaining, 0);\n  }\n\n  /**\n   * Get a detailed breakdown of credits by source\n   */\n  async getCreditBreakdown(userId: string) {\n    const grants = await this.storage.getCreditGrants(userId);\n    const now = new Date();\n\n    const breakdown = {\n      total: 0,\n      trial: 0,\n      subscription: 0,\n      bundle: 0,\n      expired: 0,\n    };\n\n    for (const grant of grants) {\n      const isExpired = grant.expiresAt && grant.expiresAt <= now;\n      \n      if (isExpired) {\n        breakdown.expired += grant.creditsRemaining;\n      } else {\n        breakdown.total += grant.creditsRemaining;\n        \n        switch (grant.sourceType) {\n          case \"trial\":\n            breakdown.trial += grant.creditsRemaining;\n            break;\n          case \"subscription\":\n            breakdown.subscription += grant.creditsRemaining;\n            break;\n          case \"bundle\":\n            breakdown.bundle += grant.creditsRemaining;\n            break;\n        }\n      }\n    }\n\n    return breakdown;\n  }\n}\n","size_bytes":3047},"server/types/session.ts":{"content":"import \"express-session\";\n\ndeclare module \"express-session\" {\n  interface SessionData {\n    userId?: string;\n  }\n}\n","size_bytes":115},"server/auth-routes.ts":{"content":"import { Router, Request, Response } from \"express\";\nimport bcrypt from \"bcrypt\";\nimport { randomBytes } from \"crypto\";\nimport { storage } from \"./storage\";\nimport { insertUserSchema } from \"@shared/schema\";\nimport { z } from \"zod\";\nimport { CreditService } from \"./lib/credit-service\";\n\nconst creditService = new CreditService(storage);\n\nconst router = Router();\n\n// Register\nrouter.post(\"/register\", async (req: Request, res: Response) => {\n  try {\n    const { username, email, password, countryCode, mobileNumber } = insertUserSchema.parse(req.body);\n\n    // Check if user already exists (username is now company name)\n    const existingUser = await storage.getUserByUsername(username);\n    if (existingUser) {\n      return res.status(400).json({ message: \"Company name already exists\" });\n    }\n\n    const existingEmail = await storage.getUserByEmail(email);\n    if (existingEmail) {\n      return res.status(400).json({ message: \"Email already exists\" });\n    }\n\n    // Hash password\n    const hashedPassword = await bcrypt.hash(password, 10);\n\n    // Create user with mobile number\n    const user = await storage.createUser({\n      username, // Company name\n      email,\n      countryCode,\n      mobileNumber,\n      password: hashedPassword,\n    });\n\n    // Grant 10 trial SMS credits to new users (non-expiring)\n    await creditService.grantCredits(\n      user.id,\n      \"trial\",\n      10,\n      null, // No source reference\n      null  // No expiry for trial credits\n    );\n\n    console.log(`New registration: ${username} - Granted 10 trial SMS credits`);\n    console.log(`Email: ${email}`);\n    console.log(`Mobile: ${countryCode} ${mobileNumber}`);\n    console.log(`Account created but not verified`);\n\n    // Set session\n    req.session.userId = user.id;\n\n    res.json({\n      id: user.id,\n      username: user.username,\n      email: user.email,\n      isAdmin: user.isAdmin,\n      organizationId: user.organizationId,\n      teamRole: user.teamRole,\n      emailVerified: user.emailVerified,\n      mobileVerified: user.mobileVerified,\n    });\n  } catch (error) {\n    if (error instanceof z.ZodError) {\n      return res.status(400).json({ message: \"Invalid input\", errors: error.errors });\n    }\n    console.error(\"Registration error:\", error);\n    res.status(500).json({ message: \"Registration failed\" });\n  }\n});\n\n// Login\nrouter.post(\"/login\", async (req: Request, res: Response) => {\n  try {\n    const { email, password } = req.body;\n\n    if (!email || !password) {\n      return res.status(400).json({ message: \"Email and password required\" });\n    }\n\n    // Find user by email\n    const user = await storage.getUserByEmail(email);\n    if (!user) {\n      return res.status(401).json({ message: \"Invalid credentials\" });\n    }\n\n    // Verify password\n    const validPassword = await bcrypt.compare(password, user.password);\n    if (!validPassword) {\n      return res.status(401).json({ message: \"Invalid credentials\" });\n    }\n\n    // Set session\n    req.session.userId = user.id;\n\n    res.json({\n      id: user.id,\n      username: user.username,\n      email: user.email,\n      currency: user.currency,\n      isAdmin: user.isAdmin,\n      organizationId: user.organizationId,\n      teamRole: user.teamRole,\n      emailVerified: user.emailVerified,\n      mobileVerified: user.mobileVerified,\n    });\n  } catch (error) {\n    console.error(\"Login error:\", error);\n    res.status(500).json({ message: \"Login failed\" });\n  }\n});\n\n// Logout\nrouter.post(\"/logout\", (req: Request, res: Response) => {\n  req.session.destroy((err) => {\n    if (err) {\n      return res.status(500).json({ message: \"Logout failed\" });\n    }\n    res.json({ message: \"Logged out successfully\" });\n  });\n});\n\n// Get current user\nrouter.get(\"/me\", async (req: Request, res: Response) => {\n  try {\n    if (!req.session.userId) {\n      return res.status(401).json({ message: \"Not authenticated\" });\n    }\n\n    const user = await storage.getUser(req.session.userId);\n    if (!user) {\n      return res.status(401).json({ message: \"User not found\" });\n    }\n\n    res.json({\n      id: user.id,\n      username: user.username,\n      email: user.email,\n      currency: user.currency,\n      isAdmin: user.isAdmin,\n      organizationId: user.organizationId,\n      teamRole: user.teamRole,\n      emailVerified: user.emailVerified,\n      mobileVerified: user.mobileVerified,\n    });\n  } catch (error) {\n    console.error(\"Get user error:\", error);\n    res.status(500).json({ message: \"Failed to get user\" });\n  }\n});\n\n// Forgot password - Request reset\nrouter.post(\"/forgot-password\", async (req: Request, res: Response) => {\n  try {\n    const { email } = req.body;\n\n    if (!email) {\n      return res.status(400).json({ message: \"Email required\" });\n    }\n\n    const user = await storage.getUserByEmail(email);\n    if (!user) {\n      // Don't reveal if email exists\n      return res.json({ message: \"If the email exists, a reset link will be sent\" });\n    }\n\n    // Generate reset token\n    const token = randomBytes(32).toString(\"hex\");\n    const expiresAt = new Date(Date.now() + 3600000); // 1 hour\n\n    await storage.createPasswordResetToken({\n      userId: user.id,\n      token,\n      expiresAt,\n    });\n\n    // TODO: Send email with reset link\n    // For now, log the token (in production, send via email)\n    console.log(`Password reset token for ${email}: ${token}`);\n    console.log(`Reset link: http://localhost:5000/reset-password?token=${token}`);\n\n    res.json({ message: \"If the email exists, a reset link will be sent\" });\n  } catch (error) {\n    console.error(\"Forgot password error:\", error);\n    res.status(500).json({ message: \"Failed to process request\" });\n  }\n});\n\n// Reset password\nrouter.post(\"/reset-password\", async (req: Request, res: Response) => {\n  try {\n    const { token, password } = req.body;\n\n    if (!token || !password) {\n      return res.status(400).json({ message: \"Token and password required\" });\n    }\n\n    // Find token\n    const resetToken = await storage.getPasswordResetToken(token);\n    if (!resetToken) {\n      return res.status(400).json({ message: \"Invalid or expired token\" });\n    }\n\n    // Check if expired\n    if (new Date() > resetToken.expiresAt) {\n      await storage.deletePasswordResetToken(token);\n      return res.status(400).json({ message: \"Invalid or expired token\" });\n    }\n\n    // Hash new password\n    const hashedPassword = await bcrypt.hash(password, 10);\n\n    // Update user password\n    await storage.updateUserPassword(resetToken.userId, hashedPassword);\n\n    // Delete used token\n    await storage.deletePasswordResetToken(token);\n\n    res.json({ message: \"Password reset successful\" });\n  } catch (error) {\n    console.error(\"Reset password error:\", error);\n    res.status(500).json({ message: \"Failed to reset password\" });\n  }\n});\n\nexport default router;\n","size_bytes":6796},"client/src/pages/auth.tsx":{"content":"import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Eye, EyeOff } from \"lucide-react\";\nimport { COUNTRIES } from \"@/lib/constants\";\nimport illustrationImage from \"@assets/HeyTeam Login Page Animation_1761223879122.gif\";\nimport logoImage from \"@assets/heyteam 1_1760877824955.png\";\n\nconst LAST_EMAIL_KEY = \"heyteam_last_email\";\n\nconst loginSchema = z.object({\n  email: z.string().email(\"Valid email is required\"),\n  password: z.string().min(1, \"Password is required\"),\n});\n\nconst registerSchema = z.object({\n  username: z.string().min(2, \"Company name must be at least 2 characters\"),\n  email: z.string().email(\"Valid email is required\"),\n  countryCode: z.string().min(1, \"Country is required\"),\n  mobileNumber: z.string().min(5, \"Mobile number is required\"),\n  password: z.string().min(6, \"Password must be at least 6 characters\"),\n  confirmPassword: z.string().min(1, \"Please confirm your password\"),\n}).refine((data) => data.password === data.confirmPassword, {\n  message: \"Passwords don't match\",\n  path: [\"confirmPassword\"],\n});\n\nconst forgotPasswordSchema = z.object({\n  email: z.string().email(\"Valid email is required\"),\n});\n\ntype LoginFormData = z.infer<typeof loginSchema>;\ntype RegisterFormData = z.infer<typeof registerSchema>;\ntype ForgotPasswordFormData = z.infer<typeof forgotPasswordSchema>;\n\nexport default function AuthPage() {\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const [activeTab, setActiveTab] = useState<\"login\" | \"register\">(\"login\");\n  const [showForgotPassword, setShowForgotPassword] = useState(false);\n  const [showPassword, setShowPassword] = useState(false);\n  const [showRegisterPassword, setShowRegisterPassword] = useState(false);\n  const [showConfirmPassword, setShowConfirmPassword] = useState(false);\n\n  const lastEmail = typeof window !== \"undefined\" ? localStorage.getItem(LAST_EMAIL_KEY) || \"\" : \"\";\n\n  const loginForm = useForm<LoginFormData>({\n    resolver: zodResolver(loginSchema),\n    defaultValues: {\n      email: lastEmail,\n      password: \"\",\n    },\n  });\n\n  const registerForm = useForm<RegisterFormData>({\n    resolver: zodResolver(registerSchema),\n    defaultValues: {\n      username: \"\",\n      email: \"\",\n      countryCode: \"US\",\n      mobileNumber: \"\",\n      password: \"\",\n      confirmPassword: \"\",\n    },\n  });\n\n  const forgotPasswordForm = useForm<ForgotPasswordFormData>({\n    resolver: zodResolver(forgotPasswordSchema),\n    defaultValues: {\n      email: \"\",\n    },\n  });\n\n  const loginMutation = useMutation({\n    mutationFn: async (data: LoginFormData) => {\n      return await apiRequest(\"POST\", \"/api/auth/login\", data);\n    },\n    onSuccess: (_, variables) => {\n      if (typeof window !== \"undefined\") {\n        localStorage.setItem(LAST_EMAIL_KEY, variables.email);\n      }\n      toast({ title: \"Login successful\" });\n      queryClient.invalidateQueries({ queryKey: [\"/api/auth/me\"] });\n      setLocation(\"/\");\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Login failed\",\n        description: error.message || \"Invalid credentials\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const registerMutation = useMutation({\n    mutationFn: async (data: RegisterFormData) => {\n      return await apiRequest(\"POST\", \"/api/auth/register\", data);\n    },\n    onSuccess: () => {\n      toast({ title: \"Registration successful\" });\n      queryClient.invalidateQueries({ queryKey: [\"/api/auth/me\"] });\n      setLocation(\"/\");\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Registration failed\",\n        description: error.message || \"Could not create account\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const forgotPasswordMutation = useMutation({\n    mutationFn: async (data: ForgotPasswordFormData) => {\n      return await apiRequest(\"POST\", \"/api/auth/forgot-password\", data);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Check your email\",\n        description: \"If the email exists, a reset link will be sent\",\n      });\n      setShowForgotPassword(false);\n      forgotPasswordForm.reset();\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Request failed\",\n        description: error.message || \"Could not process request\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onLogin = (data: LoginFormData) => {\n    loginMutation.mutate(data);\n  };\n\n  const onRegister = (data: RegisterFormData) => {\n    registerMutation.mutate(data);\n  };\n\n  const onForgotPassword = (data: ForgotPasswordFormData) => {\n    forgotPasswordMutation.mutate(data);\n  };\n\n  if (showForgotPassword) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-background\">\n        <div className=\"grid lg:grid-cols-2 w-full min-h-screen\">\n          {/* Left Panel - Teal */}\n          <div className=\"hidden lg:flex items-center justify-center bg-gradient-to-br from-[#14b8a6] to-[#0d9488] p-12\">\n            <div className=\"max-w-lg text-white space-y-8\">\n              <div className=\"space-y-4\">\n                <img src={logoImage} alt=\"HeyTeam\" className=\"w-48 brightness-0 invert\" />\n                <h1 className=\"text-4xl font-bold leading-tight\">\n                  One click to go<br />all digital.\n                </h1>\n              </div>\n              <div className=\"flex items-center justify-center\">\n                <img src={illustrationImage} alt=\"Digital Management\" className=\"w-full max-w-md rounded-lg\" />\n              </div>\n            </div>\n          </div>\n\n          {/* Right Panel - Form */}\n          <div className=\"flex items-center justify-center p-6 sm:p-12\">\n            <div className=\"w-full max-w-md space-y-8\">\n              <div className=\"lg:hidden mb-8\">\n                <img src={logoImage} alt=\"HeyTeam\" className=\"w-40 mx-auto\" />\n              </div>\n              \n              <div className=\"space-y-2\">\n                <h2 className=\"text-3xl font-bold\">Reset Password</h2>\n                <p className=\"text-muted-foreground\">\n                  Enter your email address and we'll send you a reset link\n                </p>\n              </div>\n\n              <Form {...forgotPasswordForm}>\n                <form onSubmit={forgotPasswordForm.handleSubmit(onForgotPassword)} className=\"space-y-5\">\n                  <FormField\n                    control={forgotPasswordForm.control}\n                    name=\"email\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Email Address</FormLabel>\n                        <FormControl>\n                          <Input\n                            {...field}\n                            type=\"email\"\n                            placeholder=\"your@email.com\"\n                            className=\"h-11\"\n                            data-testid=\"input-forgot-email\"\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <div className=\"flex gap-3 pt-2\">\n                    <Button\n                      type=\"button\"\n                      variant=\"outline\"\n                      onClick={() => setShowForgotPassword(false)}\n                      className=\"flex-1 h-11\"\n                      data-testid=\"button-back-to-login\"\n                    >\n                      Back to Login\n                    </Button>\n                    <Button\n                      type=\"submit\"\n                      className=\"flex-1 h-11\"\n                      disabled={forgotPasswordMutation.isPending}\n                      data-testid=\"button-send-reset\"\n                    >\n                      {forgotPasswordMutation.isPending ? \"Sending...\" : \"Send Reset Link\"}\n                    </Button>\n                  </div>\n                </form>\n              </Form>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-background\">\n      <div className=\"grid lg:grid-cols-2 w-full min-h-screen\">\n        {/* Left Panel - Teal Gradient with Illustration */}\n        <div className=\"hidden lg:flex items-center justify-center bg-gradient-to-br from-[#14b8a6] to-[#0d9488] p-12\">\n          <div className=\"max-w-lg text-white space-y-8\">\n            <div className=\"space-y-4\">\n              <img src={logoImage} alt=\"HeyTeam\" className=\"w-48 brightness-0 invert\" />\n              <h1 className=\"text-4xl font-bold leading-tight\">\n                Stop calling around.<br />Just HeyTeam it.\n              </h1>\n            </div>\n            <div className=\"flex items-center justify-center\">\n              <img src={illustrationImage} alt=\"Digital Management\" className=\"w-full max-w-md rounded-lg\" />\n            </div>\n          </div>\n        </div>\n\n        {/* Right Panel - Auth Form */}\n        <div className=\"flex items-center justify-center p-6 sm:p-12\">\n          <div className=\"w-full max-w-md space-y-8\">\n            {/* Mobile Logo */}\n            <div className=\"lg:hidden mb-8\">\n              <img src={logoImage} alt=\"HeyTeam\" className=\"w-40 mx-auto\" />\n            </div>\n\n            {/* Login Form */}\n            {activeTab === \"login\" && (\n              <div className=\"space-y-6\">\n                <div className=\"space-y-2\">\n                  <h2 className=\"text-3xl font-bold\" data-testid=\"heading-login\">Sign in</h2>\n                  <p className=\"text-muted-foreground\">Welcome back! Please enter your details</p>\n                </div>\n\n                <Form {...loginForm}>\n                  <form onSubmit={loginForm.handleSubmit(onLogin)} className=\"space-y-5\">\n                    <FormField\n                      control={loginForm.control}\n                      name=\"email\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Email Address</FormLabel>\n                          <FormControl>\n                            <Input\n                              {...field}\n                              type=\"email\"\n                              placeholder=\"your@email.com\"\n                              className=\"h-11\"\n                              data-testid=\"input-login-email\"\n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <FormField\n                      control={loginForm.control}\n                      name=\"password\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Password</FormLabel>\n                          <FormControl>\n                            <div className=\"relative\">\n                              <Input\n                                {...field}\n                                type={showPassword ? \"text\" : \"password\"}\n                                placeholder=\"Enter your password\"\n                                className=\"h-11 pr-10\"\n                                data-testid=\"input-login-password\"\n                              />\n                              <Button\n                                type=\"button\"\n                                variant=\"ghost\"\n                                size=\"icon\"\n                                className=\"absolute right-0 top-0 h-full px-3 hover:bg-transparent\"\n                                onClick={() => setShowPassword(!showPassword)}\n                                aria-label=\"Toggle password visibility\"\n                                data-testid=\"button-toggle-password\"\n                              >\n                                {showPassword ? (\n                                  <EyeOff className=\"h-4 w-4 text-muted-foreground\" />\n                                ) : (\n                                  <Eye className=\"h-4 w-4 text-muted-foreground\" />\n                                )}\n                              </Button>\n                            </div>\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <div className=\"flex items-center justify-end\">\n                      <Button\n                        type=\"button\"\n                        variant=\"link\"\n                        onClick={() => setShowForgotPassword(true)}\n                        className=\"text-sm h-auto p-0 text-primary\"\n                        data-testid=\"button-forgot-password\"\n                      >\n                        Forgot password?\n                      </Button>\n                    </div>\n\n                    <Button\n                      type=\"submit\"\n                      className=\"w-full h-11 text-base font-semibold\"\n                      disabled={loginMutation.isPending}\n                      data-testid=\"button-login\"\n                    >\n                      {loginMutation.isPending ? \"Signing in...\" : \"Sign In\"}\n                    </Button>\n                  </form>\n                </Form>\n\n                <div className=\"text-center text-sm\">\n                  <span className=\"text-muted-foreground\">Don't have an account? </span>\n                  <Button\n                    type=\"button\"\n                    variant=\"link\"\n                    onClick={() => setActiveTab(\"register\")}\n                    className=\"h-auto p-0 text-primary font-semibold\"\n                    data-testid=\"link-to-register\"\n                  >\n                    Sign up\n                  </Button>\n                </div>\n              </div>\n            )}\n\n            {/* Register Form */}\n            {activeTab === \"register\" && (\n              <div className=\"space-y-6\">\n                <div className=\"space-y-2\">\n                  <h2 className=\"text-3xl font-bold\" data-testid=\"heading-register\">Sign up</h2>\n                  <p className=\"text-muted-foreground\">Create your account to get started</p>\n                </div>\n\n                <Form {...registerForm}>\n                  <form onSubmit={registerForm.handleSubmit(onRegister)} className=\"space-y-5\">\n                    <FormField\n                      control={registerForm.control}\n                      name=\"username\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Company Name</FormLabel>\n                          <FormControl>\n                            <Input\n                              {...field}\n                              placeholder=\"Your Company\"\n                              className=\"h-11\"\n                              data-testid=\"input-register-username\"\n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <FormField\n                      control={registerForm.control}\n                      name=\"email\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Email Address</FormLabel>\n                          <FormControl>\n                            <Input\n                              {...field}\n                              type=\"email\"\n                              placeholder=\"your@email.com\"\n                              className=\"h-11\"\n                              data-testid=\"input-register-email\"\n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <div className=\"grid grid-cols-5 gap-2\">\n                      <FormField\n                        control={registerForm.control}\n                        name=\"countryCode\"\n                        render={({ field }) => (\n                          <FormItem className=\"col-span-2\">\n                            <FormLabel>Country</FormLabel>\n                            <Select onValueChange={field.onChange} defaultValue={field.value}>\n                              <FormControl>\n                                <SelectTrigger className=\"h-11\" data-testid=\"select-country-code\">\n                                  <SelectValue placeholder=\"Select\" />\n                                </SelectTrigger>\n                              </FormControl>\n                              <SelectContent>\n                                {COUNTRIES.map((country) => (\n                                  <SelectItem key={country.code} value={country.code}>\n                                    {country.dialCode}\n                                  </SelectItem>\n                                ))}\n                              </SelectContent>\n                            </Select>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      <FormField\n                        control={registerForm.control}\n                        name=\"mobileNumber\"\n                        render={({ field }) => (\n                          <FormItem className=\"col-span-3\">\n                            <FormLabel>Mobile No</FormLabel>\n                            <FormControl>\n                              <Input\n                                {...field}\n                                type=\"tel\"\n                                placeholder=\"Mobile number\"\n                                className=\"h-11\"\n                                data-testid=\"input-register-mobile\"\n                              />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                    </div>\n\n                    <FormField\n                      control={registerForm.control}\n                      name=\"password\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Password</FormLabel>\n                          <FormControl>\n                            <div className=\"relative\">\n                              <Input\n                                {...field}\n                                type={showRegisterPassword ? \"text\" : \"password\"}\n                                placeholder=\"Create a password\"\n                                className=\"h-11 pr-10\"\n                                data-testid=\"input-register-password\"\n                              />\n                              <Button\n                                type=\"button\"\n                                variant=\"ghost\"\n                                size=\"icon\"\n                                className=\"absolute right-0 top-0 h-full px-3 hover:bg-transparent\"\n                                onClick={() => setShowRegisterPassword(!showRegisterPassword)}\n                                aria-label=\"Toggle password visibility\"\n                                data-testid=\"button-toggle-register-password\"\n                              >\n                                {showRegisterPassword ? (\n                                  <EyeOff className=\"h-4 w-4 text-muted-foreground\" />\n                                ) : (\n                                  <Eye className=\"h-4 w-4 text-muted-foreground\" />\n                                )}\n                              </Button>\n                            </div>\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <FormField\n                      control={registerForm.control}\n                      name=\"confirmPassword\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Confirm Password</FormLabel>\n                          <FormControl>\n                            <div className=\"relative\">\n                              <Input\n                                {...field}\n                                type={showConfirmPassword ? \"text\" : \"password\"}\n                                placeholder=\"Confirm your password\"\n                                className=\"h-11 pr-10\"\n                                data-testid=\"input-register-confirm\"\n                              />\n                              <Button\n                                type=\"button\"\n                                variant=\"ghost\"\n                                size=\"icon\"\n                                className=\"absolute right-0 top-0 h-full px-3 hover:bg-transparent\"\n                                onClick={() => setShowConfirmPassword(!showConfirmPassword)}\n                                aria-label=\"Toggle password visibility\"\n                                data-testid=\"button-toggle-confirm-password\"\n                              >\n                                {showConfirmPassword ? (\n                                  <EyeOff className=\"h-4 w-4 text-muted-foreground\" />\n                                ) : (\n                                  <Eye className=\"h-4 w-4 text-muted-foreground\" />\n                                )}\n                              </Button>\n                            </div>\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <p className=\"text-xs text-muted-foreground\">\n                      By signing up, you agree to our{\" \"}\n                      <span className=\"text-primary\">Terms of Service</span> and{\" \"}\n                      <span className=\"text-primary\">Privacy Policy</span>\n                    </p>\n\n                    <Button\n                      type=\"submit\"\n                      className=\"w-full h-11 text-base font-semibold\"\n                      disabled={registerMutation.isPending}\n                      data-testid=\"button-register\"\n                    >\n                      {registerMutation.isPending ? \"Creating account...\" : \"Get Started\"}\n                    </Button>\n                  </form>\n                </Form>\n\n                <div className=\"text-center text-sm\">\n                  <span className=\"text-muted-foreground\">Already a member? </span>\n                  <Button\n                    type=\"button\"\n                    variant=\"link\"\n                    onClick={() => setActiveTab(\"login\")}\n                    className=\"h-auto p-0 text-primary font-semibold\"\n                    data-testid=\"link-to-login\"\n                  >\n                    Sign in\n                  </Button>\n                </div>\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":23687},"client/src/pages/reset-password.tsx":{"content":"import { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useLocation, useSearch } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Users } from \"lucide-react\";\n\nconst resetPasswordSchema = z.object({\n  password: z.string().min(6, \"Password must be at least 6 characters\"),\n  confirmPassword: z.string().min(1, \"Please confirm your password\"),\n}).refine((data) => data.password === data.confirmPassword, {\n  message: \"Passwords don't match\",\n  path: [\"confirmPassword\"],\n});\n\ntype ResetPasswordFormData = z.infer<typeof resetPasswordSchema>;\n\nexport default function ResetPasswordPage() {\n  const [, setLocation] = useLocation();\n  const search = useSearch();\n  const { toast } = useToast();\n  const token = new URLSearchParams(search).get(\"token\");\n\n  const form = useForm<ResetPasswordFormData>({\n    resolver: zodResolver(resetPasswordSchema),\n    defaultValues: {\n      password: \"\",\n      confirmPassword: \"\",\n    },\n  });\n\n  const resetMutation = useMutation({\n    mutationFn: async (data: ResetPasswordFormData) => {\n      return await apiRequest(\"POST\", \"/api/auth/reset-password\", {\n        token,\n        password: data.password,\n      });\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Password reset successful\",\n        description: \"You can now login with your new password\",\n      });\n      setLocation(\"/auth\");\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Reset failed\",\n        description: error.message || \"Invalid or expired token\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: ResetPasswordFormData) => {\n    if (!token) {\n      toast({\n        title: \"Invalid reset link\",\n        description: \"No reset token found\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    resetMutation.mutate(data);\n  };\n\n  if (!token) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center p-4 bg-background\">\n        <Card className=\"w-full max-w-md\">\n          <CardHeader>\n            <CardTitle>Invalid Reset Link</CardTitle>\n            <CardDescription>\n              The password reset link is invalid or missing.\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <Button\n              onClick={() => setLocation(\"/auth\")}\n              className=\"w-full\"\n              data-testid=\"button-back-to-auth\"\n            >\n              Back to Login\n            </Button>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center p-4 bg-background\">\n      <Card className=\"w-full max-w-md\">\n        <CardHeader>\n          <div className=\"flex items-center gap-2 mb-2\">\n            <Users className=\"h-6 w-6 text-primary\" />\n            <CardTitle>Reset Your Password</CardTitle>\n          </div>\n          <CardDescription>\n            Enter your new password below\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <Form {...form}>\n            <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n              <FormField\n                control={form.control}\n                name=\"password\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>New Password</FormLabel>\n                    <FormControl>\n                      <Input\n                        {...field}\n                        type=\"password\"\n                        placeholder=\"Enter new password\"\n                        data-testid=\"input-new-password\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"confirmPassword\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Confirm New Password</FormLabel>\n                    <FormControl>\n                      <Input\n                        {...field}\n                        type=\"password\"\n                        placeholder=\"Confirm new password\"\n                        data-testid=\"input-confirm-password\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <Button\n                type=\"submit\"\n                className=\"w-full\"\n                disabled={resetMutation.isPending}\n                data-testid=\"button-reset-password\"\n              >\n                {resetMutation.isPending ? \"Resetting...\" : \"Reset Password\"}\n              </Button>\n            </form>\n          </Form>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":5285},"client/src/pages/admin.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Calendar, CreditCard, Key, Settings } from \"lucide-react\";\nimport { PricingManagement } from \"@/components/pricing-management\";\n\ntype UserWithDetails = {\n  id: string;\n  username: string;\n  email: string | null;\n  isAdmin: boolean;\n  currency: string;\n  credits: number;\n  smsVolume: number;\n  subscription: {\n    planId: string | null;\n    planName: string;\n    status: string;\n    currency: string;\n    currentPeriodEnd: string | null;\n    trialEndsAt: string | null;\n  };\n};\n\ntype SubscriptionPlan = {\n  id: string;\n  name: string;\n  description: string | null;\n  monthlyCredits: number;\n  priceMonthly: number;\n};\n\nexport default function AdminPage() {\n  const { toast } = useToast();\n  const [selectedUser, setSelectedUser] = useState<UserWithDetails | null>(null);\n  const [dialogType, setDialogType] = useState<\"subscription\" | \"credits\" | \"password\" | null>(null);\n\n  // Form state\n  const [selectedPlanId, setSelectedPlanId] = useState(\"\");\n  const [creditAmount, setCreditAmount] = useState(\"\");\n  const [creditReason, setCreditReason] = useState(\"\");\n  const [newPassword, setNewPassword] = useState(\"\");\n\n  const { data: users = [], isLoading: usersLoading } = useQuery<UserWithDetails[]>({\n    queryKey: [\"/api/admin/users\"],\n  });\n\n  const { data: plans = [] } = useQuery<SubscriptionPlan[]>({\n    queryKey: [\"/api/subscription-plans\"],\n  });\n\n  const updateSubscriptionMutation = useMutation({\n    mutationFn: async ({ userId, planId }: { userId: string; planId: string }) => {\n      return await apiRequest(\"POST\", `/api/admin/users/${userId}/subscription`, { planId });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/users\"] });\n      toast({ title: \"Subscription updated successfully\" });\n      closeDialog();\n    },\n    onError: (error: any) => {\n      toast({ \n        title: \"Failed to update subscription\", \n        description: error.message,\n        variant: \"destructive\" \n      });\n    },\n  });\n\n  const grantCreditsMutation = useMutation({\n    mutationFn: async ({ userId, amount, reason }: { userId: string; amount: number; reason: string }) => {\n      return await apiRequest(\"POST\", `/api/admin/users/${userId}/credits`, { amount, reason });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/users\"] });\n      toast({ title: \"Credits granted successfully\" });\n      closeDialog();\n    },\n    onError: (error: any) => {\n      toast({ \n        title: \"Failed to grant credits\", \n        description: error.message,\n        variant: \"destructive\" \n      });\n    },\n  });\n\n  const resetPasswordMutation = useMutation({\n    mutationFn: async ({ userId, newPassword }: { userId: string; newPassword: string }) => {\n      return await apiRequest(\"POST\", `/api/admin/users/${userId}/reset-password`, { newPassword });\n    },\n    onSuccess: () => {\n      toast({ title: \"Password reset successfully\" });\n      closeDialog();\n    },\n    onError: (error: any) => {\n      toast({ \n        title: \"Failed to reset password\", \n        description: error.message,\n        variant: \"destructive\" \n      });\n    },\n  });\n\n  const closeDialog = () => {\n    setDialogType(null);\n    setSelectedUser(null);\n    setSelectedPlanId(\"\");\n    setCreditAmount(\"\");\n    setCreditReason(\"\");\n    setNewPassword(\"\");\n  };\n\n  const handleUpdateSubscription = () => {\n    if (!selectedUser || !selectedPlanId) return;\n    updateSubscriptionMutation.mutate({ userId: selectedUser.id, planId: selectedPlanId });\n  };\n\n  const handleGrantCredits = () => {\n    if (!selectedUser || !creditAmount || parseInt(creditAmount) <= 0) return;\n    grantCreditsMutation.mutate({ \n      userId: selectedUser.id, \n      amount: parseInt(creditAmount),\n      reason: creditReason || \"Admin grant\"\n    });\n  };\n\n  const handleResetPassword = () => {\n    if (!selectedUser || !newPassword || newPassword.length < 6) return;\n    resetPasswordMutation.mutate({ userId: selectedUser.id, newPassword });\n  };\n\n  if (usersLoading) {\n    return (\n      <div className=\"flex items-center justify-center h-screen\">\n        <p data-testid=\"text-loading\">Loading...</p>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"container mx-auto p-6 space-y-6\">\n      <div>\n        <h1 className=\"text-3xl font-bold\" data-testid=\"text-page-title\">Admin Panel</h1>\n        <p className=\"text-muted-foreground\">Manage users, subscriptions, pricing, and credits</p>\n      </div>\n\n      <Tabs defaultValue=\"users\" className=\"w-full\">\n        <TabsList>\n          <TabsTrigger value=\"users\" data-testid=\"tab-users\">User Management</TabsTrigger>\n          <TabsTrigger value=\"pricing\" data-testid=\"tab-pricing\">Pricing Management</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"users\" className=\"space-y-4\">\n          <div className=\"flex items-center justify-end mb-4\">\n            <Badge variant=\"default\" data-testid=\"badge-user-count\">\n              {users.length} {users.length === 1 ? \"User\" : \"Users\"}\n            </Badge>\n          </div>\n\n          <div className=\"grid gap-4\">\n            {users.map((user) => (\n              <Card key={user.id} data-testid={`card-user-${user.id}`}>\n                <CardHeader>\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <CardTitle className=\"flex items-center gap-2\">\n                        {user.username}\n                        {user.isAdmin && (\n                          <Badge variant=\"secondary\" data-testid={`badge-admin-${user.id}`}>Admin</Badge>\n                        )}\n                      </CardTitle>\n                      <CardDescription data-testid={`text-email-${user.id}`}>\n                        {user.email || \"No email\"}\n                      </CardDescription>\n                      <div className=\"flex gap-2 mt-2\">\n                        <Badge variant=\"outline\" data-testid={`badge-currency-${user.id}`}>\n                          {user.currency}\n                        </Badge>\n                        <Badge variant=\"outline\" data-testid={`badge-sms-volume-${user.id}`}>\n                          {user.smsVolume} SMS sent\n                        </Badge>\n                      </div>\n                    </div>\n                    <div className=\"text-right\">\n                      <p className=\"text-sm font-medium\" data-testid={`text-credits-${user.id}`}>\n                        {user.credits} Credits\n                      </p>\n                      <Badge \n                        variant={user.subscription.status === \"active\" ? \"default\" : \"secondary\"}\n                        data-testid={`badge-status-${user.id}`}\n                      >\n                        {user.subscription.planName}\n                      </Badge>\n                    </div>\n                  </div>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"flex gap-2\">\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => {\n                        setSelectedUser(user);\n                        setDialogType(\"subscription\");\n                      }}\n                      data-testid={`button-manage-subscription-${user.id}`}\n                    >\n                      <Settings className=\"h-4 w-4 mr-2\" />\n                      Manage Subscription\n                    </Button>\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => {\n                        setSelectedUser(user);\n                        setDialogType(\"credits\");\n                      }}\n                      data-testid={`button-grant-credits-${user.id}`}\n                    >\n                      <CreditCard className=\"h-4 w-4 mr-2\" />\n                      Grant Credits\n                    </Button>\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => {\n                        setSelectedUser(user);\n                        setDialogType(\"password\");\n                      }}\n                      data-testid={`button-reset-password-${user.id}`}\n                    >\n                      <Key className=\"h-4 w-4 mr-2\" />\n                      Reset Password\n                    </Button>\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </TabsContent>\n\n        <TabsContent value=\"pricing\">\n          <PricingManagement />\n        </TabsContent>\n      </Tabs>\n\n      {/* Subscription Dialog */}\n      <Dialog open={dialogType === \"subscription\"} onOpenChange={closeDialog}>\n        <DialogContent data-testid=\"dialog-manage-subscription\">\n          <DialogHeader>\n            <DialogTitle>Manage Subscription</DialogTitle>\n            <DialogDescription>\n              Update subscription plan for {selectedUser?.username}\n            </DialogDescription>\n          </DialogHeader>\n          <div className=\"space-y-4\">\n            <div>\n              <Label htmlFor=\"plan\">Subscription Plan</Label>\n              <Select value={selectedPlanId} onValueChange={setSelectedPlanId}>\n                <SelectTrigger data-testid=\"select-plan\">\n                  <SelectValue placeholder=\"Select a plan\" />\n                </SelectTrigger>\n                <SelectContent>\n                  {plans.map((plan) => (\n                    <SelectItem key={plan.id} value={plan.id} data-testid={`option-plan-${plan.id}`}>\n                      {plan.name} - ${plan.priceMonthly}/mo ({plan.monthlyCredits} credits)\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n          <DialogFooter>\n            <Button variant=\"outline\" onClick={closeDialog} data-testid=\"button-cancel\">\n              Cancel\n            </Button>\n            <Button \n              onClick={handleUpdateSubscription} \n              disabled={!selectedPlanId || updateSubscriptionMutation.isPending}\n              data-testid=\"button-update-subscription\"\n            >\n              {updateSubscriptionMutation.isPending ? \"Updating...\" : \"Update Subscription\"}\n            </Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n\n      {/* Credits Dialog */}\n      <Dialog open={dialogType === \"credits\"} onOpenChange={closeDialog}>\n        <DialogContent data-testid=\"dialog-grant-credits\">\n          <DialogHeader>\n            <DialogTitle>Grant Credits</DialogTitle>\n            <DialogDescription>\n              Add credits to {selectedUser?.username}'s account\n            </DialogDescription>\n          </DialogHeader>\n          <div className=\"space-y-4\">\n            <div>\n              <Label htmlFor=\"amount\">Credit Amount</Label>\n              <Input\n                id=\"amount\"\n                type=\"number\"\n                min=\"1\"\n                value={creditAmount}\n                onChange={(e) => setCreditAmount(e.target.value)}\n                placeholder=\"Enter number of credits\"\n                data-testid=\"input-credit-amount\"\n              />\n            </div>\n            <div>\n              <Label htmlFor=\"reason\">Reason (Optional)</Label>\n              <Input\n                id=\"reason\"\n                value={creditReason}\n                onChange={(e) => setCreditReason(e.target.value)}\n                placeholder=\"e.g., Bonus credits, Promotion\"\n                data-testid=\"input-credit-reason\"\n              />\n            </div>\n          </div>\n          <DialogFooter>\n            <Button variant=\"outline\" onClick={closeDialog} data-testid=\"button-cancel\">\n              Cancel\n            </Button>\n            <Button \n              onClick={handleGrantCredits} \n              disabled={!creditAmount || parseInt(creditAmount) <= 0 || grantCreditsMutation.isPending}\n              data-testid=\"button-grant\"\n            >\n              {grantCreditsMutation.isPending ? \"Granting...\" : \"Grant Credits\"}\n            </Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n\n      {/* Password Reset Dialog */}\n      <Dialog open={dialogType === \"password\"} onOpenChange={closeDialog}>\n        <DialogContent data-testid=\"dialog-reset-password\">\n          <DialogHeader>\n            <DialogTitle>Reset Password</DialogTitle>\n            <DialogDescription>\n              Set a new password for {selectedUser?.username}\n            </DialogDescription>\n          </DialogHeader>\n          <div className=\"space-y-4\">\n            <div>\n              <Label htmlFor=\"newPassword\">New Password</Label>\n              <Input\n                id=\"newPassword\"\n                type=\"password\"\n                value={newPassword}\n                onChange={(e) => setNewPassword(e.target.value)}\n                placeholder=\"Enter new password (min 6 characters)\"\n                data-testid=\"input-new-password\"\n              />\n            </div>\n          </div>\n          <DialogFooter>\n            <Button variant=\"outline\" onClick={closeDialog} data-testid=\"button-cancel\">\n              Cancel\n            </Button>\n            <Button \n              onClick={handleResetPassword} \n              disabled={!newPassword || newPassword.length < 6 || resetPasswordMutation.isPending}\n              data-testid=\"button-reset\"\n            >\n              {resetPasswordMutation.isPending ? \"Resetting...\" : \"Reset Password\"}\n            </Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}\n","size_bytes":14446},"client/src/pages/team.tsx":{"content":"import { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { UserPlus, Crown, Shield, User as UserIcon, Trash2, Pencil } from \"lucide-react\";\nimport { useState } from \"react\";\n\nexport default function TeamPage() {\n  const { toast } = useToast();\n  const [inviteDialogOpen, setInviteDialogOpen] = useState(false);\n  const [inviteData, setInviteData] = useState({ firstName: \"\", lastName: \"\", email: \"\", teamRole: \"member\" });\n  const [editDialogOpen, setEditDialogOpen] = useState(false);\n  const [editingMember, setEditingMember] = useState<any>(null);\n  const [editData, setEditData] = useState({ firstName: \"\", lastName: \"\", email: \"\" });\n\n  const { data: user } = useQuery({\n    queryKey: [\"/api/auth/me\"],\n  });\n\n  const { data: organization } = useQuery({\n    queryKey: [\"/api/organization\"],\n    enabled: !!user,\n  });\n\n  const { data: members, isLoading } = useQuery({\n    queryKey: [\"/api/organization/members\"],\n    enabled: !!user,\n  });\n\n  const inviteMutation = useMutation({\n    mutationFn: async (data: { firstName: string; lastName: string; email: string; teamRole: string }) => {\n      return await apiRequest(\"POST\", \"/api/organization/invite\", data);\n    },\n    onSuccess: (data) => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/organization/members\"] });\n      setInviteDialogOpen(false);\n      setInviteData({ firstName: \"\", lastName: \"\", email: \"\", teamRole: \"member\" });\n      toast({\n        title: \"Team member invited\",\n        description: `Temporary password: ${data.temporaryPassword}`,\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Failed to invite member\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateRoleMutation = useMutation({\n    mutationFn: async ({ userId, teamRole }: { userId: string; teamRole: string }) => {\n      return await apiRequest(\"PATCH\", `/api/organization/members/${userId}/role`, { teamRole });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/organization/members\"] });\n      toast({ title: \"Team role updated\" });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Failed to update role\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const removeMemberMutation = useMutation({\n    mutationFn: async (userId: string) => {\n      return await apiRequest(\"DELETE\", `/api/organization/members/${userId}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/organization/members\"] });\n      toast({ title: \"Team member removed\" });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Failed to remove member\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateMemberMutation = useMutation({\n    mutationFn: async ({ userId, data }: { userId: string; data: { firstName: string; lastName: string; email: string } }) => {\n      return await apiRequest(\"PATCH\", `/api/organization/members/${userId}`, data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/organization/members\"] });\n      setEditDialogOpen(false);\n      setEditingMember(null);\n      toast({ title: \"Team member updated\" });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Failed to update member\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const getRoleIcon = (role: string) => {\n    switch (role) {\n      case \"owner\":\n        return <Crown className=\"h-4 w-4 text-primary\" />;\n      case \"admin\":\n        return <Shield className=\"h-4 w-4 text-primary\" />;\n      default:\n        return <UserIcon className=\"h-4 w-4 text-muted-foreground\" />;\n    }\n  };\n\n  const getRoleBadge = (role: string) => {\n    const variant = role === \"owner\" ? \"default\" : role === \"admin\" ? \"secondary\" : \"outline\";\n    return (\n      <Badge variant={variant} className=\"gap-1\" data-testid={`badge-role-${role}`}>\n        {getRoleIcon(role)}\n        {role.charAt(0).toUpperCase() + role.slice(1)}\n      </Badge>\n    );\n  };\n\n  return (\n    <div className=\"container mx-auto py-8 max-w-6xl\">\n      <div className=\"flex items-center justify-between mb-6\">\n        <div>\n          <h1 className=\"text-3xl font-bold\" data-testid=\"text-page-title\">Team Management</h1>\n          <p className=\"text-muted-foreground mt-1\" data-testid=\"text-organization-name\">\n            {organization?.name}\n          </p>\n        </div>\n        {(user?.teamRole === \"admin\" || user?.teamRole === \"owner\") && (\n          <Dialog open={inviteDialogOpen} onOpenChange={setInviteDialogOpen}>\n            <DialogTrigger asChild>\n              <Button className=\"gap-2\" data-testid=\"button-invite-member\">\n                <UserPlus className=\"h-4 w-4\" />\n                Invite Member\n              </Button>\n            </DialogTrigger>\n            <DialogContent data-testid=\"dialog-invite-member\">\n              <DialogHeader>\n                <DialogTitle>Invite Team Member</DialogTitle>\n                <DialogDescription>\n                  Add a new member to your team. They'll receive login credentials.\n                </DialogDescription>\n              </DialogHeader>\n              <div className=\"space-y-4 py-4\">\n                <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"firstName\">First Name</Label>\n                    <Input\n                      id=\"firstName\"\n                      data-testid=\"input-first-name\"\n                      value={inviteData.firstName}\n                      onChange={(e) => setInviteData({ ...inviteData, firstName: e.target.value })}\n                      placeholder=\"John\"\n                    />\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"lastName\">Last Name</Label>\n                    <Input\n                      id=\"lastName\"\n                      data-testid=\"input-last-name\"\n                      value={inviteData.lastName}\n                      onChange={(e) => setInviteData({ ...inviteData, lastName: e.target.value })}\n                      placeholder=\"Doe\"\n                    />\n                  </div>\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"email\">Email</Label>\n                  <Input\n                    id=\"email\"\n                    type=\"email\"\n                    data-testid=\"input-email\"\n                    value={inviteData.email}\n                    onChange={(e) => setInviteData({ ...inviteData, email: e.target.value })}\n                    placeholder=\"john@example.com\"\n                  />\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"role\">Role</Label>\n                  <Select\n                    value={inviteData.teamRole}\n                    onValueChange={(value) => setInviteData({ ...inviteData, teamRole: value })}\n                  >\n                    <SelectTrigger id=\"role\" data-testid=\"select-role\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"member\">Member</SelectItem>\n                      <SelectItem value=\"admin\">Admin</SelectItem>\n                      {user?.teamRole === \"owner\" && <SelectItem value=\"owner\">Owner</SelectItem>}\n                    </SelectContent>\n                  </Select>\n                </div>\n              </div>\n              <DialogFooter>\n                <Button\n                  onClick={() => inviteMutation.mutate(inviteData)}\n                  disabled={inviteMutation.isPending || !inviteData.firstName || !inviteData.lastName || !inviteData.email}\n                  data-testid=\"button-send-invite\"\n                >\n                  {inviteMutation.isPending ? \"Inviting...\" : \"Send Invite\"}\n                </Button>\n              </DialogFooter>\n            </DialogContent>\n          </Dialog>\n        )}\n      </div>\n\n      <Card>\n        <CardHeader>\n          <CardTitle>Team Members</CardTitle>\n          <CardDescription>\n            Manage your team members and their roles\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          {isLoading ? (\n            <div className=\"text-center py-8 text-muted-foreground\" data-testid=\"text-loading\">\n              Loading team members...\n            </div>\n          ) : (\n            <div className=\"overflow-x-auto -mx-4 sm:mx-0\">\n              <div className=\"inline-block min-w-full align-middle\">\n                <Table className=\"min-w-[640px]\">\n              <TableHeader>\n                <TableRow>\n                  <TableHead>Name</TableHead>\n                  <TableHead>Email</TableHead>\n                  <TableHead>Role</TableHead>\n                  <TableHead className=\"text-right\">Actions</TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {members?.map((member: any) => (\n                  <TableRow key={member.id} data-testid={`row-member-${member.id}`}>\n                    <TableCell className=\"font-medium\" data-testid={`text-name-${member.id}`}>\n                      {member.firstName && member.lastName ? `${member.firstName} ${member.lastName}` : member.username}\n                      {member.id === user?.id && (\n                        <Badge variant=\"outline\" className=\"ml-2\">You</Badge>\n                      )}\n                    </TableCell>\n                    <TableCell data-testid={`text-email-${member.id}`}>{member.email}</TableCell>\n                    <TableCell>\n                      {(user?.teamRole === \"admin\" || user?.teamRole === \"owner\") && member.id !== user?.id ? (\n                        <Select\n                          value={member.teamRole}\n                          onValueChange={(value) => updateRoleMutation.mutate({ userId: member.id, teamRole: value })}\n                          disabled={member.teamRole === \"owner\" && user?.teamRole !== \"owner\"}\n                        >\n                          <SelectTrigger className=\"w-36\" data-testid={`select-role-${member.id}`}>\n                            <div className=\"flex items-center gap-2\">\n                              {getRoleIcon(member.teamRole)}\n                              <span>{member.teamRole.charAt(0).toUpperCase() + member.teamRole.slice(1)}</span>\n                            </div>\n                          </SelectTrigger>\n                          <SelectContent>\n                            <SelectItem value=\"member\">\n                              <div className=\"flex items-center gap-2\">\n                                <UserIcon className=\"h-4 w-4\" />\n                                Member\n                              </div>\n                            </SelectItem>\n                            <SelectItem value=\"admin\">\n                              <div className=\"flex items-center gap-2\">\n                                <Shield className=\"h-4 w-4\" />\n                                Admin\n                              </div>\n                            </SelectItem>\n                            {user?.teamRole === \"owner\" && (\n                              <SelectItem value=\"owner\">\n                                <div className=\"flex items-center gap-2\">\n                                  <Crown className=\"h-4 w-4\" />\n                                  Owner\n                                </div>\n                              </SelectItem>\n                            )}\n                          </SelectContent>\n                        </Select>\n                      ) : (\n                        getRoleBadge(member.teamRole)\n                      )}\n                    </TableCell>\n                    <TableCell className=\"text-right\">\n                      <div className=\"flex items-center justify-end gap-2\">\n                        {(user?.teamRole === \"admin\" || user?.teamRole === \"owner\") && member.id !== user?.id && (\n                          <Button\n                            variant=\"ghost\"\n                            size=\"icon\"\n                            onClick={() => {\n                              setEditingMember(member);\n                              setEditData({ \n                                firstName: member.firstName || \"\", \n                                lastName: member.lastName || \"\", \n                                email: member.email \n                              });\n                              setEditDialogOpen(true);\n                            }}\n                            data-testid={`button-edit-${member.id}`}\n                          >\n                            <Pencil className=\"h-4 w-4\" />\n                          </Button>\n                        )}\n                        {(user?.teamRole === \"admin\" || user?.teamRole === \"owner\") &&\n                          member.id !== user?.id &&\n                          member.teamRole !== \"owner\" && (\n                            <Button\n                              variant=\"ghost\"\n                              size=\"icon\"\n                              className=\"text-destructive hover:text-destructive\"\n                              onClick={() => {\n                                if (confirm(`Remove ${member.username} from the team?`)) {\n                                  removeMemberMutation.mutate(member.id);\n                                }\n                              }}\n                              data-testid={`button-remove-${member.id}`}\n                            >\n                              <Trash2 className=\"h-4 w-4\" />\n                            </Button>\n                          )}\n                      </div>\n                    </TableCell>\n                  </TableRow>\n                ))}\n              </TableBody>\n            </Table>\n              </div>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      <Dialog open={editDialogOpen} onOpenChange={setEditDialogOpen}>\n        <DialogContent data-testid=\"dialog-edit-member\">\n          <DialogHeader>\n            <DialogTitle>Edit Team Member</DialogTitle>\n            <DialogDescription>\n              Update the name or email for this team member\n            </DialogDescription>\n          </DialogHeader>\n          <div className=\"space-y-4 py-4\">\n            <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"edit-firstName\">First Name</Label>\n                <Input\n                  id=\"edit-firstName\"\n                  data-testid=\"input-edit-first-name\"\n                  value={editData.firstName}\n                  onChange={(e) => setEditData({ ...editData, firstName: e.target.value })}\n                  placeholder=\"John\"\n                />\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"edit-lastName\">Last Name</Label>\n                <Input\n                  id=\"edit-lastName\"\n                  data-testid=\"input-edit-last-name\"\n                  value={editData.lastName}\n                  onChange={(e) => setEditData({ ...editData, lastName: e.target.value })}\n                  placeholder=\"Doe\"\n                />\n              </div>\n            </div>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"edit-email\">Email</Label>\n              <Input\n                id=\"edit-email\"\n                type=\"email\"\n                data-testid=\"input-edit-email\"\n                value={editData.email}\n                onChange={(e) => setEditData({ ...editData, email: e.target.value })}\n                placeholder=\"john@example.com\"\n              />\n            </div>\n          </div>\n          <DialogFooter>\n            <Button\n              variant=\"outline\"\n              onClick={() => {\n                setEditDialogOpen(false);\n                setEditingMember(null);\n              }}\n            >\n              Cancel\n            </Button>\n            <Button\n              onClick={() => updateMemberMutation.mutate({ userId: editingMember?.id, data: editData })}\n              disabled={updateMemberMutation.isPending || !editData.firstName || !editData.lastName || !editData.email}\n              data-testid=\"button-save-member\"\n            >\n              {updateMemberMutation.isPending ? \"Saving...\" : \"Save Changes\"}\n            </Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}\n","size_bytes":17449},"server/seed-plans.ts":{"content":"import { drizzle } from \"drizzle-orm/neon-serverless\";\nimport { Pool, neonConfig } from \"@neondatabase/serverless\";\nimport ws from \"ws\";\nimport { subscriptionPlans, smsBundles } from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nconst pool = new Pool({ connectionString: process.env.DATABASE_URL! });\nconst db = drizzle(pool);\n\nasync function seedPlans() {\n  try {\n    console.log(\"Seeding subscription plans...\");\n\n    // Check if plans already exist\n    const existingPlans = await db.select().from(subscriptionPlans);\n    if (existingPlans.length > 0) {\n      console.log(\"Plans already exist, skipping seed.\");\n      return;\n    }\n\n    // Starter Plan - £29/mo (500 messages)\n    const [starterPlan] = await db.insert(subscriptionPlans).values({\n      name: \"Starter\",\n      description: \"Perfect for small teams getting started with workforce coordination\",\n      priceGBP: 2900, // £29.00\n      priceUSD: 3700, // $37.00\n      priceEUR: 3400, // €34.00\n      monthlyCredits: 500,\n      calendarIntegrations: 1,\n      supportLevel: \"email\",\n      customTemplates: false,\n      autoFollowUp: false,\n      multiManager: false,\n      aiFeatures: false,\n      dedicatedNumber: false,\n      isActive: true,\n    }).returning();\n\n    // Team Plan - £79/mo (3,000 messages)\n    const [teamPlan] = await db.insert(subscriptionPlans).values({\n      name: \"Team\",\n      description: \"For growing teams needing advanced features and more messages\",\n      priceGBP: 7900, // £79.00\n      priceUSD: 10000, // $100.00\n      priceEUR: 9200, // €92.00\n      monthlyCredits: 3000,\n      calendarIntegrations: 5,\n      supportLevel: \"priority\",\n      customTemplates: true,\n      autoFollowUp: true,\n      multiManager: true,\n      aiFeatures: false,\n      dedicatedNumber: false,\n      isActive: true,\n    }).returning();\n\n    // Business Plan - £199/mo (10,000 messages)\n    const [businessPlan] = await db.insert(subscriptionPlans).values({\n      name: \"Business\",\n      description: \"Complete solution with dedicated support and advanced AI features\",\n      priceGBP: 19900, // £199.00\n      priceUSD: 25200, // $252.00\n      priceEUR: 23200, // €232.00\n      monthlyCredits: 10000,\n      calendarIntegrations: 99,\n      supportLevel: \"dedicated\",\n      customTemplates: true,\n      autoFollowUp: true,\n      multiManager: true,\n      aiFeatures: true,\n      dedicatedNumber: true,\n      isActive: true,\n    }).returning();\n\n    console.log(\"✓ Created subscription plans\");\n\n    // Create SMS bundles for each plan\n    await db.insert(smsBundles).values([\n      // Starter bundles\n      {\n        name: \"Starter - 500 SMS\",\n        description: \"Additional 500 messages for Starter plan\",\n        credits: 500,\n        priceGBP: 1500, // £15.00\n        priceUSD: 1900, // $19.00\n        priceEUR: 1700, // €17.00\n        planId: starterPlan.id,\n        isActive: true,\n      },\n      {\n        name: \"Starter - 1,000 SMS\",\n        description: \"Additional 1,000 messages for Starter plan\",\n        credits: 1000,\n        priceGBP: 2500, // £25.00\n        priceUSD: 3200, // $32.00\n        priceEUR: 2900, // €29.00\n        planId: starterPlan.id,\n        isActive: true,\n      },\n      // Team bundles\n      {\n        name: \"Team - 1,000 SMS\",\n        description: \"Additional 1,000 messages for Team plan\",\n        credits: 1000,\n        priceGBP: 2000, // £20.00\n        priceUSD: 2500, // $25.00\n        priceEUR: 2300, // €23.00\n        planId: teamPlan.id,\n        isActive: true,\n      },\n      {\n        name: \"Team - 5,000 SMS\",\n        description: \"Additional 5,000 messages for Team plan\",\n        credits: 5000,\n        priceGBP: 9000, // £90.00\n        priceUSD: 11400, // $114.00\n        priceEUR: 10500, // €105.00\n        planId: teamPlan.id,\n        isActive: true,\n      },\n      // Business bundles\n      {\n        name: \"Business - 5,000 SMS\",\n        description: \"Additional 5,000 messages for Business plan\",\n        credits: 5000,\n        priceGBP: 7500, // £75.00\n        priceUSD: 9500, // $95.00\n        priceEUR: 8700, // €87.00\n        planId: businessPlan.id,\n        isActive: true,\n      },\n      {\n        name: \"Business - 10,000 SMS\",\n        description: \"Additional 10,000 messages for Business plan\",\n        credits: 10000,\n        priceGBP: 13500, // £135.00\n        priceUSD: 17100, // $171.00\n        priceEUR: 15700, // €157.00\n        planId: businessPlan.id,\n        isActive: true,\n      },\n    ]);\n\n    console.log(\"✓ Created SMS bundles\");\n    console.log(\"\\nSeeding complete!\");\n    console.log(`Created ${existingPlans.length === 0 ? 3 : 0} subscription plans and 6 SMS bundles`);\n  } catch (error) {\n    console.error(\"Error seeding plans:\", error);\n    throw error;\n  }\n}\n\nseedPlans()\n  .then(() => process.exit(0))\n  .catch(() => process.exit(1));\n","size_bytes":4837},"client/src/pages/pricing.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Link } from \"wouter\";\nimport { Card } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Check, Zap, Users, Building2 } from \"lucide-react\";\n\ntype Currency = \"GBP\" | \"USD\" | \"EUR\";\n\ninterface SubscriptionPlan {\n  id: string;\n  name: string;\n  priceGbp: number;\n  priceUsd: number;\n  priceEur: number;\n  messagesPerMonth: number;\n  calendarIntegrations: number;\n  supportLevel: string;\n  customTemplates: boolean;\n  autoFollowUp: boolean;\n  multiManager: boolean;\n  aiFeatures: boolean;\n  dedicatedNumber: boolean;\n}\n\nconst CURRENCY_SYMBOLS = {\n  GBP: \"£\",\n  USD: \"$\",\n  EUR: \"€\",\n} as const;\n\nconst PLAN_ICONS = {\n  Starter: Zap,\n  Team: Users,\n  Business: Building2,\n} as const;\n\nconst PLAN_COLORS = {\n  Starter: \"bg-primary/10 text-primary border-primary/20\",\n  Team: \"bg-blue-500/10 text-blue-600 border-blue-500/20\",\n  Business: \"bg-purple-500/10 text-purple-600 border-purple-500/20\",\n} as const;\n\nexport default function PricingPage() {\n  const [currency, setCurrency] = useState<Currency>(\"GBP\");\n\n  const { data: user } = useQuery({\n    queryKey: [\"/api/auth/me\"],\n  });\n\n  const { data: plans = [], isLoading } = useQuery<SubscriptionPlan[]>({\n    queryKey: [\"/api/subscription-plans\"],\n  });\n\n  const getPrice = (plan: SubscriptionPlan) => {\n    switch (currency) {\n      case \"USD\":\n        return plan.priceUsd;\n      case \"EUR\":\n        return plan.priceEur;\n      default:\n        return plan.priceGbp;\n    }\n  };\n\n  const getPlanFeatures = (plan: SubscriptionPlan) => {\n    const features = [\n      `${plan.messagesPerMonth.toLocaleString()} messages per month`,\n      `${plan.calendarIntegrations} calendar integration${plan.calendarIntegrations > 1 ? \"s\" : \"\"}`,\n      `${plan.supportLevel} support`,\n    ];\n\n    if (plan.customTemplates) features.push(\"Custom message templates\");\n    if (plan.autoFollowUp) features.push(\"Auto follow-up messages\");\n    if (plan.multiManager) features.push(\"Multi-manager access\");\n    if (plan.aiFeatures) features.push(\"AI-powered insights\");\n    if (plan.dedicatedNumber) features.push(\"Dedicated phone number\");\n\n    return features;\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"text-muted-foreground\">Loading pricing...</div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background py-12 px-6\">\n      <div className=\"max-w-7xl mx-auto\">\n        <div className=\"text-center mb-12\">\n          <h1 className=\"text-4xl font-semibold text-foreground mb-4\" data-testid=\"text-pricing-title\">\n            Choose the right plan for your team\n          </h1>\n          <p className=\"text-lg text-muted-foreground mb-8\" data-testid=\"text-pricing-subtitle\">\n            Streamline workforce coordination with SMS/Email messaging, availability tracking, and calendar sync\n          </p>\n\n          <div className=\"inline-flex items-center gap-2 p-1 bg-muted rounded-lg\" data-testid=\"group-currency-selector\">\n            {([\"GBP\", \"USD\", \"EUR\"] as Currency[]).map((curr) => (\n              <Button\n                key={curr}\n                variant={currency === curr ? \"default\" : \"ghost\"}\n                size=\"sm\"\n                onClick={() => setCurrency(curr)}\n                className={`toggle-elevate ${currency === curr ? \"toggle-elevated\" : \"\"}`}\n                data-testid={`button-currency-${curr.toLowerCase()}`}\n              >\n                {CURRENCY_SYMBOLS[curr]} {curr}\n              </Button>\n            ))}\n          </div>\n        </div>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-8\">\n          {plans.map((plan) => {\n            const Icon = PLAN_ICONS[plan.name as keyof typeof PLAN_ICONS] || Zap;\n            const isPopular = plan.name === \"Team\";\n\n            return (\n              <Card\n                key={plan.id}\n                className={`relative p-6 flex flex-col ${isPopular ? \"border-primary shadow-lg\" : \"\"}`}\n                data-testid={`card-plan-${plan.name.toLowerCase()}`}\n              >\n                {isPopular && (\n                  <div className=\"absolute -top-3 left-1/2 -translate-x-1/2\">\n                    <Badge className=\"bg-primary text-primary-foreground\" data-testid=\"badge-popular\">\n                      Most Popular\n                    </Badge>\n                  </div>\n                )}\n\n                <div className=\"mb-6\">\n                  <div className=\"flex items-center gap-3 mb-2\">\n                    <div className={`p-2 rounded-lg ${PLAN_COLORS[plan.name as keyof typeof PLAN_COLORS] || PLAN_COLORS.Starter}`}>\n                      <Icon className=\"w-5 h-5\" />\n                    </div>\n                    <h2 className=\"text-2xl font-semibold text-foreground\" data-testid={`text-plan-name-${plan.name.toLowerCase()}`}>\n                      {plan.name}\n                    </h2>\n                  </div>\n\n                  <div className=\"flex items-baseline gap-1 mb-4\">\n                    <span className=\"text-4xl font-semibold text-foreground\" data-testid={`text-price-${plan.name.toLowerCase()}`}>\n                      {CURRENCY_SYMBOLS[currency]}{getPrice(plan)}\n                    </span>\n                    <span className=\"text-muted-foreground\">/month</span>\n                  </div>\n\n                  <p className=\"text-sm text-muted-foreground\">\n                    Perfect for {plan.name === \"Starter\" ? \"small teams getting started\" : plan.name === \"Team\" ? \"growing teams\" : \"large organizations\"}\n                  </p>\n                </div>\n\n                <ul className=\"space-y-3 mb-8 flex-1\">\n                  {getPlanFeatures(plan).map((feature, index) => (\n                    <li key={index} className=\"flex items-start gap-2\" data-testid={`text-feature-${plan.name.toLowerCase()}-${index}`}>\n                      <Check className=\"w-5 h-5 text-primary flex-shrink-0 mt-0.5\" />\n                      <span className=\"text-sm text-foreground\">{feature}</span>\n                    </li>\n                  ))}\n                </ul>\n\n                {user ? (\n                  <Link href=\"/billing\">\n                    <Button\n                      variant={isPopular ? \"default\" : \"outline\"}\n                      className=\"w-full\"\n                      data-testid={`button-select-${plan.name.toLowerCase()}`}\n                    >\n                      Select {plan.name}\n                    </Button>\n                  </Link>\n                ) : (\n                  <Link href=\"/auth\">\n                    <Button\n                      variant={isPopular ? \"default\" : \"outline\"}\n                      className=\"w-full\"\n                      data-testid={`button-get-started-${plan.name.toLowerCase()}`}\n                    >\n                      Get Started\n                    </Button>\n                  </Link>\n                )}\n              </Card>\n            );\n          })}\n        </div>\n\n        <div className=\"mt-16 text-center\">\n          <h3 className=\"text-xl font-semibold text-foreground mb-4\">Need more messages?</h3>\n          <p className=\"text-muted-foreground mb-6\">\n            Add SMS bundles to your subscription for additional messaging credits at discounted rates\n          </p>\n          {user ? (\n            <Link href=\"/billing\">\n              <Button variant=\"outline\" data-testid=\"button-view-bundles\">\n                View SMS Bundles\n              </Button>\n            </Link>\n          ) : (\n            <Link href=\"/auth\">\n              <Button variant=\"outline\" data-testid=\"button-signup-bundles\">\n                Sign Up to View Bundles\n              </Button>\n            </Link>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":7867},"client/src/components/pricing-management.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Pencil } from \"lucide-react\";\n\ntype SubscriptionPlan = {\n  id: string;\n  name: string;\n  description: string | null;\n  monthlyCredits: number;\n  priceGBP: number;\n  priceUSD: number;\n  priceEUR: number;\n  calendarIntegrations: number;\n  supportLevel: string;\n  customTemplates: boolean;\n  autoFollowUp: boolean;\n  multiManager: boolean;\n  aiFeatures: boolean;\n  dedicatedNumber: boolean;\n  isActive: boolean;\n};\n\ntype SmsBundle = {\n  id: string;\n  name: string;\n  description: string | null;\n  credits: number;\n  priceGBP: number;\n  priceUSD: number;\n  priceEUR: number;\n  planId: string | null;\n  isActive: boolean;\n};\n\nexport function PricingManagement() {\n  const { toast } = useToast();\n  const [editingPlan, setEditingPlan] = useState<SubscriptionPlan | null>(null);\n  const [editingBundle, setEditingBundle] = useState<SmsBundle | null>(null);\n  const [priceGBP, setPriceGBP] = useState(\"\");\n  const [priceUSD, setPriceUSD] = useState(\"\");\n  const [priceEUR, setPriceEUR] = useState(\"\");\n\n  const { data: plans = [], isLoading: plansLoading } = useQuery<SubscriptionPlan[]>({\n    queryKey: [\"/api/admin/subscription-plans\"],\n  });\n\n  const { data: bundles = [], isLoading: bundlesLoading } = useQuery<SmsBundle[]>({\n    queryKey: [\"/api/admin/sms-bundles\"],\n  });\n\n  const updatePlanPricingMutation = useMutation({\n    mutationFn: async ({ planId, prices }: { planId: string; prices: { priceGBP: number; priceUSD: number; priceEUR: number } }) => {\n      return await apiRequest(\"PATCH\", `/api/admin/subscription-plans/${planId}/pricing`, prices);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/subscription-plans\"] });\n      toast({ title: \"Plan pricing updated successfully\" });\n      closeDialog();\n    },\n    onError: (error: any) => {\n      toast({ \n        title: \"Failed to update plan pricing\", \n        description: error.message,\n        variant: \"destructive\" \n      });\n    },\n  });\n\n  const updateBundlePricingMutation = useMutation({\n    mutationFn: async ({ bundleId, prices }: { bundleId: string; prices: { priceGBP: number; priceUSD: number; priceEUR: number } }) => {\n      return await apiRequest(\"PATCH\", `/api/admin/sms-bundles/${bundleId}/pricing`, prices);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/sms-bundles\"] });\n      toast({ title: \"Bundle pricing updated successfully\" });\n      closeDialog();\n    },\n    onError: (error: any) => {\n      toast({ \n        title: \"Failed to update bundle pricing\", \n        description: error.message,\n        variant: \"destructive\" \n      });\n    },\n  });\n\n  const openPlanDialog = (plan: SubscriptionPlan) => {\n    setEditingPlan(plan);\n    setPriceGBP((plan.priceGBP / 100).toFixed(2));\n    setPriceUSD((plan.priceUSD / 100).toFixed(2));\n    setPriceEUR((plan.priceEUR / 100).toFixed(2));\n  };\n\n  const openBundleDialog = (bundle: SmsBundle) => {\n    setEditingBundle(bundle);\n    setPriceGBP((bundle.priceGBP / 100).toFixed(2));\n    setPriceUSD((bundle.priceUSD / 100).toFixed(2));\n    setPriceEUR((bundle.priceEUR / 100).toFixed(2));\n  };\n\n  const closeDialog = () => {\n    setEditingPlan(null);\n    setEditingBundle(null);\n    setPriceGBP(\"\");\n    setPriceUSD(\"\");\n    setPriceEUR(\"\");\n  };\n\n  const handleUpdatePlanPricing = () => {\n    if (!editingPlan) return;\n    \n    const gbp = Math.round(parseFloat(priceGBP) * 100);\n    const usd = Math.round(parseFloat(priceUSD) * 100);\n    const eur = Math.round(parseFloat(priceEUR) * 100);\n\n    if (isNaN(gbp) || isNaN(usd) || isNaN(eur) || gbp <= 0 || usd <= 0 || eur <= 0) {\n      toast({ \n        title: \"Invalid prices\", \n        description: \"Please enter valid positive prices for all currencies\",\n        variant: \"destructive\" \n      });\n      return;\n    }\n\n    updatePlanPricingMutation.mutate({ \n      planId: editingPlan.id, \n      prices: { priceGBP: gbp, priceUSD: usd, priceEUR: eur }\n    });\n  };\n\n  const handleUpdateBundlePricing = () => {\n    if (!editingBundle) return;\n    \n    const gbp = Math.round(parseFloat(priceGBP) * 100);\n    const usd = Math.round(parseFloat(priceUSD) * 100);\n    const eur = Math.round(parseFloat(priceEUR) * 100);\n\n    if (isNaN(gbp) || isNaN(usd) || isNaN(eur) || gbp <= 0 || usd <= 0 || eur <= 0) {\n      toast({ \n        title: \"Invalid prices\", \n        description: \"Please enter valid positive prices for all currencies\",\n        variant: \"destructive\" \n      });\n      return;\n    }\n\n    updateBundlePricingMutation.mutate({ \n      bundleId: editingBundle.id, \n      prices: { priceGBP: gbp, priceUSD: usd, priceEUR: eur }\n    });\n  };\n\n  const formatPrice = (amount: number, currency: string) => {\n    const symbol = currency === \"GBP\" ? \"£\" : currency === \"USD\" ? \"$\" : \"€\";\n    return `${symbol}${(amount / 100).toFixed(2)}`;\n  };\n\n  if (plansLoading || bundlesLoading) {\n    return (\n      <div className=\"flex items-center justify-center h-64\">\n        <p data-testid=\"text-loading\">Loading...</p>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div>\n        <h2 className=\"text-2xl font-bold\" data-testid=\"text-pricing-title\">Pricing Management</h2>\n        <p className=\"text-muted-foreground\">Manage subscription plan and SMS bundle pricing across all currencies</p>\n      </div>\n\n      <Tabs defaultValue=\"plans\" className=\"w-full\">\n        <TabsList>\n          <TabsTrigger value=\"plans\" data-testid=\"tab-plans\">Subscription Plans</TabsTrigger>\n          <TabsTrigger value=\"bundles\" data-testid=\"tab-bundles\">SMS Bundles</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"plans\" className=\"space-y-4\">\n          {plans.map((plan) => (\n            <Card key={plan.id} data-testid={`card-plan-${plan.id}`}>\n              <CardHeader>\n                <div className=\"flex items-start justify-between\">\n                  <div>\n                    <CardTitle>{plan.name}</CardTitle>\n                    <CardDescription>{plan.description}</CardDescription>\n                    <div className=\"mt-2 flex gap-2\">\n                      <Badge variant=\"outline\" data-testid={`badge-credits-${plan.id}`}>\n                        {plan.monthlyCredits} messages/month\n                      </Badge>\n                      {!plan.isActive && (\n                        <Badge variant=\"secondary\">Inactive</Badge>\n                      )}\n                    </div>\n                  </div>\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => openPlanDialog(plan)}\n                    data-testid={`button-edit-plan-${plan.id}`}\n                  >\n                    <Pencil className=\"h-4 w-4 mr-2\" />\n                    Edit Pricing\n                  </Button>\n                </div>\n              </CardHeader>\n              <CardContent>\n                <div className=\"grid grid-cols-3 gap-4\">\n                  <div>\n                    <Label className=\"text-sm text-muted-foreground\">GBP</Label>\n                    <p className=\"text-2xl font-bold\" data-testid={`price-gbp-${plan.id}`}>\n                      {formatPrice(plan.priceGBP, \"GBP\")}/mo\n                    </p>\n                  </div>\n                  <div>\n                    <Label className=\"text-sm text-muted-foreground\">USD</Label>\n                    <p className=\"text-2xl font-bold\" data-testid={`price-usd-${plan.id}`}>\n                      {formatPrice(plan.priceUSD, \"USD\")}/mo\n                    </p>\n                  </div>\n                  <div>\n                    <Label className=\"text-sm text-muted-foreground\">EUR</Label>\n                    <p className=\"text-2xl font-bold\" data-testid={`price-eur-${plan.id}`}>\n                      {formatPrice(plan.priceEUR, \"EUR\")}/mo\n                    </p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </TabsContent>\n\n        <TabsContent value=\"bundles\" className=\"space-y-4\">\n          {bundles.map((bundle) => (\n            <Card key={bundle.id} data-testid={`card-bundle-${bundle.id}`}>\n              <CardHeader>\n                <div className=\"flex items-start justify-between\">\n                  <div>\n                    <CardTitle>{bundle.name}</CardTitle>\n                    <CardDescription>{bundle.description}</CardDescription>\n                    <div className=\"mt-2 flex gap-2\">\n                      <Badge variant=\"outline\" data-testid={`badge-credits-${bundle.id}`}>\n                        {bundle.credits} messages\n                      </Badge>\n                      {!bundle.isActive && (\n                        <Badge variant=\"secondary\">Inactive</Badge>\n                      )}\n                    </div>\n                  </div>\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => openBundleDialog(bundle)}\n                    data-testid={`button-edit-bundle-${bundle.id}`}\n                  >\n                    <Pencil className=\"h-4 w-4 mr-2\" />\n                    Edit Pricing\n                  </Button>\n                </div>\n              </CardHeader>\n              <CardContent>\n                <div className=\"grid grid-cols-3 gap-4\">\n                  <div>\n                    <Label className=\"text-sm text-muted-foreground\">GBP</Label>\n                    <p className=\"text-2xl font-bold\" data-testid={`price-gbp-${bundle.id}`}>\n                      {formatPrice(bundle.priceGBP, \"GBP\")}\n                    </p>\n                  </div>\n                  <div>\n                    <Label className=\"text-sm text-muted-foreground\">USD</Label>\n                    <p className=\"text-2xl font-bold\" data-testid={`price-usd-${bundle.id}`}>\n                      {formatPrice(bundle.priceUSD, \"USD\")}\n                    </p>\n                  </div>\n                  <div>\n                    <Label className=\"text-sm text-muted-foreground\">EUR</Label>\n                    <p className=\"text-2xl font-bold\" data-testid={`price-eur-${bundle.id}`}>\n                      {formatPrice(bundle.priceEUR, \"EUR\")}\n                    </p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </TabsContent>\n      </Tabs>\n\n      {/* Edit Plan Pricing Dialog */}\n      <Dialog open={!!editingPlan} onOpenChange={closeDialog}>\n        <DialogContent data-testid=\"dialog-edit-plan-pricing\">\n          <DialogHeader>\n            <DialogTitle>Edit Plan Pricing</DialogTitle>\n            <DialogDescription>\n              Update pricing for {editingPlan?.name} across all currencies\n            </DialogDescription>\n          </DialogHeader>\n          <div className=\"space-y-4\">\n            <div>\n              <Label htmlFor=\"gbp\">Price (GBP) - £</Label>\n              <Input\n                id=\"gbp\"\n                type=\"number\"\n                step=\"0.01\"\n                min=\"0\"\n                value={priceGBP}\n                onChange={(e) => setPriceGBP(e.target.value)}\n                placeholder=\"29.00\"\n                data-testid=\"input-price-gbp\"\n              />\n            </div>\n            <div>\n              <Label htmlFor=\"usd\">Price (USD) - $</Label>\n              <Input\n                id=\"usd\"\n                type=\"number\"\n                step=\"0.01\"\n                min=\"0\"\n                value={priceUSD}\n                onChange={(e) => setPriceUSD(e.target.value)}\n                placeholder=\"37.00\"\n                data-testid=\"input-price-usd\"\n              />\n            </div>\n            <div>\n              <Label htmlFor=\"eur\">Price (EUR) - €</Label>\n              <Input\n                id=\"eur\"\n                type=\"number\"\n                step=\"0.01\"\n                min=\"0\"\n                value={priceEUR}\n                onChange={(e) => setPriceEUR(e.target.value)}\n                placeholder=\"34.00\"\n                data-testid=\"input-price-eur\"\n              />\n            </div>\n          </div>\n          <DialogFooter>\n            <Button variant=\"outline\" onClick={closeDialog} data-testid=\"button-cancel\">\n              Cancel\n            </Button>\n            <Button \n              onClick={handleUpdatePlanPricing} \n              disabled={updatePlanPricingMutation.isPending}\n              data-testid=\"button-save-plan\"\n            >\n              {updatePlanPricingMutation.isPending ? \"Saving...\" : \"Save Changes\"}\n            </Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n\n      {/* Edit Bundle Pricing Dialog */}\n      <Dialog open={!!editingBundle} onOpenChange={closeDialog}>\n        <DialogContent data-testid=\"dialog-edit-bundle-pricing\">\n          <DialogHeader>\n            <DialogTitle>Edit Bundle Pricing</DialogTitle>\n            <DialogDescription>\n              Update pricing for {editingBundle?.name} across all currencies\n            </DialogDescription>\n          </DialogHeader>\n          <div className=\"space-y-4\">\n            <div>\n              <Label htmlFor=\"bundle-gbp\">Price (GBP) - £</Label>\n              <Input\n                id=\"bundle-gbp\"\n                type=\"number\"\n                step=\"0.01\"\n                min=\"0\"\n                value={priceGBP}\n                onChange={(e) => setPriceGBP(e.target.value)}\n                placeholder=\"15.00\"\n                data-testid=\"input-bundle-price-gbp\"\n              />\n            </div>\n            <div>\n              <Label htmlFor=\"bundle-usd\">Price (USD) - $</Label>\n              <Input\n                id=\"bundle-usd\"\n                type=\"number\"\n                step=\"0.01\"\n                min=\"0\"\n                value={priceUSD}\n                onChange={(e) => setPriceUSD(e.target.value)}\n                placeholder=\"19.00\"\n                data-testid=\"input-bundle-price-usd\"\n              />\n            </div>\n            <div>\n              <Label htmlFor=\"bundle-eur\">Price (EUR) - €</Label>\n              <Input\n                id=\"bundle-eur\"\n                type=\"number\"\n                step=\"0.01\"\n                min=\"0\"\n                value={priceEUR}\n                onChange={(e) => setPriceEUR(e.target.value)}\n                placeholder=\"17.00\"\n                data-testid=\"input-bundle-price-eur\"\n              />\n            </div>\n          </div>\n          <DialogFooter>\n            <Button variant=\"outline\" onClick={closeDialog} data-testid=\"button-cancel\">\n              Cancel\n            </Button>\n            <Button \n              onClick={handleUpdateBundlePricing} \n              disabled={updateBundlePricingMutation.isPending}\n              data-testid=\"button-save-bundle\"\n            >\n              {updateBundlePricingMutation.isPending ? \"Saving...\" : \"Save Changes\"}\n            </Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}\n","size_bytes":15614},"client/src/lib/constants.ts":{"content":"export const COUNTRIES = [\n  { code: \"US\", name: \"United States\", dialCode: \"+1\" },\n  { code: \"CA\", name: \"Canada\", dialCode: \"+1\" },\n  { code: \"GB\", name: \"United Kingdom\", dialCode: \"+44\" },\n  { code: \"AU\", name: \"Australia\", dialCode: \"+61\" },\n  { code: \"NZ\", name: \"New Zealand\", dialCode: \"+64\" },\n  { code: \"IE\", name: \"Ireland\", dialCode: \"+353\" },\n  { code: \"IN\", name: \"India\", dialCode: \"+91\" },\n  { code: \"SG\", name: \"Singapore\", dialCode: \"+65\" },\n  { code: \"MX\", name: \"Mexico\", dialCode: \"+52\" },\n  { code: \"DE\", name: \"Germany\", dialCode: \"+49\" },\n  { code: \"FR\", name: \"France\", dialCode: \"+33\" },\n  { code: \"ES\", name: \"Spain\", dialCode: \"+34\" },\n  { code: \"IT\", name: \"Italy\", dialCode: \"+39\" },\n];\n","size_bytes":717},"server/lib/ics-generator.ts":{"content":"import type { Job } from \"@shared/schema\";\n\n/**\n * Generates an iCalendar (.ics) file for a job\n * This follows the RFC 5545 iCalendar specification\n */\nexport function generateICS(job: Job): string {\n  const now = new Date();\n  const dtStamp = formatICSDate(now);\n  const dtStart = formatICSDate(new Date(job.startTime));\n  const dtEnd = formatICSDate(new Date(job.endTime));\n  \n  // Generate a unique UID for the event using job ID\n  const uid = `${job.id}@heyteam.app`;\n  \n  // Escape special characters in text fields according to RFC 5545\n  const summary = escapeICSText(job.name);\n  const description = job.description ? escapeICSText(job.description) : '';\n  const location = job.location ? escapeICSText(job.location) : '';\n  \n  // Build the ICS content\n  const icsLines = [\n    'BEGIN:VCALENDAR',\n    'VERSION:2.0',\n    'PRODID:-//HeyTeam//Job Calendar//EN',\n    'CALSCALE:GREGORIAN',\n    'METHOD:PUBLISH',\n    'BEGIN:VEVENT',\n    `UID:${uid}`,\n    `DTSTAMP:${dtStamp}`,\n    `DTSTART:${dtStart}`,\n    `DTEND:${dtEnd}`,\n    `SUMMARY:${summary}`,\n  ];\n  \n  if (description) {\n    icsLines.push(`DESCRIPTION:${description}`);\n  }\n  \n  if (location) {\n    icsLines.push(`LOCATION:${location}`);\n  }\n  \n  icsLines.push(\n    'STATUS:CONFIRMED',\n    'SEQUENCE:0',\n    'END:VEVENT',\n    'END:VCALENDAR'\n  );\n  \n  // Join with CRLF line endings as per RFC 5545\n  return icsLines.join('\\r\\n');\n}\n\n/**\n * Formats a Date object to iCalendar date-time format (YYYYMMDDTHHMMSSZ)\n */\nfunction formatICSDate(date: Date): string {\n  const year = date.getUTCFullYear();\n  const month = String(date.getUTCMonth() + 1).padStart(2, '0');\n  const day = String(date.getUTCDate()).padStart(2, '0');\n  const hours = String(date.getUTCHours()).padStart(2, '0');\n  const minutes = String(date.getUTCMinutes()).padStart(2, '0');\n  const seconds = String(date.getUTCSeconds()).padStart(2, '0');\n  \n  return `${year}${month}${day}T${hours}${minutes}${seconds}Z`;\n}\n\n/**\n * Escapes special characters in text fields according to RFC 5545\n * Backslashes, semicolons, commas, and newlines need to be escaped\n */\nfunction escapeICSText(text: string): string {\n  return text\n    .replace(/\\\\/g, '\\\\\\\\')  // Escape backslashes\n    .replace(/;/g, '\\\\;')     // Escape semicolons\n    .replace(/,/g, '\\\\,')     // Escape commas\n    .replace(/\\n/g, '\\\\n');   // Escape newlines\n}\n","size_bytes":2349},"client/src/pages/admin-dashboard.tsx":{"content":"import { useState, useMemo } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Redirect } from \"wouter\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Users, CreditCard, MessageSquare, TrendingUp, Shield, Plus, Ban, CheckCircle, Trash2 } from \"lucide-react\";\nimport { format } from \"date-fns\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface AdminUserData {\n  id: string;\n  username: string;\n  email: string;\n  isAdmin: boolean;\n  isActive: boolean;\n  currency: string;\n  credits: number;\n  smsVolume: number;\n  referralCode: string | null;\n  createdAt: string | null;\n  subscription: {\n    planId: string | null;\n    planName: string;\n    status: string;\n    currency: string;\n    currentPeriodEnd: string | null;\n    trialEndsAt: string | null;\n    monthlyPayment: number;\n  };\n}\n\ninterface PlatformAdminUser {\n  id: string;\n  name: string;\n  email: string;\n  createdAt: string;\n}\n\nconst CURRENCY_SYMBOLS: Record<string, string> = {\n  GBP: \"£\",\n  USD: \"$\",\n  EUR: \"€\",\n};\n\nconst STATUS_COLORS: Record<string, string> = {\n  active: \"bg-green-500/10 text-green-700 dark:text-green-400 border-green-500/20\",\n  trial: \"bg-blue-500/10 text-blue-700 dark:text-blue-400 border-blue-500/20\",\n  canceled: \"bg-red-500/10 text-red-700 dark:text-red-400 border-red-500/20\",\n  past_due: \"bg-yellow-500/10 text-yellow-700 dark:text-yellow-400 border-yellow-500/20\",\n};\n\nexport default function AdminDashboard() {\n  const { toast } = useToast();\n  const [isAddAdminDialogOpen, setIsAddAdminDialogOpen] = useState(false);\n  const [newAdminName, setNewAdminName] = useState(\"\");\n  const [newAdminEmail, setNewAdminEmail] = useState(\"\");\n  const [newAdminPassword, setNewAdminPassword] = useState(\"\");\n  const [showDisabledInstances, setShowDisabledInstances] = useState(false);\n\n  const { data: currentUser } = useQuery({\n    queryKey: [\"/api/auth/me\"],\n  });\n\n  const { data: users, isLoading } = useQuery<AdminUserData[]>({\n    queryKey: [\"/api/admin/users\"],\n    enabled: !!currentUser?.isAdmin,\n  });\n\n  const { data: platformAdmins, isLoading: isLoadingAdmins } = useQuery<PlatformAdminUser[]>({\n    queryKey: [\"/api/admin/admin-users\"],\n    enabled: !!currentUser?.isAdmin,\n  });\n\n  const disableUserMutation = useMutation({\n    mutationFn: async (userId: string) => {\n      return await apiRequest(\"POST\", `/api/admin/users/${userId}/disable`, {});\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/users\"] });\n      toast({ title: \"User disabled successfully\" });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Failed to disable user\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const enableUserMutation = useMutation({\n    mutationFn: async (userId: string) => {\n      return await apiRequest(\"POST\", `/api/admin/users/${userId}/enable`, {});\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/users\"] });\n      toast({ title: \"User enabled successfully\" });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Failed to enable user\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const createAdminUserMutation = useMutation({\n    mutationFn: async () => {\n      return await apiRequest(\"POST\", \"/api/admin/admin-users\", {\n        name: newAdminName,\n        email: newAdminEmail,\n        password: newAdminPassword,\n      });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/admin-users\"] });\n      setIsAddAdminDialogOpen(false);\n      setNewAdminName(\"\");\n      setNewAdminEmail(\"\");\n      setNewAdminPassword(\"\");\n      toast({ title: \"Admin user created successfully\" });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Failed to create admin user\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteAdminUserMutation = useMutation({\n    mutationFn: async (adminId: string) => {\n      return await apiRequest(\"DELETE\", `/api/admin/admin-users/${adminId}`, {});\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/admin-users\"] });\n      toast({ title: \"Admin user deleted successfully\" });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Failed to delete admin user\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Redirect non-admin users\n  if (currentUser && !currentUser.isAdmin) {\n    return <Redirect to=\"/\" />;\n  }\n\n  if (isLoading || isLoadingAdmins) {\n    return (\n      <div className=\"flex items-center justify-center min-h-[400px]\">\n        <div className=\"animate-spin w-8 h-8 border-4 border-primary border-t-transparent rounded-full\" aria-label=\"Loading\" />\n      </div>\n    );\n  }\n\n  // Calculate summary statistics\n  const totalUsers = users?.length || 0;\n  const activeUsers = users?.filter(u => u.isActive).length || 0;\n  const disabledUsers = users?.filter(u => !u.isActive).length || 0;\n  const activeSubscriptions = users?.filter(u => u.subscription.status === \"active\" && u.isActive).length || 0;\n  const totalRevenue = users?.reduce((sum, u) => {\n    if (u.subscription.status === \"active\" && u.isActive) {\n      return sum + u.subscription.monthlyPayment;\n    }\n    return sum;\n  }, 0) || 0;\n  const totalCredits = users?.reduce((sum, u) => sum + u.credits, 0) || 0;\n\n  // Filter users based on toggle state\n  const filteredUsers = useMemo(() => {\n    if (showDisabledInstances) {\n      return users;\n    }\n    return users?.filter(u => u.isActive === true);\n  }, [users, showDisabledInstances]);\n\n  return (\n    <div className=\"space-y-8\">\n      <div>\n        <h1 className=\"text-3xl font-semibold text-foreground\" data-testid=\"text-page-title\">Admin Dashboard</h1>\n        <p className=\"text-muted-foreground mt-1\">Monitor instances, subscriptions, and platform administrators</p>\n      </div>\n\n      {/* Summary Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n        <Card data-testid=\"card-total-users\">\n          <CardHeader className=\"flex flex-row items-center justify-between gap-2 space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium text-muted-foreground\">Total Instances</CardTitle>\n            <Users className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-semibold\" data-testid=\"text-total-users\">{totalUsers}</div>\n            <p className=\"text-xs text-muted-foreground mt-1\">{activeUsers} active</p>\n          </CardContent>\n        </Card>\n\n        <Card data-testid=\"card-active-subscriptions\">\n          <CardHeader className=\"flex flex-row items-center justify-between gap-2 space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium text-muted-foreground\">Active Subscriptions</CardTitle>\n            <CreditCard className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-semibold\" data-testid=\"text-active-subscriptions\">{activeSubscriptions}</div>\n          </CardContent>\n        </Card>\n\n        <Card data-testid=\"card-monthly-revenue\">\n          <CardHeader className=\"flex flex-row items-center justify-between gap-2 space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium text-muted-foreground\">Monthly Revenue</CardTitle>\n            <TrendingUp className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-semibold\" data-testid=\"text-monthly-revenue\">\n              £{totalRevenue.toFixed(2)}\n            </div>\n            <p className=\"text-xs text-muted-foreground mt-1\">Mixed currencies</p>\n          </CardContent>\n        </Card>\n\n        <Card data-testid=\"card-total-credits\">\n          <CardHeader className=\"flex flex-row items-center justify-between gap-2 space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium text-muted-foreground\">Total SMS Credits</CardTitle>\n            <MessageSquare className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-semibold\" data-testid=\"text-total-credits\">{totalCredits.toLocaleString()}</div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Tabs for User Instances and Admin Users */}\n      <Tabs defaultValue=\"instances\" className=\"w-full\">\n        <TabsList>\n          <TabsTrigger value=\"instances\" data-testid=\"tab-instances\">User Instances</TabsTrigger>\n          <TabsTrigger value=\"admins\" data-testid=\"tab-admins\">Platform Admins</TabsTrigger>\n        </TabsList>\n\n        {/* User Instances Tab */}\n        <TabsContent value=\"instances\" className=\"mt-6\">\n          <Card>\n            <CardHeader>\n              <div className=\"flex flex-col sm:flex-row sm:items-center justify-between gap-4\">\n                <div>\n                  <CardTitle>User Instances</CardTitle>\n                  <p className=\"text-sm text-muted-foreground\">Manage customer accounts and subscriptions</p>\n                </div>\n                <Button\n                  variant={showDisabledInstances ? \"default\" : \"outline\"}\n                  size=\"sm\"\n                  onClick={() => setShowDisabledInstances(!showDisabledInstances)}\n                  className=\"gap-2 self-start sm:self-auto\"\n                  data-testid=\"button-toggle-disabled\"\n                >\n                  <Ban className=\"h-4 w-4\" />\n                  {showDisabledInstances ? `Hide Disabled (${disabledUsers})` : `Show Disabled (${disabledUsers})`}\n                </Button>\n              </div>\n            </CardHeader>\n            <CardContent>\n              <div className=\"overflow-x-auto\">\n                <table className=\"w-full\" data-testid=\"table-users\">\n                  <thead>\n                    <tr className=\"border-b\">\n                      <th className=\"text-left p-3 text-sm font-medium text-muted-foreground\">Company</th>\n                      <th className=\"text-left p-3 text-sm font-medium text-muted-foreground\">Email</th>\n                      <th className=\"text-left p-3 text-sm font-medium text-muted-foreground\">Plan</th>\n                      <th className=\"text-left p-3 text-sm font-medium text-muted-foreground\">Status</th>\n                      <th className=\"text-left p-3 text-sm font-medium text-muted-foreground\">SMS Credits</th>\n                      <th className=\"text-left p-3 text-sm font-medium text-muted-foreground\">Monthly Payment</th>\n                      <th className=\"text-left p-3 text-sm font-medium text-muted-foreground\">Registered</th>\n                      <th className=\"text-left p-3 text-sm font-medium text-muted-foreground\">Actions</th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    {filteredUsers?.map((user) => (\n                      <tr key={`${user.id}-${showDisabledInstances ? 'all' : 'active'}`} className=\"border-b hover-elevate\" data-testid={`row-user-${user.id}`}>\n                        <td className=\"p-3\">\n                          <div className=\"flex flex-col\">\n                            <span className=\"font-medium text-foreground\" data-testid={`text-username-${user.id}`}>\n                              {user.username}\n                            </span>\n                          </div>\n                        </td>\n                        <td className=\"p-3\">\n                          <span className=\"text-sm text-muted-foreground\" data-testid={`text-email-${user.id}`}>\n                            {user.email}\n                          </span>\n                        </td>\n                        <td className=\"p-3\">\n                          <Badge variant=\"outline\" data-testid={`badge-plan-${user.id}`}>\n                            {user.subscription.planName}\n                          </Badge>\n                        </td>\n                        <td className=\"p-3\">\n                          <div className=\"flex flex-col gap-1\">\n                            <Badge \n                              className={STATUS_COLORS[user.subscription.status] || STATUS_COLORS.trial}\n                              data-testid={`badge-status-${user.id}`}\n                            >\n                              {user.subscription.status}\n                            </Badge>\n                            {!user.isActive && (\n                              <Badge variant=\"destructive\" className=\"w-fit\" data-testid={`badge-disabled-${user.id}`}>\n                                Disabled\n                              </Badge>\n                            )}\n                          </div>\n                        </td>\n                        <td className=\"p-3\">\n                          <span className=\"text-sm text-foreground\" data-testid={`text-credits-${user.id}`}>\n                            {user.credits.toLocaleString()}\n                          </span>\n                        </td>\n                        <td className=\"p-3\">\n                          <span className=\"text-sm font-medium text-foreground\" data-testid={`text-payment-${user.id}`}>\n                            {user.subscription.monthlyPayment > 0 \n                              ? `${CURRENCY_SYMBOLS[user.subscription.currency]}${user.subscription.monthlyPayment.toFixed(2)}`\n                              : \"—\"\n                            }\n                          </span>\n                        </td>\n                        <td className=\"p-3\">\n                          <span className=\"text-sm text-muted-foreground\" data-testid={`text-registered-${user.id}`}>\n                            {user.createdAt ? format(new Date(user.createdAt), \"MMM d, yyyy\") : \"—\"}\n                          </span>\n                        </td>\n                        <td className=\"p-3\">\n                          {user.isActive ? (\n                            <Button\n                              variant=\"outline\"\n                              size=\"sm\"\n                              onClick={() => disableUserMutation.mutate(user.id)}\n                              disabled={disableUserMutation.isPending}\n                              data-testid={`button-disable-${user.id}`}\n                            >\n                              <Ban className=\"h-3 w-3 mr-1\" />\n                              Disable\n                            </Button>\n                          ) : (\n                            <Button\n                              variant=\"outline\"\n                              size=\"sm\"\n                              onClick={() => enableUserMutation.mutate(user.id)}\n                              disabled={enableUserMutation.isPending}\n                              data-testid={`button-enable-${user.id}`}\n                            >\n                              <CheckCircle className=\"h-3 w-3 mr-1\" />\n                              Enable\n                            </Button>\n                          )}\n                        </td>\n                      </tr>\n                    ))}\n                  </tbody>\n                </table>\n              </div>\n\n              {(!filteredUsers || filteredUsers.length === 0) && (\n                <div className=\"text-center py-12\">\n                  <p className=\"text-muted-foreground\">\n                    {showDisabledInstances ? \"No users found\" : \"No active users found\"}\n                  </p>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* Platform Admins Tab */}\n        <TabsContent value=\"admins\" className=\"mt-6\">\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between gap-2\">\n              <div>\n                <CardTitle>Platform Administrators</CardTitle>\n                <p className=\"text-sm text-muted-foreground mt-1\">Manage users with admin access to this dashboard</p>\n              </div>\n              <Dialog open={isAddAdminDialogOpen} onOpenChange={setIsAddAdminDialogOpen}>\n                <DialogTrigger asChild>\n                  <Button data-testid=\"button-add-admin\">\n                    <Plus className=\"h-4 w-4 mr-2\" />\n                    Add Admin\n                  </Button>\n                </DialogTrigger>\n                <DialogContent data-testid=\"dialog-add-admin\">\n                  <DialogHeader>\n                    <DialogTitle>Add Platform Administrator</DialogTitle>\n                    <DialogDescription>\n                      Create a new admin user with access to this dashboard\n                    </DialogDescription>\n                  </DialogHeader>\n                  <div className=\"space-y-4 py-4\">\n                    <div>\n                      <Label htmlFor=\"admin-name\">Name</Label>\n                      <Input\n                        id=\"admin-name\"\n                        value={newAdminName}\n                        onChange={(e) => setNewAdminName(e.target.value)}\n                        placeholder=\"John Doe\"\n                        data-testid=\"input-admin-name\"\n                      />\n                    </div>\n                    <div>\n                      <Label htmlFor=\"admin-email\">Email</Label>\n                      <Input\n                        id=\"admin-email\"\n                        type=\"email\"\n                        value={newAdminEmail}\n                        onChange={(e) => setNewAdminEmail(e.target.value)}\n                        placeholder=\"admin@example.com\"\n                        data-testid=\"input-admin-email\"\n                      />\n                    </div>\n                    <div>\n                      <Label htmlFor=\"admin-password\">Password</Label>\n                      <Input\n                        id=\"admin-password\"\n                        type=\"password\"\n                        value={newAdminPassword}\n                        onChange={(e) => setNewAdminPassword(e.target.value)}\n                        placeholder=\"Minimum 6 characters\"\n                        data-testid=\"input-admin-password\"\n                      />\n                    </div>\n                  </div>\n                  <DialogFooter>\n                    <Button\n                      variant=\"outline\"\n                      onClick={() => setIsAddAdminDialogOpen(false)}\n                      data-testid=\"button-cancel-add-admin\"\n                    >\n                      Cancel\n                    </Button>\n                    <Button\n                      onClick={() => createAdminUserMutation.mutate()}\n                      disabled={createAdminUserMutation.isPending || !newAdminName || !newAdminEmail || !newAdminPassword}\n                      data-testid=\"button-submit-add-admin\"\n                    >\n                      {createAdminUserMutation.isPending ? \"Creating...\" : \"Create Admin\"}\n                    </Button>\n                  </DialogFooter>\n                </DialogContent>\n              </Dialog>\n            </CardHeader>\n            <CardContent>\n              <div className=\"overflow-x-auto\">\n                <table className=\"w-full\" data-testid=\"table-admin-users\">\n                  <thead>\n                    <tr className=\"border-b\">\n                      <th className=\"text-left p-3 text-sm font-medium text-muted-foreground\">Name</th>\n                      <th className=\"text-left p-3 text-sm font-medium text-muted-foreground\">Email</th>\n                      <th className=\"text-left p-3 text-sm font-medium text-muted-foreground\">Created</th>\n                      <th className=\"text-left p-3 text-sm font-medium text-muted-foreground\">Actions</th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    {platformAdmins?.map((admin) => (\n                      <tr key={admin.id} className=\"border-b hover-elevate\" data-testid={`row-admin-${admin.id}`}>\n                        <td className=\"p-3\">\n                          <div className=\"flex items-center gap-2\">\n                            <Shield className=\"h-4 w-4 text-primary\" />\n                            <span className=\"font-medium text-foreground\" data-testid={`text-admin-name-${admin.id}`}>\n                              {admin.name}\n                            </span>\n                          </div>\n                        </td>\n                        <td className=\"p-3\">\n                          <span className=\"text-sm text-muted-foreground\" data-testid={`text-admin-email-${admin.id}`}>\n                            {admin.email}\n                          </span>\n                        </td>\n                        <td className=\"p-3\">\n                          <span className=\"text-sm text-muted-foreground\" data-testid={`text-admin-created-${admin.id}`}>\n                            {format(new Date(admin.createdAt), \"MMM d, yyyy\")}\n                          </span>\n                        </td>\n                        <td className=\"p-3\">\n                          <Button\n                            variant=\"outline\"\n                            size=\"sm\"\n                            onClick={() => {\n                              if (confirm(\"Are you sure you want to delete this admin user?\")) {\n                                deleteAdminUserMutation.mutate(admin.id);\n                              }\n                            }}\n                            disabled={deleteAdminUserMutation.isPending}\n                            data-testid={`button-delete-admin-${admin.id}`}\n                          >\n                            <Trash2 className=\"h-3 w-3 mr-1\" />\n                            Delete\n                          </Button>\n                        </td>\n                      </tr>\n                    ))}\n                  </tbody>\n                </table>\n              </div>\n\n              {!platformAdmins || platformAdmins.length === 0 && (\n                <div className=\"text-center py-12\">\n                  <p className=\"text-muted-foreground\">No platform admins found</p>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}\n","size_bytes":22844},"client/src/pages/message-history.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { useState } from \"react\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Search, X } from \"lucide-react\";\nimport { format } from \"date-fns\";\n\ninterface EnrichedMessage {\n  id: string;\n  contactId: string;\n  contactName: string;\n  jobId: string | null;\n  jobName: string | null;\n  direction: string;\n  content: string;\n  status: string;\n  createdAt: string;\n}\n\nexport default function MessageHistory() {\n  const [searchName, setSearchName] = useState(\"\");\n  const [searchContent, setSearchContent] = useState(\"\");\n  const [searchDate, setSearchDate] = useState(\"\");\n\n  const { data: messages = [], isLoading } = useQuery<EnrichedMessage[]>({\n    queryKey: [\"/api/messages/history\"],\n  });\n\n  const filteredMessages = messages.filter((msg) => {\n    const nameMatch = msg.contactName.toLowerCase().includes(searchName.toLowerCase());\n    const contentMatch = msg.content.toLowerCase().includes(searchContent.toLowerCase());\n    \n    let dateMatch = true;\n    if (searchDate) {\n      const msgDate = format(new Date(msg.createdAt), \"yyyy-MM-dd\");\n      dateMatch = msgDate === searchDate;\n    }\n    \n    return nameMatch && contentMatch && dateMatch;\n  });\n\n  const clearFilters = () => {\n    setSearchName(\"\");\n    setSearchContent(\"\");\n    setSearchDate(\"\");\n  };\n\n  const hasActiveFilters = searchName || searchContent || searchDate;\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center min-h-screen\">\n        <div className=\"text-muted-foreground\">Loading message history...</div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"container mx-auto p-6 space-y-6\">\n      <div>\n        <h1 className=\"text-3xl font-bold\" data-testid=\"text-page-title\">Message History</h1>\n        <p className=\"text-muted-foreground mt-1\">\n          View all sent and received messages\n        </p>\n      </div>\n\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Search className=\"h-5 w-5\" />\n            Filter Messages\n          </CardTitle>\n          <CardDescription>\n            Search by contact name, message content, or date\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"search-name\">Contact Name</Label>\n              <Input\n                id=\"search-name\"\n                data-testid=\"input-search-name\"\n                placeholder=\"Search by name...\"\n                value={searchName}\n                onChange={(e) => setSearchName(e.target.value)}\n              />\n            </div>\n            \n            <div className=\"space-y-2\">\n              <Label htmlFor=\"search-content\">Message Content</Label>\n              <Input\n                id=\"search-content\"\n                data-testid=\"input-search-content\"\n                placeholder=\"Search message text...\"\n                value={searchContent}\n                onChange={(e) => setSearchContent(e.target.value)}\n              />\n            </div>\n            \n            <div className=\"space-y-2\">\n              <Label htmlFor=\"search-date\">Date</Label>\n              <Input\n                id=\"search-date\"\n                data-testid=\"input-search-date\"\n                type=\"date\"\n                value={searchDate}\n                onChange={(e) => setSearchDate(e.target.value)}\n              />\n            </div>\n          </div>\n\n          {hasActiveFilters && (\n            <div className=\"mt-4 flex items-center justify-between\">\n              <p className=\"text-sm text-muted-foreground\">\n                Found {filteredMessages.length} of {messages.length} messages\n              </p>\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                data-testid=\"button-clear-filters\"\n                onClick={clearFilters}\n              >\n                <X className=\"h-4 w-4 mr-2\" />\n                Clear Filters\n              </Button>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      <Card>\n        <CardHeader>\n          <CardTitle>Messages ({filteredMessages.length})</CardTitle>\n        </CardHeader>\n        <CardContent>\n          {filteredMessages.length === 0 ? (\n            <div className=\"text-center py-12 text-muted-foreground\">\n              {hasActiveFilters ? \"No messages match your filters\" : \"No messages yet\"}\n            </div>\n          ) : (\n            <div className=\"overflow-x-auto\">\n              <table className=\"w-full\" data-testid=\"table-messages\">\n                <thead>\n                  <tr className=\"border-b\">\n                    <th className=\"text-left p-3 font-medium\">Date & Time</th>\n                    <th className=\"text-left p-3 font-medium\">Contact</th>\n                    <th className=\"text-left p-3 font-medium\">Direction</th>\n                    <th className=\"text-left p-3 font-medium\">Job</th>\n                    <th className=\"text-left p-3 font-medium\">Message</th>\n                    <th className=\"text-left p-3 font-medium\">Status</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {filteredMessages.map((msg) => (\n                    <tr\n                      key={msg.id}\n                      className=\"border-b hover-elevate\"\n                      data-testid={`row-message-${msg.id}`}\n                    >\n                      <td className=\"p-3 text-sm\" data-testid={`text-date-${msg.id}`}>\n                        {format(new Date(msg.createdAt), \"MMM dd, yyyy HH:mm\")}\n                      </td>\n                      <td className=\"p-3\" data-testid={`text-contact-${msg.id}`}>\n                        {msg.contactName}\n                      </td>\n                      <td className=\"p-3\">\n                        <Badge\n                          variant={msg.direction === \"outbound\" ? \"default\" : \"secondary\"}\n                          data-testid={`badge-direction-${msg.id}`}\n                        >\n                          {msg.direction === \"outbound\" ? \"Sent\" : \"Received\"}\n                        </Badge>\n                      </td>\n                      <td className=\"p-3 text-sm text-muted-foreground\" data-testid={`text-job-${msg.id}`}>\n                        {msg.jobName || \"-\"}\n                      </td>\n                      <td className=\"p-3 max-w-md\" data-testid={`text-content-${msg.id}`}>\n                        <div className=\"truncate text-sm\">{msg.content}</div>\n                      </td>\n                      <td className=\"p-3\">\n                        <Badge\n                          variant={msg.status === \"sent\" ? \"default\" : msg.status === \"failed\" ? \"destructive\" : \"secondary\"}\n                          data-testid={`badge-status-${msg.id}`}\n                        >\n                          {msg.status}\n                        </Badge>\n                      </td>\n                    </tr>\n                  ))}\n                </tbody>\n              </table>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":7421},"client/src/pages/roster-view.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { useRoute } from \"wouter\";\nimport { Card, CardContent, CardHeader } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Calendar, MapPin, Clock, AlertCircle } from \"lucide-react\";\nimport { format, parseISO } from \"date-fns\";\nimport type { Job, Contact } from \"@shared/schema\";\n\ninterface RosterData {\n  contact: Contact;\n  jobs: Job[];\n}\n\nexport default function RosterView() {\n  const [, params] = useRoute(\"/roster/:token\");\n  const token = params?.token;\n\n  const { data, isLoading, error } = useQuery<RosterData>({\n    queryKey: [\"/api/roster\", token],\n    enabled: !!token,\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-gradient-to-br from-background to-muted\">\n        <div className=\"animate-spin w-8 h-8 border-4 border-primary border-t-transparent rounded-full\" aria-label=\"Loading\" />\n      </div>\n    );\n  }\n\n  if (error || !data) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-gradient-to-br from-background to-muted p-4\">\n        <Card className=\"max-w-md w-full\">\n          <CardContent className=\"p-8 text-center\">\n            <AlertCircle className=\"h-12 w-12 text-destructive mx-auto mb-4\" />\n            <h2 className=\"text-xl font-semibold mb-2\">Invalid Roster Link</h2>\n            <p className=\"text-muted-foreground\">\n              This roster link is invalid or has expired. Please contact your manager for a new link.\n            </p>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  const { contact, jobs } = data;\n  \n  // Sort jobs by date (upcoming first)\n  const sortedJobs = [...jobs].sort((a, b) => {\n    const dateA = new Date(a.startTime).getTime();\n    const dateB = new Date(b.startTime).getTime();\n    return dateA - dateB;\n  });\n\n  // Separate upcoming and past jobs\n  const now = new Date();\n  const upcomingJobs = sortedJobs.filter(job => new Date(job.startTime) >= now);\n  const pastJobs = sortedJobs.filter(job => new Date(job.startTime) < now);\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-background to-muted p-4 md:p-8\">\n      <div className=\"max-w-4xl mx-auto space-y-6\">\n        {/* Header */}\n        <Card data-testid=\"card-roster-header\">\n          <CardHeader>\n            <div className=\"flex items-center gap-3\">\n              <div className=\"h-12 w-12 rounded-full bg-primary flex items-center justify-center text-primary-foreground font-semibold text-lg\">\n                {contact.firstName?.[0] || '?'}{contact.lastName?.[0] || ''}\n              </div>\n              <div>\n                <h1 className=\"text-2xl font-semibold\" data-testid=\"text-contact-name\">\n                  {contact.firstName} {contact.lastName}\n                </h1>\n                <p className=\"text-muted-foreground\">Your Job Roster</p>\n              </div>\n            </div>\n          </CardHeader>\n        </Card>\n\n        {/* Upcoming Jobs */}\n        {upcomingJobs.length > 0 && (\n          <div>\n            <h2 className=\"text-xl font-semibold mb-3 px-1\">Upcoming Jobs</h2>\n            <div className=\"space-y-3\">\n              {upcomingJobs.map((job) => (\n                <JobCard key={job.id} job={job} />\n              ))}\n            </div>\n          </div>\n        )}\n\n        {/* Past Jobs */}\n        {pastJobs.length > 0 && (\n          <div>\n            <h2 className=\"text-xl font-semibold mb-3 px-1\">Past Jobs</h2>\n            <div className=\"space-y-3\">\n              {pastJobs.map((job) => (\n                <JobCard key={job.id} job={job} isPast />\n              ))}\n            </div>\n          </div>\n        )}\n\n        {/* Empty State */}\n        {jobs.length === 0 && (\n          <Card>\n            <CardContent className=\"p-12 text-center\">\n              <Calendar className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n              <h3 className=\"text-lg font-medium mb-2\">No Jobs Assigned</h3>\n              <p className=\"text-muted-foreground\">\n                You don't have any jobs assigned at the moment. Check back later!\n              </p>\n            </CardContent>\n          </Card>\n        )}\n      </div>\n    </div>\n  );\n}\n\nfunction JobCard({ job, isPast = false }: { job: Job; isPast?: boolean }) {\n  const startTime = new Date(job.startTime);\n  const endTime = new Date(job.endTime);\n  const formattedDate = format(startTime, \"EEEE, MMMM d, yyyy\");\n  const formattedTime = `${format(startTime, \"h:mm a\")} - ${format(endTime, \"h:mm a\")}`;\n\n  return (\n    <Card \n      className={isPast ? \"opacity-60\" : \"hover-elevate\"}\n      data-testid={`card-job-${job.id}`}\n    >\n      <CardContent className=\"p-6\">\n        <div className=\"flex flex-col md:flex-row md:items-start md:justify-between gap-4\">\n          <div className=\"space-y-3 flex-1\">\n            <div className=\"flex items-start justify-between gap-2\">\n              <h3 className=\"text-lg font-semibold\" data-testid={`text-job-name-${job.id}`}>\n                {job.name}\n              </h3>\n              {isPast && (\n                <Badge variant=\"secondary\" className=\"text-xs\">Past</Badge>\n              )}\n            </div>\n\n            <div className=\"space-y-2 text-sm\">\n              <div className=\"flex items-center gap-2 text-muted-foreground\">\n                <Calendar className=\"h-4 w-4 flex-shrink-0\" />\n                <span data-testid={`text-job-date-${job.id}`}>{formattedDate}</span>\n              </div>\n\n              <div className=\"flex items-center gap-2 text-muted-foreground\">\n                <Clock className=\"h-4 w-4 flex-shrink-0\" />\n                <span data-testid={`text-job-time-${job.id}`}>{formattedTime}</span>\n              </div>\n\n              {job.location && (\n                <div className=\"flex items-center gap-2 text-muted-foreground\">\n                  <MapPin className=\"h-4 w-4 flex-shrink-0\" />\n                  <span data-testid={`text-job-location-${job.id}`}>{job.location}</span>\n                </div>\n              )}\n            </div>\n\n            {job.notes && (\n              <p className=\"text-sm text-muted-foreground pt-2 border-t\" data-testid={`text-job-notes-${job.id}`}>\n                {job.notes}\n              </p>\n            )}\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":6345},"client/src/pages/profile.tsx":{"content":"import { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport { Label } from \"@/components/ui/label\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { User } from \"lucide-react\";\n\nconst profileSchema = z.object({\n  firstName: z.string().min(1, \"First name is required\"),\n  lastName: z.string().min(1, \"Last name is required\"),\n  email: z.string().email(\"Invalid email address\"),\n  mobileNumber: z.string().optional(),\n  countryCode: z.string().optional(),\n});\n\ntype ProfileFormData = z.infer<typeof profileSchema>;\n\nexport default function ProfilePage() {\n  const { toast } = useToast();\n\n  const { data: user, isLoading } = useQuery({\n    queryKey: [\"/api/auth/me\"],\n  });\n\n  const form = useForm<ProfileFormData>({\n    resolver: zodResolver(profileSchema),\n    values: {\n      firstName: user?.firstName || \"\",\n      lastName: user?.lastName || \"\",\n      email: user?.email || \"\",\n      mobileNumber: user?.mobileNumber || \"\",\n      countryCode: user?.countryCode || \"US\",\n    },\n  });\n\n  const updateProfileMutation = useMutation({\n    mutationFn: async (data: ProfileFormData) => {\n      return await apiRequest(\"PATCH\", \"/api/user/profile\", data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/auth/me\"] });\n      toast({\n        title: \"Profile updated\",\n        description: \"Your profile has been updated successfully.\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Update failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: ProfileFormData) => {\n    updateProfileMutation.mutate(data);\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center min-h-screen\">\n        <div className=\"text-muted-foreground\">Loading...</div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"container mx-auto p-6 max-w-2xl space-y-6\">\n      <div>\n        <h1 className=\"text-3xl font-bold\" data-testid=\"text-page-title\">Profile Settings</h1>\n        <p className=\"text-muted-foreground mt-1\">\n          Manage your personal information\n        </p>\n      </div>\n\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <User className=\"h-5 w-5\" />\n            Personal Information\n          </CardTitle>\n          <CardDescription>\n            Update your profile details\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <Form {...form}>\n            <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <FormField\n                  control={form.control}\n                  name=\"firstName\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>First Name</FormLabel>\n                      <FormControl>\n                        <Input\n                          {...field}\n                          data-testid=\"input-first-name\"\n                          placeholder=\"Enter first name\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"lastName\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Last Name</FormLabel>\n                      <FormControl>\n                        <Input\n                          {...field}\n                          data-testid=\"input-last-name\"\n                          placeholder=\"Enter last name\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n\n              <FormField\n                control={form.control}\n                name=\"email\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Email Address</FormLabel>\n                    <FormControl>\n                      <Input\n                        {...field}\n                        type=\"email\"\n                        data-testid=\"input-email\"\n                        placeholder=\"Enter email\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <FormField\n                  control={form.control}\n                  name=\"countryCode\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Country Code</FormLabel>\n                      <FormControl>\n                        <Input\n                          {...field}\n                          data-testid=\"input-country-code\"\n                          placeholder=\"US\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"mobileNumber\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Mobile Number</FormLabel>\n                      <FormControl>\n                        <Input\n                          {...field}\n                          data-testid=\"input-mobile\"\n                          placeholder=\"Enter mobile number\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n\n              <div className=\"flex justify-end gap-2 pt-4\">\n                <Button\n                  type=\"submit\"\n                  data-testid=\"button-save-profile\"\n                  disabled={updateProfileMutation.isPending}\n                >\n                  {updateProfileMutation.isPending ? \"Saving...\" : \"Save Changes\"}\n                </Button>\n              </div>\n            </form>\n          </Form>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":6856}},"version":2}